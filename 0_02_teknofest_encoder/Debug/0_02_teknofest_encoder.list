
0_02_teknofest_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e6c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ff4  08001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002004  08002004  00012004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800200c  0800200c  0001200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000080  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000008c  2000008c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008c7e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000135f  00000000  00000000  00028cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000950  00000000  00000000  0002a020  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008a8  00000000  00000000  0002a970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004933  00000000  00000000  0002b218  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002fd6  00000000  00000000  0002fb4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00032b21  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026cc  00000000  00000000  00032ba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fdc 	.word	0x08001fdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001fdc 	.word	0x08001fdc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f929 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f001 fc32 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f941 	bl	80007c2 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f909 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000040 	.word	0x20000040

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000040 	.word	0x20000040

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <__NVIC_EnableIRQ+0x38>)
 8000634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000638:	095b      	lsrs	r3, r3, #5
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	f002 021f 	and.w	r2, r2, #31
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db0a      	blt.n	8000686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	490d      	ldr	r1, [pc, #52]	; (80006a8 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	440b      	add	r3, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000684:	e00a      	b.n	800069c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	0112      	lsls	r2, r2, #4
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	440b      	add	r3, r1
 800069a:	761a      	strb	r2, [r3, #24]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	2201      	movs	r2, #1
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	1e5a      	subs	r2, r3, #1
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	401a      	ands	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f6:	2101      	movs	r1, #1
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	1e59      	subs	r1, r3, #1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff90 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff2b 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff40 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff90 	bl	80006b0 <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5f 	bl	800065c <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff33 	bl	8000620 <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffa2 	bl	8000714 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e16b      	b.n	8000ad0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007f8:	2201      	movs	r2, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 815a 	bne.w	8000aca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b01      	cmp	r3, #1
 8000820:	d005      	beq.n	800082e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800082a:	2b02      	cmp	r3, #2
 800082c:	d130      	bne.n	8000890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	4013      	ands	r3, r2
 8000844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	f003 0201 	and.w	r2, r3, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b03      	cmp	r3, #3
 800089a:	d017      	beq.n	80008cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d123      	bne.n	8000920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	69b9      	ldr	r1, [r7, #24]
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0203 	and.w	r2, r3, #3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80b4 	beq.w	8000aca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4a5f      	ldr	r2, [pc, #380]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 8000968:	4b5e      	ldr	r3, [pc, #376]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 800096a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <HAL_GPIO_Init+0x308>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800097e:	4a5a      	ldr	r2, [pc, #360]	; (8000ae8 <HAL_GPIO_Init+0x30c>)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a51      	ldr	r2, [pc, #324]	; (8000aec <HAL_GPIO_Init+0x310>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d02b      	beq.n	8000a02 <HAL_GPIO_Init+0x226>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <HAL_GPIO_Init+0x314>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d025      	beq.n	80009fe <HAL_GPIO_Init+0x222>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4f      	ldr	r2, [pc, #316]	; (8000af4 <HAL_GPIO_Init+0x318>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d01f      	beq.n	80009fa <HAL_GPIO_Init+0x21e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4e      	ldr	r2, [pc, #312]	; (8000af8 <HAL_GPIO_Init+0x31c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d019      	beq.n	80009f6 <HAL_GPIO_Init+0x21a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a4d      	ldr	r2, [pc, #308]	; (8000afc <HAL_GPIO_Init+0x320>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d013      	beq.n	80009f2 <HAL_GPIO_Init+0x216>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_GPIO_Init+0x324>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00d      	beq.n	80009ee <HAL_GPIO_Init+0x212>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4b      	ldr	r2, [pc, #300]	; (8000b04 <HAL_GPIO_Init+0x328>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x20e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4a      	ldr	r2, [pc, #296]	; (8000b08 <HAL_GPIO_Init+0x32c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_GPIO_Init+0x20a>
 80009e2:	2307      	movs	r3, #7
 80009e4:	e00e      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009e6:	2308      	movs	r3, #8
 80009e8:	e00c      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009ea:	2306      	movs	r3, #6
 80009ec:	e00a      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009ee:	2305      	movs	r3, #5
 80009f0:	e008      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009f2:	2304      	movs	r3, #4
 80009f4:	e006      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009f6:	2303      	movs	r3, #3
 80009f8:	e004      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009fa:	2302      	movs	r3, #2
 80009fc:	e002      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <HAL_GPIO_Init+0x228>
 8000a02:	2300      	movs	r3, #0
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	f002 0203 	and.w	r2, r2, #3
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a14:	4934      	ldr	r1, [pc, #208]	; (8000ae8 <HAL_GPIO_Init+0x30c>)
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <HAL_GPIO_Init+0x330>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3301      	adds	r3, #1
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	2b0f      	cmp	r3, #15
 8000ad4:	f67f ae90 	bls.w	80007f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3724      	adds	r7, #36	; 0x24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40013800 	.word	0x40013800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40021400 	.word	0x40021400
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40021c00 	.word	0x40021c00
 8000b0c:	40013c00 	.word	0x40013c00

08000b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e264      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d075      	beq.n	8000c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b2e:	4ba3      	ldr	r3, [pc, #652]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d00c      	beq.n	8000b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b3a:	4ba0      	ldr	r3, [pc, #640]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d112      	bne.n	8000b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b46:	4b9d      	ldr	r3, [pc, #628]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b52:	d10b      	bne.n	8000b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b54:	4b99      	ldr	r3, [pc, #612]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d05b      	beq.n	8000c18 <HAL_RCC_OscConfig+0x108>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d157      	bne.n	8000c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e23f      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b74:	d106      	bne.n	8000b84 <HAL_RCC_OscConfig+0x74>
 8000b76:	4a91      	ldr	r2, [pc, #580]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b78:	4b90      	ldr	r3, [pc, #576]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e01d      	b.n	8000bc0 <HAL_RCC_OscConfig+0xb0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b8c:	d10c      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x98>
 8000b8e:	4a8b      	ldr	r2, [pc, #556]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	4b8a      	ldr	r3, [pc, #552]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4a88      	ldr	r2, [pc, #544]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b9c:	4b87      	ldr	r3, [pc, #540]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_RCC_OscConfig+0xb0>
 8000ba8:	4a84      	ldr	r2, [pc, #528]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000baa:	4b84      	ldr	r3, [pc, #528]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4a81      	ldr	r2, [pc, #516]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000bb6:	4b81      	ldr	r3, [pc, #516]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d013      	beq.n	8000bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fcec 	bl	80005a4 <HAL_GetTick>
 8000bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd0:	f7ff fce8 	bl	80005a4 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b64      	cmp	r3, #100	; 0x64
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e204      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	4b76      	ldr	r3, [pc, #472]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0f0      	beq.n	8000bd0 <HAL_RCC_OscConfig+0xc0>
 8000bee:	e014      	b.n	8000c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fcd8 	bl	80005a4 <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcd4 	bl	80005a4 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b64      	cmp	r3, #100	; 0x64
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e1f0      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	4b6c      	ldr	r3, [pc, #432]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0xe8>
 8000c16:	e000      	b.n	8000c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d063      	beq.n	8000cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c26:	4b65      	ldr	r3, [pc, #404]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c32:	4b62      	ldr	r3, [pc, #392]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d11c      	bne.n	8000c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c3e:	4b5f      	ldr	r3, [pc, #380]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d116      	bne.n	8000c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4a:	4b5c      	ldr	r3, [pc, #368]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d005      	beq.n	8000c62 <HAL_RCC_OscConfig+0x152>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e1c4      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4956      	ldr	r1, [pc, #344]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c76:	e03a      	b.n	8000cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d020      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c80:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <HAL_RCC_OscConfig+0x2b0>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c86:	f7ff fc8d 	bl	80005a4 <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fc89 	bl	80005a4 <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e1a5      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d0f0      	beq.n	8000c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cac:	4943      	ldr	r1, [pc, #268]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000cae:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
 8000cc0:	e015      	b.n	8000cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <HAL_RCC_OscConfig+0x2b0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc6c 	bl	80005a4 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc68 	bl	80005a4 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e184      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d030      	beq.n	8000d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d016      	beq.n	8000d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d08:	f7ff fc4c 	bl	80005a4 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc48 	bl	80005a4 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e164      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0x200>
 8000d2e:	e015      	b.n	8000d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_RCC_OscConfig+0x2b4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d36:	f7ff fc35 	bl	80005a4 <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3c:	e008      	b.n	8000d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fc31 	bl	80005a4 <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d901      	bls.n	8000d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e14d      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f0      	bne.n	8000d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80a0 	beq.w	8000eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_RCC_OscConfig+0x2ac>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d96:	2301      	movs	r3, #1
 8000d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_RCC_OscConfig+0x2b8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d121      	bne.n	8000dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_RCC_OscConfig+0x2b8>)
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_RCC_OscConfig+0x2b8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000db2:	f7ff fbf7 	bl	80005a4 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db8:	e011      	b.n	8000dde <HAL_RCC_OscConfig+0x2ce>
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	42470000 	.word	0x42470000
 8000dc4:	42470e80 	.word	0x42470e80
 8000dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dcc:	f7ff fbea 	bl	80005a4 <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e106      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dde:	4b85      	ldr	r3, [pc, #532]	; (8000ff4 <HAL_RCC_OscConfig+0x4e4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d106      	bne.n	8000e00 <HAL_RCC_OscConfig+0x2f0>
 8000df2:	4a81      	ldr	r2, [pc, #516]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000df4:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dfe:	e01c      	b.n	8000e3a <HAL_RCC_OscConfig+0x32a>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	d10c      	bne.n	8000e22 <HAL_RCC_OscConfig+0x312>
 8000e08:	4a7b      	ldr	r2, [pc, #492]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	6713      	str	r3, [r2, #112]	; 0x70
 8000e14:	4a78      	ldr	r2, [pc, #480]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e16:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e20:	e00b      	b.n	8000e3a <HAL_RCC_OscConfig+0x32a>
 8000e22:	4a75      	ldr	r2, [pc, #468]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e28:	f023 0301 	bic.w	r3, r3, #1
 8000e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e2e:	4a72      	ldr	r2, [pc, #456]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e30:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e34:	f023 0304 	bic.w	r3, r3, #4
 8000e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d015      	beq.n	8000e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e42:	f7ff fbaf 	bl	80005a4 <HAL_GetTick>
 8000e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e48:	e00a      	b.n	8000e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4a:	f7ff fbab 	bl	80005a4 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e0c5      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e60:	4b65      	ldr	r3, [pc, #404]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0ee      	beq.n	8000e4a <HAL_RCC_OscConfig+0x33a>
 8000e6c:	e014      	b.n	8000e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fb99 	bl	80005a4 <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e74:	e00a      	b.n	8000e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e76:	f7ff fb95 	bl	80005a4 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e0af      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1ee      	bne.n	8000e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d105      	bne.n	8000eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e9e:	4a56      	ldr	r2, [pc, #344]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000ea0:	4b55      	ldr	r3, [pc, #340]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 809b 	beq.w	8000fea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb4:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d05c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d141      	bne.n	8000f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_RCC_OscConfig+0x4ec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fb69 	bl	80005a4 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed6:	f7ff fb65 	bl	80005a4 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e081      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee8:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ef4:	4940      	ldr	r1, [pc, #256]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69da      	ldr	r2, [r3, #28]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	085b      	lsrs	r3, r3, #1
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	061b      	lsls	r3, r3, #24
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1e:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <HAL_RCC_OscConfig+0x4ec>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fb3e 	bl	80005a4 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2c:	f7ff fb3a 	bl	80005a4 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e056      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x41c>
 8000f4a:	e04e      	b.n	8000fea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_RCC_OscConfig+0x4ec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fb27 	bl	80005a4 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5a:	f7ff fb23 	bl	80005a4 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e03f      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_RCC_OscConfig+0x44a>
 8000f78:	e037      	b.n	8000fea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e032      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <HAL_RCC_OscConfig+0x4e8>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d028      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d121      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d11a      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d111      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	085b      	lsrs	r3, r3, #1
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d107      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d001      	beq.n	8000fea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	42470060 	.word	0x42470060

08001000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0cc      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0207 	and.w	r2, r3, #7
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d20c      	bcs.n	800103c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001022:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800102a:	4b63      	ldr	r3, [pc, #396]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0207 	and.w	r2, r3, #7
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d001      	beq.n	800103c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e0b8      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d020      	beq.n	800108a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001054:	4a59      	ldr	r2, [pc, #356]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800105e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800106c:	4a53      	ldr	r2, [pc, #332]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001078:	4950      	ldr	r1, [pc, #320]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	4313      	orrs	r3, r2
 8001088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d044      	beq.n	8001120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d119      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e07f      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d003      	beq.n	80010be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e06f      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e067      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010de:	4937      	ldr	r1, [pc, #220]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 0203 	bic.w	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f0:	f7ff fa58 	bl	80005a4 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f6:	e00a      	b.n	800110e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f7ff fa54 	bl	80005a4 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	f241 3288 	movw	r2, #5000	; 0x1388
 8001106:	4293      	cmp	r3, r2
 8001108:	d901      	bls.n	800110e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e04f      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 020c 	and.w	r2, r3, #12
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	429a      	cmp	r2, r3
 800111e:	d1eb      	bne.n	80010f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0207 	and.w	r2, r3, #7
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d90c      	bls.n	8001148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0207 	and.w	r2, r3, #7
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d001      	beq.n	8001148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e032      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001154:	4919      	ldr	r1, [pc, #100]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d009      	beq.n	8001186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001172:	4912      	ldr	r1, [pc, #72]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001186:	f000 f821 	bl	80011cc <HAL_RCC_GetSysClockFreq>
 800118a:	4601      	mov	r1, r0
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	fa21 f303 	lsr.w	r3, r1, r3
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_RCC_ClockConfig+0x1c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9b8 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00
 80011bc:	40023800 	.word	0x40023800
 80011c0:	08001ff4 	.word	0x08001ff4
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000000 	.word	0x20000000

080011cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d0:	b08f      	sub	sp, #60	; 0x3c
 80011d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e4:	4b62      	ldr	r3, [pc, #392]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d007      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x34>
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d008      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x3a>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 80b2 	bne.w	800135e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011fa:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80011fe:	e0b1      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001200:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001202:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001204:	e0ae      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001206:	4b5a      	ldr	r3, [pc, #360]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001210:	4b57      	ldr	r3, [pc, #348]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d04e      	beq.n	80012ba <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121c:	4b54      	ldr	r3, [pc, #336]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	099b      	lsrs	r3, r3, #6
 8001222:	f04f 0400 	mov.w	r4, #0
 8001226:	f240 11ff 	movw	r1, #511	; 0x1ff
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	ea01 0103 	and.w	r1, r1, r3
 8001232:	ea02 0204 	and.w	r2, r2, r4
 8001236:	460b      	mov	r3, r1
 8001238:	4614      	mov	r4, r2
 800123a:	0160      	lsls	r0, r4, #5
 800123c:	6278      	str	r0, [r7, #36]	; 0x24
 800123e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001240:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001244:	6278      	str	r0, [r7, #36]	; 0x24
 8001246:	015b      	lsls	r3, r3, #5
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	eb64 0402 	sbc.w	r4, r4, r2
 8001254:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001258:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800125c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001260:	ebb8 0803 	subs.w	r8, r8, r3
 8001264:	eb69 0904 	sbc.w	r9, r9, r4
 8001268:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001280:	eb18 0801 	adds.w	r8, r8, r1
 8001284:	eb49 0902 	adc.w	r9, r9, r2
 8001288:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80012a0:	4640      	mov	r0, r8
 80012a2:	4649      	mov	r1, r9
 80012a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a6:	f04f 0400 	mov.w	r4, #0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4623      	mov	r3, r4
 80012ae:	f7fe ff8b 	bl	80001c8 <__aeabi_uldivmod>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
 80012b8:	e043      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	099b      	lsrs	r3, r3, #6
 80012c0:	f04f 0400 	mov.w	r4, #0
 80012c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	ea01 0103 	and.w	r1, r1, r3
 80012d0:	ea02 0204 	and.w	r2, r2, r4
 80012d4:	460b      	mov	r3, r1
 80012d6:	4614      	mov	r4, r2
 80012d8:	0160      	lsls	r0, r4, #5
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012ec:	1a5b      	subs	r3, r3, r1
 80012ee:	eb64 0402 	sbc.w	r4, r4, r2
 80012f2:	01a6      	lsls	r6, r4, #6
 80012f4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80012f8:	019d      	lsls	r5, r3, #6
 80012fa:	1aed      	subs	r5, r5, r3
 80012fc:	eb66 0604 	sbc.w	r6, r6, r4
 8001300:	00f3      	lsls	r3, r6, #3
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	00eb      	lsls	r3, r5, #3
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001314:	186d      	adds	r5, r5, r1
 8001316:	eb46 0602 	adc.w	r6, r6, r2
 800131a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800131e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001322:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001326:	4655      	mov	r5, sl
 8001328:	465e      	mov	r6, fp
 800132a:	4628      	mov	r0, r5
 800132c:	4631      	mov	r1, r6
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	f04f 0400 	mov.w	r4, #0
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	f7fe ff46 	bl	80001c8 <__aeabi_uldivmod>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	3301      	adds	r3, #1
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800135c:	e002      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001366:	4618      	mov	r0, r3
 8001368:	373c      	adds	r7, #60	; 0x3c
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	00f42400 	.word	0x00f42400
 8001378:	007a1200 	.word	0x007a1200

0800137c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e097      	b.n	80014c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d106      	bne.n	80013aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fd0d 	bl	8001dc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013c0:	f023 0307 	bic.w	r3, r3, #7
 80013c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4610      	mov	r0, r2
 80013d2:	f000 fa57 	bl	8001884 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	4313      	orrs	r3, r2
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800141c:	f023 030c 	bic.w	r3, r3, #12
 8001420:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001428:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800142c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	4313      	orrs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	011a      	lsls	r2, r3, #4
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	031b      	lsls	r3, r3, #12
 800144c:	4313      	orrs	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800145a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001462:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4313      	orrs	r3, r2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80014d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80014e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80014e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80014f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d110      	bne.n	800151a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d001      	beq.n	8001508 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e088      	b.n	800161a <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001518:	e031      	b.n	800157e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d110      	bne.n	8001542 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001520:	7bbb      	ldrb	r3, [r7, #14]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d102      	bne.n	800152c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001526:	7b3b      	ldrb	r3, [r7, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d001      	beq.n	8001530 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e074      	b.n	800161a <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001540:	e01d      	b.n	800157e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d108      	bne.n	800155a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800154e:	7b7b      	ldrb	r3, [r7, #13]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d102      	bne.n	800155a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001554:	7b3b      	ldrb	r3, [r7, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e05d      	b.n	800161a <HAL_TIM_Encoder_Start_IT+0x152>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <HAL_TIM_Encoder_Start_IT+0xc2>
 8001584:	2b04      	cmp	r3, #4
 8001586:	d010      	beq.n	80015aa <HAL_TIM_Encoder_Start_IT+0xe2>
 8001588:	e01f      	b.n	80015ca <HAL_TIM_Encoder_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fa16 	bl	80019c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	68d2      	ldr	r2, [r2, #12]
 80015a2:	f042 0202 	orr.w	r2, r2, #2
 80015a6:	60da      	str	r2, [r3, #12]
      break;
 80015a8:	e02e      	b.n	8001608 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	2104      	movs	r1, #4
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fa06 	bl	80019c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	68d2      	ldr	r2, [r2, #12]
 80015c2:	f042 0204 	orr.w	r2, r2, #4
 80015c6:	60da      	str	r2, [r3, #12]
      break;
 80015c8:	e01e      	b.n	8001608 <HAL_TIM_Encoder_Start_IT+0x140>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2201      	movs	r2, #1
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f9f6 	bl	80019c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	2104      	movs	r1, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f9ef 	bl	80019c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	68d2      	ldr	r2, [r2, #12]
 80015f0:	f042 0202 	orr.w	r2, r2, #2
 80015f4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	68d2      	ldr	r2, [r2, #12]
 8001600:	f042 0204 	orr.w	r2, r2, #4
 8001604:	60da      	str	r2, [r3, #12]
      break;
 8001606:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b02      	cmp	r3, #2
 8001636:	d122      	bne.n	800167e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b02      	cmp	r3, #2
 8001644:	d11b      	bne.n	800167e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f06f 0202 	mvn.w	r2, #2
 800164e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa63 	bl	8001b30 <HAL_TIM_IC_CaptureCallback>
 800166a:	e005      	b.n	8001678 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f8ea 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f8f1 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b04      	cmp	r3, #4
 800168a:	d122      	bne.n	80016d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b04      	cmp	r3, #4
 8001698:	d11b      	bne.n	80016d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f06f 0204 	mvn.w	r2, #4
 80016a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fa39 	bl	8001b30 <HAL_TIM_IC_CaptureCallback>
 80016be:	e005      	b.n	80016cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f8c0 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8c7 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d122      	bne.n	8001726 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d11b      	bne.n	8001726 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f06f 0208 	mvn.w	r2, #8
 80016f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2204      	movs	r2, #4
 80016fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fa0f 	bl	8001b30 <HAL_TIM_IC_CaptureCallback>
 8001712:	e005      	b.n	8001720 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f896 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f89d 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	2b10      	cmp	r3, #16
 8001732:	d122      	bne.n	800177a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b10      	cmp	r3, #16
 8001740:	d11b      	bne.n	800177a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f06f 0210 	mvn.w	r2, #16
 800174a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2208      	movs	r2, #8
 8001750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f9e5 	bl	8001b30 <HAL_TIM_IC_CaptureCallback>
 8001766:	e005      	b.n	8001774 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f86c 	bl	8001846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f873 	bl	800185a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d10e      	bne.n	80017a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f06f 0201 	mvn.w	r2, #1
 800179e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f846 	bl	8001832 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b0:	2b80      	cmp	r3, #128	; 0x80
 80017b2:	d10e      	bne.n	80017d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f9a5 	bl	8001b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017dc:	2b40      	cmp	r3, #64	; 0x40
 80017de:	d10e      	bne.n	80017fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ea:	2b40      	cmp	r3, #64	; 0x40
 80017ec:	d107      	bne.n	80017fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f838 	bl	800186e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b20      	cmp	r3, #32
 800180a:	d10e      	bne.n	800182a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0320 	and.w	r3, r3, #32
 8001816:	2b20      	cmp	r3, #32
 8001818:	d107      	bne.n	800182a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f06f 0220 	mvn.w	r2, #32
 8001822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f96f 	bl	8001b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a40      	ldr	r2, [pc, #256]	; (8001998 <TIM_Base_SetConfig+0x114>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d013      	beq.n	80018c4 <TIM_Base_SetConfig+0x40>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a2:	d00f      	beq.n	80018c4 <TIM_Base_SetConfig+0x40>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3d      	ldr	r2, [pc, #244]	; (800199c <TIM_Base_SetConfig+0x118>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00b      	beq.n	80018c4 <TIM_Base_SetConfig+0x40>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3c      	ldr	r2, [pc, #240]	; (80019a0 <TIM_Base_SetConfig+0x11c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <TIM_Base_SetConfig+0x40>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3b      	ldr	r2, [pc, #236]	; (80019a4 <TIM_Base_SetConfig+0x120>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d003      	beq.n	80018c4 <TIM_Base_SetConfig+0x40>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <TIM_Base_SetConfig+0x124>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d108      	bne.n	80018d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <TIM_Base_SetConfig+0x114>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e4:	d027      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a2c      	ldr	r2, [pc, #176]	; (800199c <TIM_Base_SetConfig+0x118>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d023      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <TIM_Base_SetConfig+0x11c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a2a      	ldr	r2, [pc, #168]	; (80019a4 <TIM_Base_SetConfig+0x120>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01b      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a29      	ldr	r2, [pc, #164]	; (80019a8 <TIM_Base_SetConfig+0x124>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d017      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a28      	ldr	r2, [pc, #160]	; (80019ac <TIM_Base_SetConfig+0x128>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <TIM_Base_SetConfig+0x12c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00f      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <TIM_Base_SetConfig+0x130>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00b      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <TIM_Base_SetConfig+0x134>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <TIM_Base_SetConfig+0x138>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d003      	beq.n	8001936 <TIM_Base_SetConfig+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <TIM_Base_SetConfig+0x13c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d108      	bne.n	8001948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <TIM_Base_SetConfig+0x114>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d003      	beq.n	800197c <TIM_Base_SetConfig+0xf8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <TIM_Base_SetConfig+0x124>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d103      	bne.n	8001984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	615a      	str	r2, [r3, #20]
}
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40010000 	.word	0x40010000
 800199c:	40000400 	.word	0x40000400
 80019a0:	40000800 	.word	0x40000800
 80019a4:	40000c00 	.word	0x40000c00
 80019a8:	40010400 	.word	0x40010400
 80019ac:	40014000 	.word	0x40014000
 80019b0:	40014400 	.word	0x40014400
 80019b4:	40014800 	.word	0x40014800
 80019b8:	40001800 	.word	0x40001800
 80019bc:	40001c00 	.word	0x40001c00
 80019c0:	40002000 	.word	0x40002000

080019c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2201      	movs	r2, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	621a      	str	r2, [r3, #32]
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e05a      	b.n	8001ade <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a21      	ldr	r2, [pc, #132]	; (8001aec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a74:	d01d      	beq.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d018      	beq.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00e      	beq.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d009      	beq.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10c      	bne.n	8001acc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40010000 	.word	0x40010000
 8001af0:	40000400 	.word	0x40000400
 8001af4:	40000800 	.word	0x40000800
 8001af8:	40000c00 	.word	0x40000c00
 8001afc:	40010400 	.word	0x40010400
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40001800 	.word	0x40001800

08001b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_TIM_IC_CaptureCallback>:

uint32_t speed =0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001b40:	6013      	str	r3, [r2, #0]

	count = counter;
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001b48:	6013      	str	r3, [r2, #0]

	position = count/379;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001b50:	fba3 1302 	umull	r1, r3, r3, r2
 8001b54:	1ad2      	subs	r2, r2, r3
 8001b56:	0852      	lsrs	r2, r2, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20000028 	.word	0x20000028
 8001b70:	2000002c 	.word	0x2000002c
 8001b74:	59d61f13 	.word	0x59d61f13
 8001b78:	20000030 	.word	0x20000030

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f7fe fcaa 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b84:	f000 f80c 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b88:	f000 f8c8 	bl	8001d1c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b8c:	f000 f872 	bl	8001c74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_ALL);
 8001b90:	213c      	movs	r1, #60	; 0x3c
 8001b92:	4802      	ldr	r0, [pc, #8]	; (8001b9c <main+0x20>)
 8001b94:	f7ff fc98 	bl	80014c8 <HAL_TIM_Encoder_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <main+0x1c>
 8001b9a:	bf00      	nop
 8001b9c:	20000044 	.word	0x20000044

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	2230      	movs	r2, #48	; 0x30
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 fa0c 	bl	8001fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bca:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <SystemClock_Config+0xcc>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <SystemClock_Config+0xd0>)
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <SystemClock_Config+0xd0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <SystemClock_Config+0xd0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c06:	2302      	movs	r3, #2
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c10:	2304      	movs	r3, #4
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c14:	23a8      	movs	r3, #168	; 0xa8
 8001c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe ff73 	bl	8000b10 <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c30:	f000 f89c 	bl	8001d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c34:	230f      	movs	r3, #15
 8001c36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	2105      	movs	r1, #5
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f9d4 	bl	8001000 <HAL_RCC_ClockConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c5e:	f000 f885 	bl	8001d6c <Error_Handler>
  }
}
 8001c62:	bf00      	nop
 8001c64:	3750      	adds	r7, #80	; 0x50
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000

08001c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f9a2 	bl	8001fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001ce4:	f7ff fb4a 	bl	800137c <HAL_TIM_Encoder_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cee:	f000 f83d 	bl	8001d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_TIM2_Init+0xa4>)
 8001d00:	f7ff fe86 	bl	8001a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d0a:	f000 f82f 	bl	8001d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3730      	adds	r7, #48	; 0x30
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000044 	.word	0x20000044

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <MX_GPIO_Init+0x4c>)
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_GPIO_Init+0x4c>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <MX_GPIO_Init+0x4c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <MX_GPIO_Init+0x4c>)
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_GPIO_Init+0x4c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_GPIO_Init+0x4c>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]

}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <Error_Handler+0x6>

08001d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_MspInit+0x4c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de4:	d133      	bne.n	8001e4e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_TIM_Encoder_MspInit+0x94>)
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_TIM_Encoder_MspInit+0x94>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <HAL_TIM_Encoder_MspInit+0x94>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_TIM_Encoder_MspInit+0x94>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4808      	ldr	r0, [pc, #32]	; (8001e5c <HAL_TIM_Encoder_MspInit+0x98>)
 8001e3a:	f7fe fccf 	bl	80007dc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	201c      	movs	r0, #28
 8001e44:	f7fe fc93 	bl	800076e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e48:	201c      	movs	r0, #28
 8001e4a:	f7fe fcac 	bl	80007a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	indx++;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <SysTick_Handler+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <SysTick_Handler+0x40>)
 8001eb4:	6013      	str	r3, [r2, #0]

	if (indx == 500)
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <SysTick_Handler+0x40>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ebe:	d10e      	bne.n	8001ede <SysTick_Handler+0x36>
	{
		speed = ((position - oldpos)/2);  // speed in clicks/sec
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <SysTick_Handler+0x44>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <SysTick_Handler+0x48>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <SysTick_Handler+0x4c>)
 8001ece:	6013      	str	r3, [r2, #0]
		oldpos = position;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <SysTick_Handler+0x44>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <SysTick_Handler+0x48>)
 8001ed6:	6013      	str	r3, [r2, #0]
		indx = 0;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <SysTick_Handler+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ede:	f7fe fb4d 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000003c 	.word	0x2000003c
 8001eec:	20000030 	.word	0x20000030
 8001ef0:	20000038 	.word	0x20000038
 8001ef4:	20000034 	.word	0x20000034

08001ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <TIM2_IRQHandler+0x10>)
 8001efe:	f7ff fb90 	bl	8001622 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000044 	.word	0x20000044

08001f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f4c:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f5a:	f7ff ffd7 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f000 f811 	bl	8001f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7ff fe0b 	bl	8001b7c <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f68:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f74:	08002014 	.word	0x08002014
  ldr r2, =_sbss
 8001f78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f7c:	2000008c 	.word	0x2000008c

08001f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC_IRQHandler>
	...

08001f84 <__libc_init_array>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	4e0d      	ldr	r6, [pc, #52]	; (8001fbc <__libc_init_array+0x38>)
 8001f88:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <__libc_init_array+0x3c>)
 8001f8a:	1ba4      	subs	r4, r4, r6
 8001f8c:	10a4      	asrs	r4, r4, #2
 8001f8e:	2500      	movs	r5, #0
 8001f90:	42a5      	cmp	r5, r4
 8001f92:	d109      	bne.n	8001fa8 <__libc_init_array+0x24>
 8001f94:	4e0b      	ldr	r6, [pc, #44]	; (8001fc4 <__libc_init_array+0x40>)
 8001f96:	4c0c      	ldr	r4, [pc, #48]	; (8001fc8 <__libc_init_array+0x44>)
 8001f98:	f000 f820 	bl	8001fdc <_init>
 8001f9c:	1ba4      	subs	r4, r4, r6
 8001f9e:	10a4      	asrs	r4, r4, #2
 8001fa0:	2500      	movs	r5, #0
 8001fa2:	42a5      	cmp	r5, r4
 8001fa4:	d105      	bne.n	8001fb2 <__libc_init_array+0x2e>
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}
 8001fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fac:	4798      	blx	r3
 8001fae:	3501      	adds	r5, #1
 8001fb0:	e7ee      	b.n	8001f90 <__libc_init_array+0xc>
 8001fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fb6:	4798      	blx	r3
 8001fb8:	3501      	adds	r5, #1
 8001fba:	e7f2      	b.n	8001fa2 <__libc_init_array+0x1e>
 8001fbc:	0800200c 	.word	0x0800200c
 8001fc0:	0800200c 	.word	0x0800200c
 8001fc4:	0800200c 	.word	0x0800200c
 8001fc8:	08002010 	.word	0x08002010

08001fcc <memset>:
 8001fcc:	4402      	add	r2, r0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <memset+0xa>
 8001fd4:	4770      	bx	lr
 8001fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001fda:	e7f9      	b.n	8001fd0 <memset+0x4>

08001fdc <_init>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr

08001fe8 <_fini>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr
