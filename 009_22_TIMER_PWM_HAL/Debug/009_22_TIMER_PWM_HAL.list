
009_22_TIMER_PWM_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002188  08002188  00012188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002194  08002194  00012194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000068  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000074  20000074  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008471  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000012cf  00000000  00000000  000284ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000948  00000000  00000000  00029780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008a0  00000000  00000000  0002a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000048ed  00000000  00000000  0002a968  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002ff0  00000000  00000000  0002f255  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00032245  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026b8  00000000  00000000  000322c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002160 	.word	0x08002160

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002160 	.word	0x08002160

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f92d 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f001 fd12 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f937 	bl	80007ae <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f90d 	bl	8000776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3f7      	bcc.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	490d      	ldr	r1, [pc, #52]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	4909      	ldr	r1, [pc, #36]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	2201      	movs	r2, #1
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	401a      	ands	r2, r3
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fe:	2101      	movs	r1, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	1e59      	subs	r1, r3, #1
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800072c:	d301      	bcc.n	8000732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2301      	movs	r3, #1
 8000730:	e00f      	b.n	8000752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <SysTick_Config+0x40>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073a:	210f      	movs	r1, #15
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f7ff ff90 	bl	8000664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <SysTick_Config+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <SysTick_Config+0x40>)
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff49 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff5e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ff90 	bl	80006b8 <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5f 	bl	8000664 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffb0 	bl	800071c <SysTick_Config>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	e16b      	b.n	8000abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007e4:	2201      	movs	r2, #1
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f040 815a 	bne.w	8000ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	2b01      	cmp	r3, #1
 800080c:	d005      	beq.n	800081a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000816:	2b02      	cmp	r3, #2
 8000818:	d130      	bne.n	800087c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	2203      	movs	r2, #3
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4013      	ands	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	4313      	orrs	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000850:	2201      	movs	r2, #1
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	091b      	lsrs	r3, r3, #4
 8000866:	f003 0201 	and.w	r2, r3, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4313      	orrs	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	2b03      	cmp	r3, #3
 8000886:	d017      	beq.n	80008b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	2203      	movs	r2, #3
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4013      	ands	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	689a      	ldr	r2, [r3, #8]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d123      	bne.n	800090c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	08da      	lsrs	r2, r3, #3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	220f      	movs	r2, #15
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	691a      	ldr	r2, [r3, #16]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	08da      	lsrs	r2, r3, #3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3208      	adds	r2, #8
 8000906:	69b9      	ldr	r1, [r7, #24]
 8000908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0203 	and.w	r2, r3, #3
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4313      	orrs	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80b4 	beq.w	8000ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000954:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b5c      	ldr	r3, [pc, #368]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800096a:	4a5a      	ldr	r2, [pc, #360]	; (8000ad4 <HAL_GPIO_Init+0x30c>)
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	3302      	adds	r3, #2
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	220f      	movs	r2, #15
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <HAL_GPIO_Init+0x310>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d02b      	beq.n	80009ee <HAL_GPIO_Init+0x226>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a50      	ldr	r2, [pc, #320]	; (8000adc <HAL_GPIO_Init+0x314>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d025      	beq.n	80009ea <HAL_GPIO_Init+0x222>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4f      	ldr	r2, [pc, #316]	; (8000ae0 <HAL_GPIO_Init+0x318>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d01f      	beq.n	80009e6 <HAL_GPIO_Init+0x21e>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <HAL_GPIO_Init+0x31c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d019      	beq.n	80009e2 <HAL_GPIO_Init+0x21a>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <HAL_GPIO_Init+0x320>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0x216>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4c      	ldr	r2, [pc, #304]	; (8000aec <HAL_GPIO_Init+0x324>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00d      	beq.n	80009da <HAL_GPIO_Init+0x212>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <HAL_GPIO_Init+0x328>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d007      	beq.n	80009d6 <HAL_GPIO_Init+0x20e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <HAL_GPIO_Init+0x32c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_GPIO_Init+0x20a>
 80009ce:	2307      	movs	r3, #7
 80009d0:	e00e      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009d2:	2308      	movs	r3, #8
 80009d4:	e00c      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009d6:	2306      	movs	r3, #6
 80009d8:	e00a      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009da:	2305      	movs	r3, #5
 80009dc:	e008      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009de:	2304      	movs	r3, #4
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009e2:	2303      	movs	r3, #3
 80009e4:	e004      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009e6:	2302      	movs	r3, #2
 80009e8:	e002      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009ee:	2300      	movs	r3, #0
 80009f0:	69fa      	ldr	r2, [r7, #28]
 80009f2:	f002 0203 	and.w	r2, r2, #3
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4093      	lsls	r3, r2
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a00:	4934      	ldr	r1, [pc, #208]	; (8000ad4 <HAL_GPIO_Init+0x30c>)
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a32:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a5c:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ab0:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	f67f ae90 	bls.w	80007e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3724      	adds	r7, #36	; 0x24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40021400 	.word	0x40021400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40021c00 	.word	0x40021c00
 8000af8:	40013c00 	.word	0x40013c00

08000afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e264      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d075      	beq.n	8000c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b1a:	4ba3      	ldr	r3, [pc, #652]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d00c      	beq.n	8000b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b26:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d112      	bne.n	8000b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b32:	4b9d      	ldr	r3, [pc, #628]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b3e:	d10b      	bne.n	8000b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b40:	4b99      	ldr	r3, [pc, #612]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d05b      	beq.n	8000c04 <HAL_RCC_OscConfig+0x108>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d157      	bne.n	8000c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e23f      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b60:	d106      	bne.n	8000b70 <HAL_RCC_OscConfig+0x74>
 8000b62:	4a91      	ldr	r2, [pc, #580]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b64:	4b90      	ldr	r3, [pc, #576]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e01d      	b.n	8000bac <HAL_RCC_OscConfig+0xb0>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b78:	d10c      	bne.n	8000b94 <HAL_RCC_OscConfig+0x98>
 8000b7a:	4a8b      	ldr	r2, [pc, #556]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	4b8a      	ldr	r3, [pc, #552]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	4a88      	ldr	r2, [pc, #544]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b88:	4b87      	ldr	r3, [pc, #540]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e00b      	b.n	8000bac <HAL_RCC_OscConfig+0xb0>
 8000b94:	4a84      	ldr	r2, [pc, #528]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b96:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4a81      	ldr	r2, [pc, #516]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000ba2:	4b81      	ldr	r3, [pc, #516]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d013      	beq.n	8000bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fcf6 	bl	80005a4 <HAL_GetTick>
 8000bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bba:	e008      	b.n	8000bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bbc:	f7ff fcf2 	bl	80005a4 <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b64      	cmp	r3, #100	; 0x64
 8000bc8:	d901      	bls.n	8000bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e204      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bce:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f0      	beq.n	8000bbc <HAL_RCC_OscConfig+0xc0>
 8000bda:	e014      	b.n	8000c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fce2 	bl	80005a4 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff fcde 	bl	80005a4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e1f0      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f0      	bne.n	8000be4 <HAL_RCC_OscConfig+0xe8>
 8000c02:	e000      	b.n	8000c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d063      	beq.n	8000cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c12:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00b      	beq.n	8000c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c1e:	4b62      	ldr	r3, [pc, #392]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d11c      	bne.n	8000c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c2a:	4b5f      	ldr	r3, [pc, #380]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d116      	bne.n	8000c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c36:	4b5c      	ldr	r3, [pc, #368]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <HAL_RCC_OscConfig+0x152>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d001      	beq.n	8000c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e1c4      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4e:	4956      	ldr	r1, [pc, #344]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c62:	e03a      	b.n	8000cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d020      	beq.n	8000cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c6c:	4b4f      	ldr	r3, [pc, #316]	; (8000dac <HAL_RCC_OscConfig+0x2b0>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c72:	f7ff fc97 	bl	80005a4 <HAL_GetTick>
 8000c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fc93 	bl	80005a4 <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e1a5      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8c:	4b46      	ldr	r3, [pc, #280]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f0      	beq.n	8000c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c98:	4943      	ldr	r1, [pc, #268]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c9a:	4b43      	ldr	r3, [pc, #268]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
 8000cac:	e015      	b.n	8000cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cae:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <HAL_RCC_OscConfig+0x2b0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fc76 	bl	80005a4 <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fc72 	bl	80005a4 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e184      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f0      	bne.n	8000cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d030      	beq.n	8000d48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d016      	beq.n	8000d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <HAL_RCC_OscConfig+0x2b4>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf4:	f7ff fc56 	bl	80005a4 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cfc:	f7ff fc52 	bl	80005a4 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e164      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f0      	beq.n	8000cfc <HAL_RCC_OscConfig+0x200>
 8000d1a:	e015      	b.n	8000d48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_RCC_OscConfig+0x2b4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d22:	f7ff fc3f 	bl	80005a4 <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fc3b 	bl	80005a4 <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e14d      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f0      	bne.n	8000d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80a0 	beq.w	8000e96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10f      	bne.n	8000d86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d82:	2301      	movs	r3, #1
 8000d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_RCC_OscConfig+0x2b8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d121      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_RCC_OscConfig+0x2b8>)
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_RCC_OscConfig+0x2b8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d9e:	f7ff fc01 	bl	80005a4 <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da4:	e011      	b.n	8000dca <HAL_RCC_OscConfig+0x2ce>
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	42470000 	.word	0x42470000
 8000db0:	42470e80 	.word	0x42470e80
 8000db4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000db8:	f7ff fbf4 	bl	80005a4 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e106      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dca:	4b85      	ldr	r3, [pc, #532]	; (8000fe0 <HAL_RCC_OscConfig+0x4e4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d106      	bne.n	8000dec <HAL_RCC_OscConfig+0x2f0>
 8000dde:	4a81      	ldr	r2, [pc, #516]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000de0:	4b80      	ldr	r3, [pc, #512]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6713      	str	r3, [r2, #112]	; 0x70
 8000dea:	e01c      	b.n	8000e26 <HAL_RCC_OscConfig+0x32a>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	d10c      	bne.n	8000e0e <HAL_RCC_OscConfig+0x312>
 8000df4:	4a7b      	ldr	r2, [pc, #492]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000df6:	4b7b      	ldr	r3, [pc, #492]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8000e00:	4a78      	ldr	r2, [pc, #480]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e02:	4b78      	ldr	r3, [pc, #480]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e0c:	e00b      	b.n	8000e26 <HAL_RCC_OscConfig+0x32a>
 8000e0e:	4a75      	ldr	r2, [pc, #468]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e10:	4b74      	ldr	r3, [pc, #464]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1a:	4a72      	ldr	r2, [pc, #456]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e1c:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e20:	f023 0304 	bic.w	r3, r3, #4
 8000e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d015      	beq.n	8000e5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbb9 	bl	80005a4 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e34:	e00a      	b.n	8000e4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f7ff fbb5 	bl	80005a4 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e0c5      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4c:	4b65      	ldr	r3, [pc, #404]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0ee      	beq.n	8000e36 <HAL_RCC_OscConfig+0x33a>
 8000e58:	e014      	b.n	8000e84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fba3 	bl	80005a4 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e60:	e00a      	b.n	8000e78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e62:	f7ff fb9f 	bl	80005a4 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e0af      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e78:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1ee      	bne.n	8000e62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e84:	7dfb      	ldrb	r3, [r7, #23]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d105      	bne.n	8000e96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e8a:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e8c:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 809b 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ea0:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d05c      	beq.n	8000f66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d141      	bne.n	8000f38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eb4:	4b4c      	ldr	r3, [pc, #304]	; (8000fe8 <HAL_RCC_OscConfig+0x4ec>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff fb73 	bl	80005a4 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec2:	f7ff fb6f 	bl	80005a4 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e081      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f0      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ee0:	4940      	ldr	r1, [pc, #256]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69da      	ldr	r2, [r3, #28]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	019b      	lsls	r3, r3, #6
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	085b      	lsrs	r3, r3, #1
 8000efa:	3b01      	subs	r3, #1
 8000efc:	041b      	lsls	r3, r3, #16
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f04:	061b      	lsls	r3, r3, #24
 8000f06:	4313      	orrs	r3, r2
 8000f08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <HAL_RCC_OscConfig+0x4ec>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb48 	bl	80005a4 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f18:	f7ff fb44 	bl	80005a4 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e056      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2a:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0x41c>
 8000f36:	e04e      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_RCC_OscConfig+0x4ec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fb31 	bl	80005a4 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f46:	f7ff fb2d 	bl	80005a4 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e03f      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f0      	bne.n	8000f46 <HAL_RCC_OscConfig+0x44a>
 8000f64:	e037      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e032      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_RCC_OscConfig+0x4e8>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d028      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d121      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d11a      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fa8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d111      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d107      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d001      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40007000 	.word	0x40007000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	42470060 	.word	0x42470060

08000fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e0cc      	b.n	800119a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001000:	4b68      	ldr	r3, [pc, #416]	; (80011a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0207 	and.w	r2, r3, #7
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d20c      	bcs.n	8001028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800100e:	4b65      	ldr	r3, [pc, #404]	; (80011a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001016:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0207 	and.w	r2, r3, #7
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d001      	beq.n	8001028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0b8      	b.n	800119a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d020      	beq.n	8001076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001040:	4a59      	ldr	r2, [pc, #356]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001042:	4b59      	ldr	r3, [pc, #356]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800104a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001058:	4a53      	ldr	r2, [pc, #332]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001064:	4950      	ldr	r1, [pc, #320]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	4b50      	ldr	r3, [pc, #320]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4313      	orrs	r3, r2
 8001074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d044      	beq.n	800110c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d107      	bne.n	800109a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d119      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e07f      	b.n	800119a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d003      	beq.n	80010aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d107      	bne.n	80010ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010aa:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d109      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e06f      	b.n	800119a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e067      	b.n	800119a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ca:	4937      	ldr	r1, [pc, #220]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 0203 	bic.w	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010dc:	f7ff fa62 	bl	80005a4 <HAL_GetTick>
 80010e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e2:	e00a      	b.n	80010fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e4:	f7ff fa5e 	bl	80005a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e04f      	b.n	800119a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 020c 	and.w	r2, r3, #12
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	429a      	cmp	r2, r3
 800110a:	d1eb      	bne.n	80010e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_RCC_ClockConfig+0x1b8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0207 	and.w	r2, r3, #7
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d90c      	bls.n	8001134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_RCC_ClockConfig+0x1b8>)
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0207 	and.w	r2, r3, #7
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d001      	beq.n	8001134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e032      	b.n	800119a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d008      	beq.n	8001152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001140:	4919      	ldr	r1, [pc, #100]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800115e:	4912      	ldr	r1, [pc, #72]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001172:	f000 f821 	bl	80011b8 <HAL_RCC_GetSysClockFreq>
 8001176:	4601      	mov	r1, r0
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	fa21 f303 	lsr.w	r3, r1, r3
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f9c2 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00
 80011a8:	40023800 	.word	0x40023800
 80011ac:	08002178 	.word	0x08002178
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000000 	.word	0x20000000

080011b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011bc:	b087      	sub	sp, #28
 80011be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011c0:	2200      	movs	r2, #0
 80011c2:	60fa      	str	r2, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	617a      	str	r2, [r7, #20]
 80011c8:	2200      	movs	r2, #0
 80011ca:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80011cc:	2200      	movs	r2, #0
 80011ce:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011d0:	4a51      	ldr	r2, [pc, #324]	; (8001318 <HAL_RCC_GetSysClockFreq+0x160>)
 80011d2:	6892      	ldr	r2, [r2, #8]
 80011d4:	f002 020c 	and.w	r2, r2, #12
 80011d8:	2a04      	cmp	r2, #4
 80011da:	d007      	beq.n	80011ec <HAL_RCC_GetSysClockFreq+0x34>
 80011dc:	2a08      	cmp	r2, #8
 80011de:	d008      	beq.n	80011f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	f040 8090 	bne.w	8001306 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <HAL_RCC_GetSysClockFreq+0x164>)
 80011e8:	613b      	str	r3, [r7, #16]
       break;
 80011ea:	e08f      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011ec:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <HAL_RCC_GetSysClockFreq+0x168>)
 80011ee:	613b      	str	r3, [r7, #16]
      break;
 80011f0:	e08c      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f2:	4a49      	ldr	r2, [pc, #292]	; (8001318 <HAL_RCC_GetSysClockFreq+0x160>)
 80011f4:	6852      	ldr	r2, [r2, #4]
 80011f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011fa:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011fc:	4a46      	ldr	r2, [pc, #280]	; (8001318 <HAL_RCC_GetSysClockFreq+0x160>)
 80011fe:	6852      	ldr	r2, [r2, #4]
 8001200:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001204:	2a00      	cmp	r2, #0
 8001206:	d023      	beq.n	8001250 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_RCC_GetSysClockFreq+0x160>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	f04f 0400 	mov.w	r4, #0
 8001212:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	ea03 0301 	and.w	r3, r3, r1
 800121e:	ea04 0402 	and.w	r4, r4, r2
 8001222:	4a3f      	ldr	r2, [pc, #252]	; (8001320 <HAL_RCC_GetSysClockFreq+0x168>)
 8001224:	fb02 f104 	mul.w	r1, r2, r4
 8001228:	2200      	movs	r2, #0
 800122a:	fb02 f203 	mul.w	r2, r2, r3
 800122e:	440a      	add	r2, r1
 8001230:	493b      	ldr	r1, [pc, #236]	; (8001320 <HAL_RCC_GetSysClockFreq+0x168>)
 8001232:	fba3 0101 	umull	r0, r1, r3, r1
 8001236:	1853      	adds	r3, r2, r1
 8001238:	4619      	mov	r1, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f04f 0400 	mov.w	r4, #0
 8001240:	461a      	mov	r2, r3
 8001242:	4623      	mov	r3, r4
 8001244:	f7fe ffc0 	bl	80001c8 <__aeabi_uldivmod>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e04c      	b.n	80012ea <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001250:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_RCC_GetSysClockFreq+0x160>)
 8001252:	6852      	ldr	r2, [r2, #4]
 8001254:	0992      	lsrs	r2, r2, #6
 8001256:	4611      	mov	r1, r2
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001260:	f04f 0600 	mov.w	r6, #0
 8001264:	ea05 0501 	and.w	r5, r5, r1
 8001268:	ea06 0602 	and.w	r6, r6, r2
 800126c:	4629      	mov	r1, r5
 800126e:	4632      	mov	r2, r6
 8001270:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001274:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001278:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800127c:	4651      	mov	r1, sl
 800127e:	465a      	mov	r2, fp
 8001280:	46aa      	mov	sl, r5
 8001282:	46b3      	mov	fp, r6
 8001284:	4655      	mov	r5, sl
 8001286:	465e      	mov	r6, fp
 8001288:	1b4d      	subs	r5, r1, r5
 800128a:	eb62 0606 	sbc.w	r6, r2, r6
 800128e:	4629      	mov	r1, r5
 8001290:	4632      	mov	r2, r6
 8001292:	0194      	lsls	r4, r2, #6
 8001294:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001298:	018b      	lsls	r3, r1, #6
 800129a:	1a5b      	subs	r3, r3, r1
 800129c:	eb64 0402 	sbc.w	r4, r4, r2
 80012a0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80012a4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80012a8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80012ac:	4643      	mov	r3, r8
 80012ae:	464c      	mov	r4, r9
 80012b0:	4655      	mov	r5, sl
 80012b2:	465e      	mov	r6, fp
 80012b4:	18ed      	adds	r5, r5, r3
 80012b6:	eb46 0604 	adc.w	r6, r6, r4
 80012ba:	462b      	mov	r3, r5
 80012bc:	4634      	mov	r4, r6
 80012be:	02a2      	lsls	r2, r4, #10
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	029b      	lsls	r3, r3, #10
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	e897 0018 	ldmia.w	r7, {r3, r4}
 80012d2:	4618      	mov	r0, r3
 80012d4:	4621      	mov	r1, r4
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f04f 0400 	mov.w	r4, #0
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	f7fe ff72 	bl	80001c8 <__aeabi_uldivmod>
 80012e4:	4603      	mov	r3, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_GetSysClockFreq+0x160>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	3301      	adds	r3, #1
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	613b      	str	r3, [r7, #16]
      break;
 8001304:	e002      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_GetSysClockFreq+0x164>)
 8001308:	613b      	str	r3, [r7, #16]
      break;
 800130a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800130c:	693b      	ldr	r3, [r7, #16]
}
 800130e:	4618      	mov	r0, r3
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	00f42400 	.word	0x00f42400
 8001320:	017d7840 	.word	0x017d7840

08001324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e041      	b.n	80013ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fe1a 	bl	8001f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2202      	movs	r2, #2
 8001354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3304      	adds	r3, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f000 f9b8 	bl	80016d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_TIM_PWM_Start+0x24>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b01      	cmp	r3, #1
 80013de:	bf14      	ite	ne
 80013e0:	2301      	movne	r3, #1
 80013e2:	2300      	moveq	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e022      	b.n	800142e <HAL_TIM_PWM_Start+0x6a>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d109      	bne.n	8001402 <HAL_TIM_PWM_Start+0x3e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	e015      	b.n	800142e <HAL_TIM_PWM_Start+0x6a>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d109      	bne.n	800141c <HAL_TIM_PWM_Start+0x58>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	bf14      	ite	ne
 8001414:	2301      	movne	r3, #1
 8001416:	2300      	moveq	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	e008      	b.n	800142e <HAL_TIM_PWM_Start+0x6a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07c      	b.n	8001530 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <HAL_TIM_PWM_Start+0x82>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001444:	e013      	b.n	800146e <HAL_TIM_PWM_Start+0xaa>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d104      	bne.n	8001456 <HAL_TIM_PWM_Start+0x92>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001454:	e00b      	b.n	800146e <HAL_TIM_PWM_Start+0xaa>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b08      	cmp	r3, #8
 800145a:	d104      	bne.n	8001466 <HAL_TIM_PWM_Start+0xa2>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001464:	e003      	b.n	800146e <HAL_TIM_PWM_Start+0xaa>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2202      	movs	r2, #2
 800146a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fb7e 	bl	8001b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <HAL_TIM_PWM_Start+0x174>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d004      	beq.n	8001490 <HAL_TIM_PWM_Start+0xcc>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a2c      	ldr	r2, [pc, #176]	; (800153c <HAL_TIM_PWM_Start+0x178>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d101      	bne.n	8001494 <HAL_TIM_PWM_Start+0xd0>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_TIM_PWM_Start+0xd2>
 8001494:	2300      	movs	r3, #0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_TIM_PWM_Start+0x174>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d022      	beq.n	80014fa <HAL_TIM_PWM_Start+0x136>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014bc:	d01d      	beq.n	80014fa <HAL_TIM_PWM_Start+0x136>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_TIM_PWM_Start+0x17c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d018      	beq.n	80014fa <HAL_TIM_PWM_Start+0x136>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_TIM_PWM_Start+0x180>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_TIM_PWM_Start+0x136>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_TIM_PWM_Start+0x184>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d00e      	beq.n	80014fa <HAL_TIM_PWM_Start+0x136>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a16      	ldr	r2, [pc, #88]	; (800153c <HAL_TIM_PWM_Start+0x178>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d009      	beq.n	80014fa <HAL_TIM_PWM_Start+0x136>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_TIM_PWM_Start+0x188>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d004      	beq.n	80014fa <HAL_TIM_PWM_Start+0x136>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <HAL_TIM_PWM_Start+0x18c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d111      	bne.n	800151e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b06      	cmp	r3, #6
 800150a:	d010      	beq.n	800152e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800151c:	e007      	b.n	800152e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40010000 	.word	0x40010000
 800153c:	40010400 	.word	0x40010400
 8001540:	40000400 	.word	0x40000400
 8001544:	40000800 	.word	0x40000800
 8001548:	40000c00 	.word	0x40000c00
 800154c:	40014000 	.word	0x40014000
 8001550:	40001800 	.word	0x40001800

08001554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800156e:	2302      	movs	r3, #2
 8001570:	e0ae      	b.n	80016d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0c      	cmp	r3, #12
 800157e:	f200 809f 	bhi.w	80016c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	080015bd 	.word	0x080015bd
 800158c:	080016c1 	.word	0x080016c1
 8001590:	080016c1 	.word	0x080016c1
 8001594:	080016c1 	.word	0x080016c1
 8001598:	080015fd 	.word	0x080015fd
 800159c:	080016c1 	.word	0x080016c1
 80015a0:	080016c1 	.word	0x080016c1
 80015a4:	080016c1 	.word	0x080016c1
 80015a8:	0800163f 	.word	0x0800163f
 80015ac:	080016c1 	.word	0x080016c1
 80015b0:	080016c1 	.word	0x080016c1
 80015b4:	080016c1 	.word	0x080016c1
 80015b8:	0800167f 	.word	0x0800167f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f928 	bl	8001818 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	6992      	ldr	r2, [r2, #24]
 80015d2:	f042 0208 	orr.w	r2, r2, #8
 80015d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	6992      	ldr	r2, [r2, #24]
 80015e2:	f022 0204 	bic.w	r2, r2, #4
 80015e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	6991      	ldr	r1, [r2, #24]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	6912      	ldr	r2, [r2, #16]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	619a      	str	r2, [r3, #24]
      break;
 80015fa:	e064      	b.n	80016c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f978 	bl	80018f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	6992      	ldr	r2, [r2, #24]
 8001612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	6992      	ldr	r2, [r2, #24]
 8001622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	6991      	ldr	r1, [r2, #24]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	6912      	ldr	r2, [r2, #16]
 8001636:	0212      	lsls	r2, r2, #8
 8001638:	430a      	orrs	r2, r1
 800163a:	619a      	str	r2, [r3, #24]
      break;
 800163c:	e043      	b.n	80016c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f9cd 	bl	80019e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	69d2      	ldr	r2, [r2, #28]
 8001654:	f042 0208 	orr.w	r2, r2, #8
 8001658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	69d2      	ldr	r2, [r2, #28]
 8001664:	f022 0204 	bic.w	r2, r2, #4
 8001668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	69d1      	ldr	r1, [r2, #28]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	6912      	ldr	r2, [r2, #16]
 8001678:	430a      	orrs	r2, r1
 800167a:	61da      	str	r2, [r3, #28]
      break;
 800167c:	e023      	b.n	80016c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fa21 	bl	8001acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	69d2      	ldr	r2, [r2, #28]
 8001694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	69d2      	ldr	r2, [r2, #28]
 80016a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	69d1      	ldr	r1, [r2, #28]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	6912      	ldr	r2, [r2, #16]
 80016b8:	0212      	lsls	r2, r2, #8
 80016ba:	430a      	orrs	r2, r1
 80016bc:	61da      	str	r2, [r3, #28]
      break;
 80016be:	e002      	b.n	80016c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	75fb      	strb	r3, [r7, #23]
      break;
 80016c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a40      	ldr	r2, [pc, #256]	; (80017ec <TIM_Base_SetConfig+0x114>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d013      	beq.n	8001718 <TIM_Base_SetConfig+0x40>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f6:	d00f      	beq.n	8001718 <TIM_Base_SetConfig+0x40>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a3d      	ldr	r2, [pc, #244]	; (80017f0 <TIM_Base_SetConfig+0x118>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00b      	beq.n	8001718 <TIM_Base_SetConfig+0x40>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3c      	ldr	r2, [pc, #240]	; (80017f4 <TIM_Base_SetConfig+0x11c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d007      	beq.n	8001718 <TIM_Base_SetConfig+0x40>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <TIM_Base_SetConfig+0x120>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d003      	beq.n	8001718 <TIM_Base_SetConfig+0x40>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3a      	ldr	r2, [pc, #232]	; (80017fc <TIM_Base_SetConfig+0x124>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d108      	bne.n	800172a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800171e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <TIM_Base_SetConfig+0x114>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d02b      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d027      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a2c      	ldr	r2, [pc, #176]	; (80017f0 <TIM_Base_SetConfig+0x118>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d023      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a2b      	ldr	r2, [pc, #172]	; (80017f4 <TIM_Base_SetConfig+0x11c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <TIM_Base_SetConfig+0x120>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01b      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a29      	ldr	r2, [pc, #164]	; (80017fc <TIM_Base_SetConfig+0x124>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d017      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a28      	ldr	r2, [pc, #160]	; (8001800 <TIM_Base_SetConfig+0x128>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <TIM_Base_SetConfig+0x12c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00f      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a26      	ldr	r2, [pc, #152]	; (8001808 <TIM_Base_SetConfig+0x130>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00b      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <TIM_Base_SetConfig+0x134>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d007      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a24      	ldr	r2, [pc, #144]	; (8001810 <TIM_Base_SetConfig+0x138>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d003      	beq.n	800178a <TIM_Base_SetConfig+0xb2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a23      	ldr	r2, [pc, #140]	; (8001814 <TIM_Base_SetConfig+0x13c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d108      	bne.n	800179c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <TIM_Base_SetConfig+0x114>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d003      	beq.n	80017d0 <TIM_Base_SetConfig+0xf8>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <TIM_Base_SetConfig+0x124>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d103      	bne.n	80017d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	615a      	str	r2, [r3, #20]
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40000400 	.word	0x40000400
 80017f4:	40000800 	.word	0x40000800
 80017f8:	40000c00 	.word	0x40000c00
 80017fc:	40010400 	.word	0x40010400
 8001800:	40014000 	.word	0x40014000
 8001804:	40014400 	.word	0x40014400
 8001808:	40014800 	.word	0x40014800
 800180c:	40001800 	.word	0x40001800
 8001810:	40001c00 	.word	0x40001c00
 8001814:	40002000 	.word	0x40002000

08001818 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	f023 0201 	bic.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f023 0302 	bic.w	r3, r3, #2
 8001860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4313      	orrs	r3, r2
 800186a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <TIM_OC1_SetConfig+0xd8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d003      	beq.n	800187c <TIM_OC1_SetConfig+0x64>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <TIM_OC1_SetConfig+0xdc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d10c      	bne.n	8001896 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f023 0308 	bic.w	r3, r3, #8
 8001882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4313      	orrs	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <TIM_OC1_SetConfig+0xd8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d003      	beq.n	80018a6 <TIM_OC1_SetConfig+0x8e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <TIM_OC1_SetConfig+0xdc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d111      	bne.n	80018ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	621a      	str	r2, [r3, #32]
}
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40010000 	.word	0x40010000
 80018f4:	40010400 	.word	0x40010400

080018f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	f023 0210 	bic.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800192e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0320 	bic.w	r3, r3, #32
 8001942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a22      	ldr	r2, [pc, #136]	; (80019dc <TIM_OC2_SetConfig+0xe4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d003      	beq.n	8001960 <TIM_OC2_SetConfig+0x68>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a21      	ldr	r2, [pc, #132]	; (80019e0 <TIM_OC2_SetConfig+0xe8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10d      	bne.n	800197c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800197a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a17      	ldr	r2, [pc, #92]	; (80019dc <TIM_OC2_SetConfig+0xe4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d003      	beq.n	800198c <TIM_OC2_SetConfig+0x94>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a16      	ldr	r2, [pc, #88]	; (80019e0 <TIM_OC2_SetConfig+0xe8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d113      	bne.n	80019b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800199a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	621a      	str	r2, [r3, #32]
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40010000 	.word	0x40010000
 80019e0:	40010400 	.word	0x40010400

080019e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <TIM_OC3_SetConfig+0xe0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d003      	beq.n	8001a4a <TIM_OC3_SetConfig+0x66>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <TIM_OC3_SetConfig+0xe4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10d      	bne.n	8001a66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <TIM_OC3_SetConfig+0xe0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d003      	beq.n	8001a76 <TIM_OC3_SetConfig+0x92>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <TIM_OC3_SetConfig+0xe4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d113      	bne.n	8001a9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	621a      	str	r2, [r3, #32]
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40010400 	.word	0x40010400

08001acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	031b      	lsls	r3, r3, #12
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <TIM_OC4_SetConfig+0xa4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d003      	beq.n	8001b34 <TIM_OC4_SetConfig+0x68>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <TIM_OC4_SetConfig+0xa8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d109      	bne.n	8001b48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	621a      	str	r2, [r3, #32]
}
 8001b62:	bf00      	nop
 8001b64:	371c      	adds	r7, #28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010400 	.word	0x40010400

08001b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a1a      	ldr	r2, [r3, #32]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	621a      	str	r2, [r3, #32]
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e05a      	b.n	8001c92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c28:	d01d      	beq.n	8001c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d018      	beq.n	8001c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00e      	beq.n	8001c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d009      	beq.n	8001c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d004      	beq.n	8001c66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d10c      	bne.n	8001c80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40010400 	.word	0x40010400
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40001800 	.word	0x40001800

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f7fe fc09 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 f833 	bl	8001d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f000 f915 	bl	8001ef8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001cce:	f000 f899 	bl	8001e04 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4815      	ldr	r0, [pc, #84]	; (8001d2c <main+0x70>)
 8001cd6:	f7ff fb75 	bl	80013c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8001cda:	2104      	movs	r1, #4
 8001cdc:	4813      	ldr	r0, [pc, #76]	; (8001d2c <main+0x70>)
 8001cde:	f7ff fb71 	bl	80013c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	4811      	ldr	r0, [pc, #68]	; (8001d2c <main+0x70>)
 8001ce6:	f7ff fb6d 	bl	80013c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8001cea:	210c      	movs	r1, #12
 8001cec:	480f      	ldr	r0, [pc, #60]	; (8001d2c <main+0x70>)
 8001cee:	f7ff fb69 	bl	80013c4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (int i = 0; i <= 99; ++i) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e015      	b.n	8001d24 <main+0x68>
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,i);
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <main+0x70>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,i);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <main+0x70>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,i);
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <main+0x70>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,i);
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <main+0x70>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_Delay(100);
 8001d18:	2064      	movs	r0, #100	; 0x64
 8001d1a:	f7fe fc4f 	bl	80005bc <HAL_Delay>
	  for (int i = 0; i <= 99; ++i) {
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3301      	adds	r3, #1
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b63      	cmp	r3, #99	; 0x63
 8001d28:	dde6      	ble.n	8001cf8 <main+0x3c>
 8001d2a:	e7e2      	b.n	8001cf2 <main+0x36>
 8001d2c:	2000002c 	.word	0x2000002c

08001d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b094      	sub	sp, #80	; 0x50
 8001d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d36:	f107 0320 	add.w	r3, r7, #32
 8001d3a:	2230      	movs	r2, #48	; 0x30
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fa06 	bl	8002150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <SystemClock_Config+0xcc>)
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <SystemClock_Config+0xcc>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d62:	6413      	str	r3, [r2, #64]	; 0x40
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <SystemClock_Config+0xcc>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <SystemClock_Config+0xd0>)
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <SystemClock_Config+0xd0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <SystemClock_Config+0xd0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d90:	2301      	movs	r3, #1
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d94:	2310      	movs	r3, #16
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001da0:	2308      	movs	r3, #8
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001da4:	23a8      	movs	r3, #168	; 0xa8
 8001da6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dac:	2304      	movs	r3, #4
 8001dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fea1 	bl	8000afc <HAL_RCC_OscConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dc0:	f000 f8b4 	bl	8001f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2105      	movs	r1, #5
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff f902 	bl	8000fec <HAL_RCC_ClockConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dee:	f000 f89d 	bl	8001f2c <Error_Handler>
  }
}
 8001df2:	bf00      	nop
 8001df4:	3750      	adds	r7, #80	; 0x50
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40007000 	.word	0x40007000

08001e04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]
 8001e22:	615a      	str	r2, [r3, #20]
 8001e24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e26:	4b32      	ldr	r3, [pc, #200]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e28:	4a32      	ldr	r2, [pc, #200]	; (8001ef4 <MX_TIM4_Init+0xf0>)
 8001e2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001e2c:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e2e:	2253      	movs	r2, #83	; 0x53
 8001e30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e3a:	2263      	movs	r2, #99	; 0x63
 8001e3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e4a:	4829      	ldr	r0, [pc, #164]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e4c:	f7ff fa6a 	bl	8001324 <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001e56:	f000 f869 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	4619      	mov	r1, r3
 8001e68:	4821      	ldr	r0, [pc, #132]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e6a:	f7ff feab 	bl	8001bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001e74:	f000 f85a 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e78:	2360      	movs	r3, #96	; 0x60
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001e90:	f7ff fb60 	bl	8001554 <HAL_TIM_PWM_ConfigChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001e9a:	f000 f847 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001ea6:	f7ff fb55 	bl	8001554 <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001eb0:	f000 f83c 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001ebc:	f7ff fb4a 	bl	8001554 <HAL_TIM_PWM_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001ec6:	f000 f831 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	220c      	movs	r2, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001ed2:	f7ff fb3f 	bl	8001554 <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001edc:	f000 f826 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <MX_TIM4_Init+0xec>)
 8001ee2:	f000 f871 	bl	8001fc8 <HAL_TIM_MspPostInit>

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	; 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000002c 	.word	0x2000002c
 8001ef4:	40000800 	.word	0x40000800

08001ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <MX_GPIO_Init+0x30>)
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <MX_GPIO_Init+0x30>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <MX_GPIO_Init+0x30>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]

}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <Error_Handler+0x6>

08001f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4a10      	ldr	r2, [pc, #64]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10d      	bne.n	8001fb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40000800 	.word	0x40000800
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_TIM_MspPostInit+0x68>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d11e      	bne.n	8002028 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_TIM_MspPostInit+0x6c>)
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_TIM_MspPostInit+0x6c>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	f043 0308 	orr.w	r3, r3, #8
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_TIM_MspPostInit+0x6c>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002006:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800200a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002018:	2302      	movs	r3, #2
 800201a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4619      	mov	r1, r3
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <HAL_TIM_MspPostInit+0x70>)
 8002024:	f7fe fbd0 	bl	80007c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40000800 	.word	0x40000800
 8002034:	40023800 	.word	0x40023800
 8002038:	40020c00 	.word	0x40020c00

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f7fe fa78 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002094:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <SystemInit+0x20>)
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <SystemInit+0x20>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ba:	490e      	ldr	r1, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020bc:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d0:	4c0b      	ldr	r4, [pc, #44]	; (8002100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020de:	f7ff ffd7 	bl	8002090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f000 f811 	bl	8002108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff fde9 	bl	8001cbc <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020ec:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80020f8:	08002198 	.word	0x08002198
  ldr r2, =_sbss
 80020fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002100:	20000074 	.word	0x20000074

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <__libc_init_array>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	4e0d      	ldr	r6, [pc, #52]	; (8002140 <__libc_init_array+0x38>)
 800210c:	4c0d      	ldr	r4, [pc, #52]	; (8002144 <__libc_init_array+0x3c>)
 800210e:	1ba4      	subs	r4, r4, r6
 8002110:	10a4      	asrs	r4, r4, #2
 8002112:	2500      	movs	r5, #0
 8002114:	42a5      	cmp	r5, r4
 8002116:	d109      	bne.n	800212c <__libc_init_array+0x24>
 8002118:	4e0b      	ldr	r6, [pc, #44]	; (8002148 <__libc_init_array+0x40>)
 800211a:	4c0c      	ldr	r4, [pc, #48]	; (800214c <__libc_init_array+0x44>)
 800211c:	f000 f820 	bl	8002160 <_init>
 8002120:	1ba4      	subs	r4, r4, r6
 8002122:	10a4      	asrs	r4, r4, #2
 8002124:	2500      	movs	r5, #0
 8002126:	42a5      	cmp	r5, r4
 8002128:	d105      	bne.n	8002136 <__libc_init_array+0x2e>
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002130:	4798      	blx	r3
 8002132:	3501      	adds	r5, #1
 8002134:	e7ee      	b.n	8002114 <__libc_init_array+0xc>
 8002136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800213a:	4798      	blx	r3
 800213c:	3501      	adds	r5, #1
 800213e:	e7f2      	b.n	8002126 <__libc_init_array+0x1e>
 8002140:	08002190 	.word	0x08002190
 8002144:	08002190 	.word	0x08002190
 8002148:	08002190 	.word	0x08002190
 800214c:	08002194 	.word	0x08002194

08002150 <memset>:
 8002150:	4402      	add	r2, r0
 8002152:	4603      	mov	r3, r0
 8002154:	4293      	cmp	r3, r2
 8002156:	d100      	bne.n	800215a <memset+0xa>
 8002158:	4770      	bx	lr
 800215a:	f803 1b01 	strb.w	r1, [r3], #1
 800215e:	e7f9      	b.n	8002154 <memset+0x4>

08002160 <_init>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	bf00      	nop
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr

0800216c <_fini>:
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	bf00      	nop
 8002170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002172:	bc08      	pop	{r3}
 8002174:	469e      	mov	lr, r3
 8002176:	4770      	bx	lr
