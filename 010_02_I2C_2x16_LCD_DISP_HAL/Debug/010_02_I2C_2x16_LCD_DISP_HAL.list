
010_02_I2C_2x16_LCD_DISP_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002354  08002354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800235c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000078  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000084  20000084  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00006a5e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000010a4  00000000  00000000  00026a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006b0  00000000  00000000  00027b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000640  00000000  00000000  000281f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003439  00000000  00000000  00028830  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023d9  00000000  00000000  0002bc69  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002e042  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b04  00000000  00000000  0002e0c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800231c 	.word	0x0800231c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800231c 	.word	0x0800231c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f90b 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f001 fe04 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f915 	bl	800076a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f8eb 	bl	8000732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	db0a      	blt.n	800064a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	490d      	ldr	r1, [pc, #52]	; (800066c <__NVIC_SetPriority+0x4c>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	0112      	lsls	r2, r2, #4
 8000640:	b2d2      	uxtb	r2, r2
 8000642:	440b      	add	r3, r1
 8000644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000648:	e00a      	b.n	8000660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <__NVIC_SetPriority+0x50>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	3b04      	subs	r3, #4
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	0112      	lsls	r2, r2, #4
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	440b      	add	r3, r1
 800065e:	761a      	strb	r2, [r3, #24]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000674:	b480      	push	{r7}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	f1c3 0307 	rsb	r3, r3, #7
 800068e:	2b04      	cmp	r3, #4
 8000690:	bf28      	it	cs
 8000692:	2304      	movcs	r3, #4
 8000694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3304      	adds	r3, #4
 800069a:	2b06      	cmp	r3, #6
 800069c:	d902      	bls.n	80006a4 <NVIC_EncodePriority+0x30>
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	e000      	b.n	80006a6 <NVIC_EncodePriority+0x32>
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	2201      	movs	r2, #1
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	401a      	ands	r2, r3
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	2101      	movs	r1, #1
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	1e59      	subs	r1, r3, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4313      	orrs	r3, r2
         );
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e8:	d301      	bcc.n	80006ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00f      	b.n	800070e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <SysTick_Config+0x40>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f6:	210f      	movs	r1, #15
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f7ff ff90 	bl	8000620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SysTick_Config+0x40>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <SysTick_Config+0x40>)
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff49 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff5e 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ff90 	bl	8000674 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff5f 	bl	8000620 <__NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffb0 	bl	80006d8 <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
 800079e:	e16b      	b.n	8000a78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007a0:	2201      	movs	r2, #1
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f040 815a 	bne.w	8000a72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f003 0303 	and.w	r3, r3, #3
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d005      	beq.n	80007d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d130      	bne.n	8000838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	2203      	movs	r2, #3
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	4013      	ands	r3, r2
 80007ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	68da      	ldr	r2, [r3, #12]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	69ba      	ldr	r2, [r7, #24]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800080c:	2201      	movs	r2, #1
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	4013      	ands	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	091b      	lsrs	r3, r3, #4
 8000822:	f003 0201 	and.w	r2, r3, #1
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4313      	orrs	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	2b03      	cmp	r3, #3
 8000842:	d017      	beq.n	8000874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	2203      	movs	r2, #3
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	4013      	ands	r3, r2
 800085a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4313      	orrs	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	f003 0303 	and.w	r3, r3, #3
 800087c:	2b02      	cmp	r3, #2
 800087e:	d123      	bne.n	80008c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	08da      	lsrs	r2, r3, #3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3208      	adds	r2, #8
 8000888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	220f      	movs	r2, #15
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	691a      	ldr	r2, [r3, #16]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	08da      	lsrs	r2, r3, #3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3208      	adds	r2, #8
 80008c2:	69b9      	ldr	r1, [r7, #24]
 80008c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0203 	and.w	r2, r3, #3
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000904:	2b00      	cmp	r3, #0
 8000906:	f000 80b4 	beq.w	8000a72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <HAL_GPIO_Init+0x308>)
 8000910:	4b5e      	ldr	r3, [pc, #376]	; (8000a8c <HAL_GPIO_Init+0x308>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b5c      	ldr	r3, [pc, #368]	; (8000a8c <HAL_GPIO_Init+0x308>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000926:	4a5a      	ldr	r2, [pc, #360]	; (8000a90 <HAL_GPIO_Init+0x30c>)
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	3302      	adds	r3, #2
 800092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	220f      	movs	r2, #15
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4013      	ands	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a51      	ldr	r2, [pc, #324]	; (8000a94 <HAL_GPIO_Init+0x310>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d02b      	beq.n	80009aa <HAL_GPIO_Init+0x226>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a50      	ldr	r2, [pc, #320]	; (8000a98 <HAL_GPIO_Init+0x314>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d025      	beq.n	80009a6 <HAL_GPIO_Init+0x222>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4f      	ldr	r2, [pc, #316]	; (8000a9c <HAL_GPIO_Init+0x318>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d01f      	beq.n	80009a2 <HAL_GPIO_Init+0x21e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4e      	ldr	r2, [pc, #312]	; (8000aa0 <HAL_GPIO_Init+0x31c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d019      	beq.n	800099e <HAL_GPIO_Init+0x21a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4d      	ldr	r2, [pc, #308]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x216>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4c      	ldr	r2, [pc, #304]	; (8000aa8 <HAL_GPIO_Init+0x324>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x212>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4b      	ldr	r2, [pc, #300]	; (8000aac <HAL_GPIO_Init+0x328>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x20e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4a      	ldr	r2, [pc, #296]	; (8000ab0 <HAL_GPIO_Init+0x32c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x20a>
 800098a:	2307      	movs	r3, #7
 800098c:	e00e      	b.n	80009ac <HAL_GPIO_Init+0x228>
 800098e:	2308      	movs	r3, #8
 8000990:	e00c      	b.n	80009ac <HAL_GPIO_Init+0x228>
 8000992:	2306      	movs	r3, #6
 8000994:	e00a      	b.n	80009ac <HAL_GPIO_Init+0x228>
 8000996:	2305      	movs	r3, #5
 8000998:	e008      	b.n	80009ac <HAL_GPIO_Init+0x228>
 800099a:	2304      	movs	r3, #4
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x228>
 800099e:	2303      	movs	r3, #3
 80009a0:	e004      	b.n	80009ac <HAL_GPIO_Init+0x228>
 80009a2:	2302      	movs	r3, #2
 80009a4:	e002      	b.n	80009ac <HAL_GPIO_Init+0x228>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_Init+0x228>
 80009aa:	2300      	movs	r3, #0
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	f002 0203 	and.w	r2, r2, #3
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	4093      	lsls	r3, r2
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009bc:	4934      	ldr	r1, [pc, #208]	; (8000a90 <HAL_GPIO_Init+0x30c>)
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009ee:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a18:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a6c:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	f67f ae90 	bls.w	80007a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a80:	bf00      	nop
 8000a82:	3724      	adds	r7, #36	; 0x24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40021400 	.word	0x40021400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021c00 	.word	0x40021c00
 8000ab4:	40013c00 	.word	0x40013c00

08000ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ac8:	787b      	ldrb	r3, [r7, #1]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ad4:	e003      	b.n	8000ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	041a      	lsls	r2, r3, #16
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	619a      	str	r2, [r3, #24]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b085      	sub	sp, #20
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000afc:	887a      	ldrh	r2, [r7, #2]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4013      	ands	r3, r2
 8000b02:	041a      	lsls	r2, r3, #16
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43d9      	mvns	r1, r3
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	619a      	str	r2, [r3, #24]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e11f      	b.n	8000d72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d106      	bne.n	8000b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f001 fb0e 	bl	8002168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2224      	movs	r2, #36	; 0x24
 8000b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	6812      	ldr	r2, [r2, #0]
 8000b5e:	f022 0201 	bic.w	r2, r2, #1
 8000b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b84:	f001 f97c 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 8000b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	4a7b      	ldr	r2, [pc, #492]	; (8000d7c <HAL_I2C_Init+0x25c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d807      	bhi.n	8000ba4 <HAL_I2C_Init+0x84>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4a7a      	ldr	r2, [pc, #488]	; (8000d80 <HAL_I2C_Init+0x260>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	bf94      	ite	ls
 8000b9c:	2301      	movls	r3, #1
 8000b9e:	2300      	movhi	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	e006      	b.n	8000bb2 <HAL_I2C_Init+0x92>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4a77      	ldr	r2, [pc, #476]	; (8000d84 <HAL_I2C_Init+0x264>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	bf94      	ite	ls
 8000bac:	2301      	movls	r3, #1
 8000bae:	2300      	movhi	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0db      	b.n	8000d72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4a72      	ldr	r2, [pc, #456]	; (8000d88 <HAL_I2C_Init+0x268>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	0c9b      	lsrs	r3, r3, #18
 8000bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	6852      	ldr	r2, [r2, #4]
 8000bd0:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4863      	ldr	r0, [pc, #396]	; (8000d7c <HAL_I2C_Init+0x25c>)
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	d802      	bhi.n	8000bf8 <HAL_I2C_Init+0xd8>
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	e009      	b.n	8000c0c <HAL_I2C_Init+0xec>
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bfe:	fb00 f303 	mul.w	r3, r0, r3
 8000c02:	4862      	ldr	r0, [pc, #392]	; (8000d8c <HAL_I2C_Init+0x26c>)
 8000c04:	fba0 0303 	umull	r0, r3, r0, r3
 8000c08:	099b      	lsrs	r3, r3, #6
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4955      	ldr	r1, [pc, #340]	; (8000d7c <HAL_I2C_Init+0x25c>)
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	d80d      	bhi.n	8000c48 <HAL_I2C_Init+0x128>
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	1e59      	subs	r1, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	bf38      	it	cc
 8000c44:	2304      	movcc	r3, #4
 8000c46:	e04f      	b.n	8000ce8 <HAL_I2C_Init+0x1c8>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d111      	bne.n	8000c74 <HAL_I2C_Init+0x154>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	1e5c      	subs	r4, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6859      	ldr	r1, [r3, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	440b      	add	r3, r1
 8000c5e:	fbb4 f3f3 	udiv	r3, r4, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	e012      	b.n	8000c9a <HAL_I2C_Init+0x17a>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	1e5c      	subs	r4, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6859      	ldr	r1, [r3, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	0099      	lsls	r1, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	fbb4 f3f3 	udiv	r3, r4, r3
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_I2C_Init+0x182>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e022      	b.n	8000ce8 <HAL_I2C_Init+0x1c8>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10e      	bne.n	8000cc8 <HAL_I2C_Init+0x1a8>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	1e5c      	subs	r4, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6859      	ldr	r1, [r3, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	fbb4 f3f3 	udiv	r3, r4, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc6:	e00f      	b.n	8000ce8 <HAL_I2C_Init+0x1c8>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	1e5c      	subs	r4, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6859      	ldr	r1, [r3, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	0099      	lsls	r1, r3, #2
 8000cd8:	440b      	add	r3, r1
 8000cda:	fbb4 f3f3 	udiv	r3, r4, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	6812      	ldr	r2, [r2, #0]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	69d0      	ldr	r0, [r2, #28]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6a12      	ldr	r2, [r2, #32]
 8000d02:	4302      	orrs	r2, r0
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	6908      	ldr	r0, [r1, #16]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	68c9      	ldr	r1, [r1, #12]
 8000d22:	4301      	orrs	r1, r0
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	68d2      	ldr	r2, [r2, #12]
 8000d32:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6950      	ldr	r0, [r2, #20]
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6992      	ldr	r2, [r2, #24]
 8000d3e:	4302      	orrs	r2, r0
 8000d40:	430a      	orrs	r2, r1
 8000d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6812      	ldr	r2, [r2, #0]
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd90      	pop	{r4, r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	000186a0 	.word	0x000186a0
 8000d80:	001e847f 	.word	0x001e847f
 8000d84:	003d08ff 	.word	0x003d08ff
 8000d88:	431bde83 	.word	0x431bde83
 8000d8c:	10624dd3 	.word	0x10624dd3

08000d90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	817b      	strh	r3, [r7, #10]
 8000da0:	4613      	mov	r3, r2
 8000da2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fbfe 	bl	80005a4 <HAL_GetTick>
 8000da8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b20      	cmp	r3, #32
 8000db4:	f040 80e0 	bne.w	8000f78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2319      	movs	r3, #25
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4970      	ldr	r1, [pc, #448]	; (8000f84 <HAL_I2C_Master_Transmit+0x1f4>)
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f000 fa92 	bl	80012ec <I2C_WaitOnFlagUntilTimeout>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e0d3      	b.n	8000f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d101      	bne.n	8000de0 <HAL_I2C_Master_Transmit+0x50>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e0cc      	b.n	8000f7a <HAL_I2C_Master_Transmit+0x1ea>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d007      	beq.n	8000e06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	f042 0201 	orr.w	r2, r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	6812      	ldr	r2, [r2, #0]
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2221      	movs	r2, #33	; 0x21
 8000e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2210      	movs	r2, #16
 8000e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	893a      	ldrh	r2, [r7, #8]
 8000e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4a50      	ldr	r2, [pc, #320]	; (8000f88 <HAL_I2C_Master_Transmit+0x1f8>)
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e48:	8979      	ldrh	r1, [r7, #10]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	6a3a      	ldr	r2, [r7, #32]
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f9ca 	bl	80011e8 <I2C_MasterRequestWrite>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e08d      	b.n	8000f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e74:	e066      	b.n	8000f44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	6a39      	ldr	r1, [r7, #32]
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f000 fb0c 	bl	8001498 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00d      	beq.n	8000ea2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	d107      	bne.n	8000e9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e06b      	b.n	8000f7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000eaa:	7812      	ldrb	r2, [r2, #0]
 8000eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d11b      	bne.n	8000f18 <HAL_I2C_Master_Transmit+0x188>
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d017      	beq.n	8000f18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	6a39      	ldr	r1, [r7, #32]
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 fafc 	bl	800151a <I2C_WaitOnBTFFlagUntilTimeout>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d00d      	beq.n	8000f44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d107      	bne.n	8000f40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e01a      	b.n	8000f7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d194      	bne.n	8000e76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	6812      	ldr	r2, [r2, #0]
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2220      	movs	r2, #32
 8000f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e000      	b.n	8000f7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f78:	2302      	movs	r3, #2
  }
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	00100002 	.word	0x00100002
 8000f88:	ffff0000 	.word	0xffff0000

08000f8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff fb02 	bl	80005a4 <HAL_GetTick>
 8000fa0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b20      	cmp	r3, #32
 8000fb0:	f040 8110 	bne.w	80011d4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2319      	movs	r3, #25
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4988      	ldr	r1, [pc, #544]	; (80011e0 <HAL_I2C_IsDeviceReady+0x254>)
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f994 	bl	80012ec <I2C_WaitOnFlagUntilTimeout>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e103      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <HAL_I2C_IsDeviceReady+0x50>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e0fc      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x24a>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d007      	beq.n	8001002 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	f042 0201 	orr.w	r2, r2, #1
 8001000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2224      	movs	r2, #36	; 0x24
 8001016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4a70      	ldr	r2, [pc, #448]	; (80011e4 <HAL_I2C_IsDeviceReady+0x258>)
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001034:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f952 	bl	80012ec <I2C_WaitOnFlagUntilTimeout>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00d      	beq.n	800106a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800105c:	d103      	bne.n	8001066 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e0b5      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	897a      	ldrh	r2, [r7, #10]
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001076:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001078:	f7ff fa94 	bl	80005a4 <HAL_GetTick>
 800107c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b02      	cmp	r3, #2
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80010ac:	e025      	b.n	80010fa <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010ae:	f7ff fa79 	bl	80005a4 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	1ad2      	subs	r2, r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d802      	bhi.n	80010c4 <HAL_I2C_IsDeviceReady+0x138>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	22a0      	movs	r2, #160	; 0xa0
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f0:	bf0c      	ite	eq
 80010f2:	2301      	moveq	r3, #1
 80010f4:	2300      	movne	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2ba0      	cmp	r3, #160	; 0xa0
 8001104:	d005      	beq.n	8001112 <HAL_I2C_IsDeviceReady+0x186>
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <HAL_I2C_IsDeviceReady+0x186>
 800110c:	7dbb      	ldrb	r3, [r7, #22]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0cd      	beq.n	80010ae <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2220      	movs	r2, #32
 8001116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b02      	cmp	r3, #2
 8001126:	d129      	bne.n	800117c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	6812      	ldr	r2, [r2, #0]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001136:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2319      	movs	r3, #25
 8001154:	2201      	movs	r2, #1
 8001156:	4922      	ldr	r1, [pc, #136]	; (80011e0 <HAL_I2C_IsDeviceReady+0x254>)
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 f8c7 	bl	80012ec <I2C_WaitOnFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e036      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2220      	movs	r2, #32
 800116c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	e02c      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800118a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001194:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2319      	movs	r3, #25
 800119c:	2201      	movs	r2, #1
 800119e:	4910      	ldr	r1, [pc, #64]	; (80011e0 <HAL_I2C_IsDeviceReady+0x254>)
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f8a3 	bl	80012ec <I2C_WaitOnFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e012      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	f4ff af33 	bcc.w	8001026 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2220      	movs	r2, #32
 80011c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80011d4:	2302      	movs	r3, #2
  }
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	00100002 	.word	0x00100002
 80011e4:	ffff0000 	.word	0xffff0000

080011e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	460b      	mov	r3, r1
 80011f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d006      	beq.n	8001212 <I2C_MasterRequestWrite+0x2a>
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d003      	beq.n	8001212 <I2C_MasterRequestWrite+0x2a>
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001210:	d108      	bne.n	8001224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e00b      	b.n	800123c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	2b12      	cmp	r3, #18
 800122a:	d107      	bne.n	800123c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800123a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 f84f 	bl	80012ec <I2C_WaitOnFlagUntilTimeout>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00d      	beq.n	8001270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001262:	d103      	bne.n	800126c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e034      	b.n	80012da <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001278:	d107      	bne.n	800128a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	897a      	ldrh	r2, [r7, #10]
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	e01b      	b.n	80012c2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	897a      	ldrh	r2, [r7, #10]
 8001290:	11d2      	asrs	r2, r2, #7
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	f002 0206 	and.w	r2, r2, #6
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	f062 020f 	orn	r2, r2, #15
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	490f      	ldr	r1, [pc, #60]	; (80012e4 <I2C_MasterRequestWrite+0xfc>)
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f876 	bl	800139a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e010      	b.n	80012da <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	897a      	ldrh	r2, [r7, #10]
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <I2C_MasterRequestWrite+0x100>)
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f866 	bl	800139a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	00010008 	.word	0x00010008
 80012e8:	00010002 	.word	0x00010002

080012ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4613      	mov	r3, r2
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012fc:	e025      	b.n	800134a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	d021      	beq.n	800134a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001306:	f7ff f94d 	bl	80005a4 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d802      	bhi.n	800131c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d116      	bne.n	800134a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2220      	movs	r2, #32
 8001326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f043 0220 	orr.w	r2, r3, #32
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e023      	b.n	8001392 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10d      	bne.n	8001370 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4013      	ands	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	e00c      	b.n	800138a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4013      	ands	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	bf0c      	ite	eq
 8001382:	2301      	moveq	r3, #1
 8001384:	2300      	movne	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	429a      	cmp	r2, r3
 800138e:	d0b6      	beq.n	80012fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013a8:	e051      	b.n	800144e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b8:	d123      	bne.n	8001402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2220      	movs	r2, #32
 80013de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f043 0204 	orr.w	r2, r3, #4
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e046      	b.n	8001490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d021      	beq.n	800144e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800140a:	f7ff f8cb 	bl	80005a4 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	1ad2      	subs	r2, r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d802      	bhi.n	8001420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d116      	bne.n	800144e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2220      	movs	r2, #32
 800142a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f043 0220 	orr.w	r2, r3, #32
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e020      	b.n	8001490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d10c      	bne.n	8001472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4013      	ands	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	bf14      	ite	ne
 800146a:	2301      	movne	r3, #1
 800146c:	2300      	moveq	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	e00b      	b.n	800148a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	43da      	mvns	r2, r3
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	4013      	ands	r3, r2
 800147e:	b29b      	uxth	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d18d      	bne.n	80013aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014a4:	e02d      	b.n	8001502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f878 	bl	800159c <I2C_IsAcknowledgeFailed>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e02d      	b.n	8001512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d021      	beq.n	8001502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014be:	f7ff f871 	bl	80005a4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	1ad2      	subs	r2, r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d802      	bhi.n	80014d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d116      	bne.n	8001502 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2220      	movs	r2, #32
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f043 0220 	orr.w	r2, r3, #32
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e007      	b.n	8001512 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150c:	2b80      	cmp	r3, #128	; 0x80
 800150e:	d1ca      	bne.n	80014a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001526:	e02d      	b.n	8001584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f837 	bl	800159c <I2C_IsAcknowledgeFailed>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e02d      	b.n	8001594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153e:	d021      	beq.n	8001584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001540:	f7ff f830 	bl	80005a4 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	1ad2      	subs	r2, r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	429a      	cmp	r2, r3
 800154e:	d802      	bhi.n	8001556 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d116      	bne.n	8001584 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e007      	b.n	8001594 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b04      	cmp	r3, #4
 8001590:	d1ca      	bne.n	8001528 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d11b      	bne.n	80015ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2220      	movs	r2, #32
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f043 0204 	orr.w	r2, r3, #4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e264      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d075      	beq.n	8001706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800161a:	4ba3      	ldr	r3, [pc, #652]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b04      	cmp	r3, #4
 8001624:	d00c      	beq.n	8001640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4ba0      	ldr	r3, [pc, #640]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162e:	2b08      	cmp	r3, #8
 8001630:	d112      	bne.n	8001658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001632:	4b9d      	ldr	r3, [pc, #628]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163e:	d10b      	bne.n	8001658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	4b99      	ldr	r3, [pc, #612]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d05b      	beq.n	8001704 <HAL_RCC_OscConfig+0x108>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d157      	bne.n	8001704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e23f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001660:	d106      	bne.n	8001670 <HAL_RCC_OscConfig+0x74>
 8001662:	4a91      	ldr	r2, [pc, #580]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	4b90      	ldr	r3, [pc, #576]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e01d      	b.n	80016ac <HAL_RCC_OscConfig+0xb0>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x98>
 800167a:	4a8b      	ldr	r2, [pc, #556]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	4b8a      	ldr	r3, [pc, #552]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4a88      	ldr	r2, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	4b87      	ldr	r3, [pc, #540]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0xb0>
 8001694:	4a84      	ldr	r2, [pc, #528]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001696:	4b84      	ldr	r3, [pc, #528]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4a81      	ldr	r2, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	4b81      	ldr	r3, [pc, #516]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7fe ff76 	bl	80005a4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016bc:	f7fe ff72 	bl	80005a4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e204      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xc0>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7fe ff62 	bl	80005a4 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e4:	f7fe ff5e 	bl	80005a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1f0      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0xe8>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d063      	beq.n	80017da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171e:	4b62      	ldr	r3, [pc, #392]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001726:	2b08      	cmp	r3, #8
 8001728:	d11c      	bne.n	8001764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172a:	4b5f      	ldr	r3, [pc, #380]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d116      	bne.n	8001764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001736:	4b5c      	ldr	r3, [pc, #368]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x152>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d001      	beq.n	800174e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e1c4      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174e:	4956      	ldr	r1, [pc, #344]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	4b55      	ldr	r3, [pc, #340]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	e03a      	b.n	80017da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176c:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_RCC_OscConfig+0x2b0>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7fe ff17 	bl	80005a4 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177a:	f7fe ff13 	bl	80005a4 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e1a5      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4943      	ldr	r1, [pc, #268]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800179a:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <HAL_RCC_OscConfig+0x2b0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7fe fef6 	bl	80005a4 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017bc:	f7fe fef2 	bl	80005a4 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e184      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d030      	beq.n	8001848 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d016      	beq.n	800181c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x2b4>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7fe fed6 	bl	80005a4 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017fc:	f7fe fed2 	bl	80005a4 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e164      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x200>
 800181a:	e015      	b.n	8001848 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_RCC_OscConfig+0x2b4>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7fe febf 	bl	80005a4 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182a:	f7fe febb 	bl	80005a4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e14d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a0 	beq.w	8001996 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_RCC_OscConfig+0x2b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d121      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_RCC_OscConfig+0x2b8>)
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_RCC_OscConfig+0x2b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7fe fe81 	bl	80005a4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e011      	b.n	80018ca <HAL_RCC_OscConfig+0x2ce>
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	42470000 	.word	0x42470000
 80018b0:	42470e80 	.word	0x42470e80
 80018b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b8:	f7fe fe74 	bl	80005a4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e106      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b85      	ldr	r3, [pc, #532]	; (8001ae0 <HAL_RCC_OscConfig+0x4e4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x2f0>
 80018de:	4a81      	ldr	r2, [pc, #516]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018e0:	4b80      	ldr	r3, [pc, #512]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	e01c      	b.n	8001926 <HAL_RCC_OscConfig+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x312>
 80018f4:	4a7b      	ldr	r2, [pc, #492]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018f6:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	4a78      	ldr	r2, [pc, #480]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	e00b      	b.n	8001926 <HAL_RCC_OscConfig+0x32a>
 800190e:	4a75      	ldr	r2, [pc, #468]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001910:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
 800191a:	4a72      	ldr	r2, [pc, #456]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800191c:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	f023 0304 	bic.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d015      	beq.n	800195a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7fe fe39 	bl	80005a4 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7fe fe35 	bl	80005a4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0c5      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ee      	beq.n	8001936 <HAL_RCC_OscConfig+0x33a>
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195a:	f7fe fe23 	bl	80005a4 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7fe fe1f 	bl	80005a4 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0af      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1ee      	bne.n	8001962 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800198c:	4b55      	ldr	r3, [pc, #340]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 809b 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d05c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d141      	bne.n	8001a38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_RCC_OscConfig+0x4ec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7fe fdf3 	bl	80005a4 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7fe fdef 	bl	80005a4 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e081      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019e0:	4940      	ldr	r1, [pc, #256]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	019b      	lsls	r3, r3, #6
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	3b01      	subs	r3, #1
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	4313      	orrs	r3, r2
 8001a08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_OscConfig+0x4ec>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe fdc8 	bl	80005a4 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a18:	f7fe fdc4 	bl	80005a4 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e056      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x41c>
 8001a36:	e04e      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <HAL_RCC_OscConfig+0x4ec>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7fe fdb1 	bl	80005a4 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7fe fdad 	bl	80005a4 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e03f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x44a>
 8001a64:	e037      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e032      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_RCC_OscConfig+0x4e8>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d028      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d121      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d11a      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aa8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d111      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	42470060 	.word	0x42470060

08001aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0cc      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b68      	ldr	r3, [pc, #416]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0207 	and.w	r2, r3, #7
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d20c      	bcs.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b65      	ldr	r3, [pc, #404]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0207 	and.w	r2, r3, #7
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b8      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b40:	4a59      	ldr	r2, [pc, #356]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4b59      	ldr	r3, [pc, #356]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b58:	4a53      	ldr	r2, [pc, #332]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4950      	ldr	r1, [pc, #320]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d044      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d119      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e07f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e067      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	4b36      	ldr	r3, [pc, #216]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 0203 	bic.w	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bdc:	f7fe fce2 	bl	80005a4 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7fe fcde 	bl	80005a4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e04f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 020c 	and.w	r2, r3, #12
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1eb      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0207 	and.w	r2, r3, #7
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d90c      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0207 	and.w	r2, r3, #7
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e032      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4919      	ldr	r1, [pc, #100]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4b19      	ldr	r3, [pc, #100]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5e:	4912      	ldr	r1, [pc, #72]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c72:	f000 f821 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c76:	4601      	mov	r1, r0
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	fa21 f303 	lsr.w	r3, r1, r3
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc42 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	08002334 	.word	0x08002334
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cbc:	b08f      	sub	sp, #60	; 0x3c
 8001cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d007      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x34>
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 80b2 	bne.w	8001e4a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001cea:	e0b1      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cec:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cf0:	e0ae      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf2:	4b5a      	ldr	r3, [pc, #360]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfc:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d04e      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d08:	4b54      	ldr	r3, [pc, #336]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	f04f 0400 	mov.w	r4, #0
 8001d12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	ea01 0103 	and.w	r1, r1, r3
 8001d1e:	ea02 0204 	and.w	r2, r2, r4
 8001d22:	460b      	mov	r3, r1
 8001d24:	4614      	mov	r4, r2
 8001d26:	0160      	lsls	r0, r4, #5
 8001d28:	6278      	str	r0, [r7, #36]	; 0x24
 8001d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d2c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24
 8001d32:	015b      	lsls	r3, r3, #5
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d3a:	1a5b      	subs	r3, r3, r1
 8001d3c:	eb64 0402 	sbc.w	r4, r4, r2
 8001d40:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001d44:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001d48:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001d4c:	ebb8 0803 	subs.w	r8, r8, r3
 8001d50:	eb69 0904 	sbc.w	r9, r9, r4
 8001d54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d6c:	eb18 0801 	adds.w	r8, r8, r1
 8001d70:	eb49 0902 	adc.w	r9, r9, r2
 8001d74:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d8c:	4640      	mov	r0, r8
 8001d8e:	4649      	mov	r1, r9
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	f04f 0400 	mov.w	r4, #0
 8001d96:	461a      	mov	r2, r3
 8001d98:	4623      	mov	r3, r4
 8001d9a:	f7fe fa15 	bl	80001c8 <__aeabi_uldivmod>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460c      	mov	r4, r1
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
 8001da4:	e043      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	f04f 0400 	mov.w	r4, #0
 8001db0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	ea01 0103 	and.w	r1, r1, r3
 8001dbc:	ea02 0204 	and.w	r2, r2, r4
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	0160      	lsls	r0, r4, #5
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	015b      	lsls	r3, r3, #5
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001dd8:	1a5b      	subs	r3, r3, r1
 8001dda:	eb64 0402 	sbc.w	r4, r4, r2
 8001dde:	01a6      	lsls	r6, r4, #6
 8001de0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001de4:	019d      	lsls	r5, r3, #6
 8001de6:	1aed      	subs	r5, r5, r3
 8001de8:	eb66 0604 	sbc.w	r6, r6, r4
 8001dec:	00f3      	lsls	r3, r6, #3
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	00eb      	lsls	r3, r5, #3
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001e00:	186d      	adds	r5, r5, r1
 8001e02:	eb46 0602 	adc.w	r6, r6, r2
 8001e06:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001e0a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001e0e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001e12:	4655      	mov	r5, sl
 8001e14:	465e      	mov	r6, fp
 8001e16:	4628      	mov	r0, r5
 8001e18:	4631      	mov	r1, r6
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	f04f 0400 	mov.w	r4, #0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	f7fe f9d0 	bl	80001c8 <__aeabi_uldivmod>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e48:	e002      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	373c      	adds	r7, #60	; 0x3c
 8001e56:	46bd      	mov	sp, r7
 8001e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	00f42400 	.word	0x00f42400
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e84:	f7ff fff0 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e88:	4601      	mov	r1, r0
 8001e8a:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	4a03      	ldr	r2, [pc, #12]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	08002344 	.word	0x08002344

08001ea8 <findSlaveDeviceAdres>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t adres;


void findSlaveDeviceAdres(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0

	for(int i=0;i<=255;i++){
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	e016      	b.n	8001ee2 <findSlaveDeviceAdres+0x3a>
		if ( HAL_I2C_IsDeviceReady(&hi2c1,i,1,100)==HAL_OK ){
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	2364      	movs	r3, #100	; 0x64
 8001eba:	2201      	movs	r2, #1
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <findSlaveDeviceAdres+0x48>)
 8001ebe:	f7ff f865 	bl	8000f8c <HAL_I2C_IsDeviceReady>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <findSlaveDeviceAdres+0x34>
			HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);
 8001ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ecc:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <findSlaveDeviceAdres+0x4c>)
 8001ece:	f7fe fe0c 	bl	8000aea <HAL_GPIO_TogglePin>
			adres=i;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <findSlaveDeviceAdres+0x50>)
 8001ed8:	701a      	strb	r2, [r3, #0]
			break;
 8001eda:	e005      	b.n	8001ee8 <findSlaveDeviceAdres+0x40>
	for(int i=0;i<=255;i++){
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2bff      	cmp	r3, #255	; 0xff
 8001ee6:	dde5      	ble.n	8001eb4 <findSlaveDeviceAdres+0xc>
		}
	}

}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000002c 	.word	0x2000002c
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	20000080 	.word	0x20000080

08001efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f02:	f7fe fae9 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f06:	f000 f819 	bl	8001f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f0a:	f000 f8af 	bl	800206c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f0e:	f000 f87f 	bl	8002010 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  findSlaveDeviceAdres();
 8001f12:	f7ff ffc9 	bl	8001ea8 <findSlaveDeviceAdres>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t data=0x10;
 8001f16:	2310      	movs	r3, #16
 8001f18:	71fb      	strb	r3, [r7, #7]
	  HAL_I2C_Master_Transmit(&hi2c1,adres,data,1,100);
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <main+0x38>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	461a      	mov	r2, r3
 8001f24:	2364      	movs	r3, #100	; 0x64
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	4803      	ldr	r0, [pc, #12]	; (8001f38 <main+0x3c>)
 8001f2c:	f7fe ff30 	bl	8000d90 <HAL_I2C_Master_Transmit>
  {
 8001f30:	e7f1      	b.n	8001f16 <main+0x1a>
 8001f32:	bf00      	nop
 8001f34:	20000080 	.word	0x20000080
 8001f38:	2000002c 	.word	0x2000002c

08001f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b094      	sub	sp, #80	; 0x50
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	2230      	movs	r2, #48	; 0x30
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f9de 	bl	800230c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	4a28      	ldr	r2, [pc, #160]	; (8002008 <SystemClock_Config+0xcc>)
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <SystemClock_Config+0xcc>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <SystemClock_Config+0xcc>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	4a22      	ldr	r2, [pc, #136]	; (800200c <SystemClock_Config+0xd0>)
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <SystemClock_Config+0xd0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <SystemClock_Config+0xd0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fac:	2304      	movs	r3, #4
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001fb0:	23a8      	movs	r3, #168	; 0xa8
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbc:	f107 0320 	add.w	r3, r7, #32
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fb1b 	bl	80015fc <HAL_RCC_OscConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fcc:	f000 f8a0 	bl	8002110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	2105      	movs	r1, #5
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd7c 	bl	8001aec <HAL_RCC_ClockConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ffa:	f000 f889 	bl	8002110 <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	3750      	adds	r7, #80	; 0x50
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000

08002010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <MX_I2C1_Init+0x50>)
 8002016:	4a13      	ldr	r2, [pc, #76]	; (8002064 <MX_I2C1_Init+0x54>)
 8002018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MX_I2C1_Init+0x50>)
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <MX_I2C1_Init+0x58>)
 800201e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MX_I2C1_Init+0x50>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_I2C1_Init+0x50>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MX_I2C1_Init+0x50>)
 800202e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <MX_I2C1_Init+0x50>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <MX_I2C1_Init+0x50>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002040:	4b07      	ldr	r3, [pc, #28]	; (8002060 <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800204c:	4804      	ldr	r0, [pc, #16]	; (8002060 <MX_I2C1_Init+0x50>)
 800204e:	f7fe fd67 	bl	8000b20 <HAL_I2C_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002058:	f000 f85a 	bl	8002110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000002c 	.word	0x2000002c
 8002064:	40005400 	.word	0x40005400
 8002068:	00061a80 	.word	0x00061a80

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4a20      	ldr	r2, [pc, #128]	; (8002108 <MX_GPIO_Init+0x9c>)
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <MX_GPIO_Init+0x9c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_GPIO_Init+0x9c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	4a19      	ldr	r2, [pc, #100]	; (8002108 <MX_GPIO_Init+0x9c>)
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_GPIO_Init+0x9c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_GPIO_Init+0x9c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <MX_GPIO_Init+0x9c>)
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_GPIO_Init+0x9c>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_GPIO_Init+0x9c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <MX_GPIO_Init+0xa0>)
 80020de:	f7fe fceb 	bl	8000ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	4619      	mov	r1, r3
 80020fa:	4804      	ldr	r0, [pc, #16]	; (800210c <MX_GPIO_Init+0xa0>)
 80020fc:	f7fe fb42 	bl	8000784 <HAL_GPIO_Init>

}
 8002100:	bf00      	nop
 8002102:	3720      	adds	r7, #32
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	40020c00 	.word	0x40020c00

08002110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002116:	e7fe      	b.n	8002116 <Error_Handler+0x6>

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_MspInit+0x4c>)
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_MspInit+0x4c>)
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4a09      	ldr	r2, [pc, #36]	; (8002164 <HAL_MspInit+0x4c>)
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_MspInit+0x4c>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_I2C_MspInit+0x84>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d12b      	bne.n	80021e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4a18      	ldr	r2, [pc, #96]	; (80021f0 <HAL_I2C_MspInit+0x88>)
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_I2C_MspInit+0x88>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_I2C_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a6:	23c0      	movs	r3, #192	; 0xc0
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021aa:	2312      	movs	r3, #18
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021b6:	2304      	movs	r3, #4
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <HAL_I2C_MspInit+0x8c>)
 80021c2:	f7fe fadf 	bl	8000784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_I2C_MspInit+0x88>)
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_I2C_MspInit+0x88>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_I2C_MspInit+0x88>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40005400 	.word	0x40005400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020400 	.word	0x40020400

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <NMI_Handler+0x4>

080021fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002202:	e7fe      	b.n	8002202 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <MemManage_Handler+0x4>

0800220a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <UsageFault_Handler+0x4>

08002216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002244:	f7fe f99a 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}

0800224c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002250:	4a06      	ldr	r2, [pc, #24]	; (800226c <SystemInit+0x20>)
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemInit+0x20>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002274:	480d      	ldr	r0, [pc, #52]	; (80022ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002276:	490e      	ldr	r1, [pc, #56]	; (80022b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800228c:	4c0b      	ldr	r4, [pc, #44]	; (80022bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229a:	f7ff ffd7 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229e:	f000 f811 	bl	80022c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a2:	f7ff fe2b 	bl	8001efc <main>
  bx  lr    
 80022a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022a8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022b4:	0800235c 	.word	0x0800235c
  ldr r2, =_sbss
 80022b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022bc:	20000084 	.word	0x20000084

080022c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC_IRQHandler>
	...

080022c4 <__libc_init_array>:
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4e0d      	ldr	r6, [pc, #52]	; (80022fc <__libc_init_array+0x38>)
 80022c8:	4c0d      	ldr	r4, [pc, #52]	; (8002300 <__libc_init_array+0x3c>)
 80022ca:	1ba4      	subs	r4, r4, r6
 80022cc:	10a4      	asrs	r4, r4, #2
 80022ce:	2500      	movs	r5, #0
 80022d0:	42a5      	cmp	r5, r4
 80022d2:	d109      	bne.n	80022e8 <__libc_init_array+0x24>
 80022d4:	4e0b      	ldr	r6, [pc, #44]	; (8002304 <__libc_init_array+0x40>)
 80022d6:	4c0c      	ldr	r4, [pc, #48]	; (8002308 <__libc_init_array+0x44>)
 80022d8:	f000 f820 	bl	800231c <_init>
 80022dc:	1ba4      	subs	r4, r4, r6
 80022de:	10a4      	asrs	r4, r4, #2
 80022e0:	2500      	movs	r5, #0
 80022e2:	42a5      	cmp	r5, r4
 80022e4:	d105      	bne.n	80022f2 <__libc_init_array+0x2e>
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
 80022e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022ec:	4798      	blx	r3
 80022ee:	3501      	adds	r5, #1
 80022f0:	e7ee      	b.n	80022d0 <__libc_init_array+0xc>
 80022f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022f6:	4798      	blx	r3
 80022f8:	3501      	adds	r5, #1
 80022fa:	e7f2      	b.n	80022e2 <__libc_init_array+0x1e>
 80022fc:	08002354 	.word	0x08002354
 8002300:	08002354 	.word	0x08002354
 8002304:	08002354 	.word	0x08002354
 8002308:	08002358 	.word	0x08002358

0800230c <memset>:
 800230c:	4402      	add	r2, r0
 800230e:	4603      	mov	r3, r0
 8002310:	4293      	cmp	r3, r2
 8002312:	d100      	bne.n	8002316 <memset+0xa>
 8002314:	4770      	bx	lr
 8002316:	f803 1b01 	strb.w	r1, [r3], #1
 800231a:	e7f9      	b.n	8002310 <memset+0x4>

0800231c <_init>:
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231e:	bf00      	nop
 8002320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002322:	bc08      	pop	{r3}
 8002324:	469e      	mov	lr, r3
 8002326:	4770      	bx	lr

08002328 <_fini>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr
