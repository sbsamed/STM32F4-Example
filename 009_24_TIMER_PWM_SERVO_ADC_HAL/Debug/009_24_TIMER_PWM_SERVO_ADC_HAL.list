
009_24_TIMER_PWM_SERVO_ADC_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003260  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          0000018c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000198  20000198  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d2f1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000183c  00000000  00000000  0002d32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c90  00000000  00000000  0002eb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf8  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006b07  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003caf  00000000  00000000  00036eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003abae  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003588  00000000  00000000  0003ac2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033d0 	.word	0x080033d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080033d0 	.word	0x080033d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fd0d 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f002 fd44 	bl	8002f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fd17 	bl	8000f6e <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 fced 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e033      	b.n	800063a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d109      	bne.n	80005ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f002 fd04 	bl	8002fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	f003 0310 	and.w	r3, r3, #16
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d118      	bne.n	800062c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	f043 0202 	orr.w	r2, r3, #2
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 fada 	bl	8000bc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f023 0303 	bic.w	r3, r3, #3
 8000622:	f043 0201 	orr.w	r2, r3, #1
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	641a      	str	r2, [r3, #64]	; 0x40
 800062a:	e001      	b.n	8000630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000656:	2b01      	cmp	r3, #1
 8000658:	d101      	bne.n	800065e <HAL_ADC_Start+0x1a>
 800065a:	2302      	movs	r3, #2
 800065c:	e0b2      	b.n	80007c4 <HAL_ADC_Start+0x180>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	2b01      	cmp	r3, #1
 8000672:	d018      	beq.n	80006a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	6892      	ldr	r2, [r2, #8]
 800067e:	f042 0201 	orr.w	r2, r2, #1
 8000682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000684:	4b52      	ldr	r3, [pc, #328]	; (80007d0 <HAL_ADC_Start+0x18c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a52      	ldr	r2, [pc, #328]	; (80007d4 <HAL_ADC_Start+0x190>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	0c9a      	lsrs	r2, r3, #18
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000698:	e002      	b.n	80006a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	3b01      	subs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f9      	bne.n	800069a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d17a      	bne.n	80007aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f2:	d106      	bne.n	8000702 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f8:	f023 0206 	bic.w	r2, r3, #6
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44
 8000700:	e002      	b.n	8000708 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000710:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <HAL_ADC_Start+0x194>)
 8000712:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800071c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	f003 031f 	and.w	r3, r3, #31
 8000726:	2b00      	cmp	r3, #0
 8000728:	d12a      	bne.n	8000780 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <HAL_ADC_Start+0x198>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d015      	beq.n	8000760 <HAL_ADC_Start+0x11c>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a29      	ldr	r2, [pc, #164]	; (80007e0 <HAL_ADC_Start+0x19c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d105      	bne.n	800074a <HAL_ADC_Start+0x106>
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <HAL_ADC_Start+0x194>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f003 031f 	and.w	r3, r3, #31
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00a      	beq.n	8000760 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <HAL_ADC_Start+0x1a0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d136      	bne.n	80007c2 <HAL_ADC_Start+0x17e>
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <HAL_ADC_Start+0x194>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 031f 	and.w	r3, r3, #31
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d830      	bhi.n	80007c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d129      	bne.n	80007c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	6812      	ldr	r2, [r2, #0]
 8000776:	6892      	ldr	r2, [r2, #8]
 8000778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	e020      	b.n	80007c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <HAL_ADC_Start+0x198>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d11b      	bne.n	80007c2 <HAL_ADC_Start+0x17e>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000794:	2b00      	cmp	r3, #0
 8000796:	d114      	bne.n	80007c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	6892      	ldr	r2, [r2, #8]
 80007a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	e00b      	b.n	80007c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f043 0210 	orr.w	r2, r3, #16
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f043 0201 	orr.w	r2, r3, #1
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	20000008 	.word	0x20000008
 80007d4:	431bde83 	.word	0x431bde83
 80007d8:	40012300 	.word	0x40012300
 80007dc:	40012000 	.word	0x40012000
 80007e0:	40012100 	.word	0x40012100
 80007e4:	40012200 	.word	0x40012200

080007e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d101      	bne.n	80007fe <HAL_ADC_Stop+0x16>
 80007fa:	2302      	movs	r3, #2
 80007fc:	e021      	b.n	8000842 <HAL_ADC_Stop+0x5a>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2201      	movs	r2, #1
 8000802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	6892      	ldr	r2, [r2, #8]
 8000810:	f022 0201 	bic.w	r2, r2, #1
 8000814:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	2b00      	cmp	r3, #0
 8000822:	d109      	bne.n	8000838 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	f043 0201 	orr.w	r2, r3, #1
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800086a:	d113      	bne.n	8000894 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800087a:	d10b      	bne.n	8000894 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f043 0220 	orr.w	r2, r3, #32
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e063      	b.n	800095c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000894:	f7ff fe86 	bl	80005a4 <HAL_GetTick>
 8000898:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800089a:	e021      	b.n	80008e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a2:	d01d      	beq.n	80008e0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d007      	beq.n	80008ba <HAL_ADC_PollForConversion+0x6c>
 80008aa:	f7ff fe7b 	bl	80005a4 <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	1ad2      	subs	r2, r2, r3
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d912      	bls.n	80008e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d00b      	beq.n	80008e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f043 0204 	orr.w	r2, r3, #4
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80008dc:	2303      	movs	r3, #3
 80008de:	e03d      	b.n	800095c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d1d6      	bne.n	800089c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f06f 0212 	mvn.w	r2, #18
 80008f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d123      	bne.n	800095a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000916:	2b00      	cmp	r3, #0
 8000918:	d11f      	bne.n	800095a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000932:	2b00      	cmp	r3, #0
 8000934:	d111      	bne.n	800095a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d105      	bne.n	800095a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f043 0201 	orr.w	r2, r3, #1
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000980:	b490      	push	{r4, r7}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000994:	2b01      	cmp	r3, #1
 8000996:	d101      	bne.n	800099c <HAL_ADC_ConfigChannel+0x1c>
 8000998:	2302      	movs	r3, #2
 800099a:	e107      	b.n	8000bac <HAL_ADC_ConfigChannel+0x22c>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2201      	movs	r2, #1
 80009a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b09      	cmp	r3, #9
 80009aa:	d926      	bls.n	80009fa <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	68d9      	ldr	r1, [r3, #12]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4403      	add	r3, r0
 80009c4:	3b1e      	subs	r3, #30
 80009c6:	2007      	movs	r0, #7
 80009c8:	fa00 f303 	lsl.w	r3, r0, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	400b      	ands	r3, r1
 80009d0:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68d9      	ldr	r1, [r3, #12]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	6898      	ldr	r0, [r3, #8]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	461c      	mov	r4, r3
 80009e8:	4623      	mov	r3, r4
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4423      	add	r3, r4
 80009ee:	3b1e      	subs	r3, #30
 80009f0:	fa00 f303 	lsl.w	r3, r0, r3
 80009f4:	430b      	orrs	r3, r1
 80009f6:	60d3      	str	r3, [r2, #12]
 80009f8:	e023      	b.n	8000a42 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6919      	ldr	r1, [r3, #16]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4403      	add	r3, r0
 8000a12:	2007      	movs	r0, #7
 8000a14:	fa00 f303 	lsl.w	r3, r0, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6919      	ldr	r1, [r3, #16]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	6898      	ldr	r0, [r3, #8]
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	461c      	mov	r4, r3
 8000a34:	4623      	mov	r3, r4
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4423      	add	r3, r4
 8000a3a:	fa00 f303 	lsl.w	r3, r0, r3
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d824      	bhi.n	8000a94 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	3b05      	subs	r3, #5
 8000a60:	221f      	movs	r2, #31
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	4003      	ands	r3, r0
 8000a6a:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	461c      	mov	r4, r3
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	3b05      	subs	r3, #5
 8000a8a:	fa04 f303 	lsl.w	r3, r4, r3
 8000a8e:	4303      	orrs	r3, r0
 8000a90:	634b      	str	r3, [r1, #52]	; 0x34
 8000a92:	e04c      	b.n	8000b2e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b0c      	cmp	r3, #12
 8000a9a:	d824      	bhi.n	8000ae6 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6819      	ldr	r1, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	3b23      	subs	r3, #35	; 0x23
 8000ab2:	221f      	movs	r2, #31
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	4003      	ands	r3, r0
 8000abc:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6819      	ldr	r1, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	461c      	mov	r4, r3
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	3b23      	subs	r3, #35	; 0x23
 8000adc:	fa04 f303 	lsl.w	r3, r4, r3
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	630b      	str	r3, [r1, #48]	; 0x30
 8000ae4:	e023      	b.n	8000b2e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6819      	ldr	r1, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	3b41      	subs	r3, #65	; 0x41
 8000afc:	221f      	movs	r2, #31
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	4003      	ands	r3, r0
 8000b06:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	461c      	mov	r4, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	3b41      	subs	r3, #65	; 0x41
 8000b26:	fa04 f303 	lsl.w	r3, r4, r3
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_ADC_ConfigChannel+0x238>)
 8000b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <HAL_ADC_ConfigChannel+0x23c>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d109      	bne.n	8000b50 <HAL_ADC_ConfigChannel+0x1d0>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b12      	cmp	r3, #18
 8000b42:	d105      	bne.n	8000b50 <HAL_ADC_ConfigChannel+0x1d0>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_ADC_ConfigChannel+0x23c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d123      	bne.n	8000ba2 <HAL_ADC_ConfigChannel+0x222>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b10      	cmp	r3, #16
 8000b60:	d003      	beq.n	8000b6a <HAL_ADC_ConfigChannel+0x1ea>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b11      	cmp	r3, #17
 8000b68:	d11b      	bne.n	8000ba2 <HAL_ADC_ConfigChannel+0x222>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b10      	cmp	r3, #16
 8000b7c:	d111      	bne.n	8000ba2 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_ADC_ConfigChannel+0x240>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_ADC_ConfigChannel+0x244>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	0c9a      	lsrs	r2, r3, #18
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b94:	e002      	b.n	8000b9c <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f9      	bne.n	8000b96 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc90      	pop	{r4, r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40012300 	.word	0x40012300
 8000bbc:	40012000 	.word	0x40012000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	431bde83 	.word	0x431bde83

08000bc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bd0:	4b79      	ldr	r3, [pc, #484]	; (8000db8 <ADC_Init+0x1f0>)
 8000bd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	6852      	ldr	r2, [r2, #4]
 8000bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	6851      	ldr	r1, [r2, #4]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6912      	ldr	r2, [r2, #16]
 8000c0c:	0212      	lsls	r2, r2, #8
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	6812      	ldr	r2, [r2, #0]
 8000c1a:	6852      	ldr	r2, [r2, #4]
 8000c1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000c20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	6851      	ldr	r1, [r2, #4]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	6892      	ldr	r2, [r2, #8]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	6812      	ldr	r2, [r2, #0]
 8000c3c:	6892      	ldr	r2, [r2, #8]
 8000c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	6891      	ldr	r1, [r2, #8]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68d2      	ldr	r2, [r2, #12]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5a:	4a58      	ldr	r2, [pc, #352]	; (8000dbc <ADC_Init+0x1f4>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d022      	beq.n	8000ca6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	6892      	ldr	r2, [r2, #8]
 8000c6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	6891      	ldr	r1, [r2, #8]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	6892      	ldr	r2, [r2, #8]
 8000c8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6812      	ldr	r2, [r2, #0]
 8000c9a:	6891      	ldr	r1, [r2, #8]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	e00f      	b.n	8000cc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	6892      	ldr	r2, [r2, #8]
 8000cb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000cb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	6812      	ldr	r2, [r2, #0]
 8000cbe:	6892      	ldr	r2, [r2, #8]
 8000cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000cc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	6892      	ldr	r2, [r2, #8]
 8000cd0:	f022 0202 	bic.w	r2, r2, #2
 8000cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	6891      	ldr	r1, [r2, #8]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7e12      	ldrb	r2, [r2, #24]
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d01b      	beq.n	8000d2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	6852      	ldr	r2, [r2, #4]
 8000cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	6852      	ldr	r2, [r2, #4]
 8000d0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000d12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	6851      	ldr	r1, [r2, #4]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000d22:	3a01      	subs	r2, #1
 8000d24:	0352      	lsls	r2, r2, #13
 8000d26:	430a      	orrs	r2, r1
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	e007      	b.n	8000d3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	6852      	ldr	r2, [r2, #4]
 8000d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	69d2      	ldr	r2, [r2, #28]
 8000d5a:	3a01      	subs	r2, #1
 8000d5c:	0512      	lsls	r2, r2, #20
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6812      	ldr	r2, [r2, #0]
 8000d6a:	6892      	ldr	r2, [r2, #8]
 8000d6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	6891      	ldr	r1, [r2, #8]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8000d82:	0252      	lsls	r2, r2, #9
 8000d84:	430a      	orrs	r2, r1
 8000d86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	6892      	ldr	r2, [r2, #8]
 8000d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	6891      	ldr	r1, [r2, #8]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6952      	ldr	r2, [r2, #20]
 8000da6:	0292      	lsls	r2, r2, #10
 8000da8:	430a      	orrs	r2, r1
 8000daa:	609a      	str	r2, [r3, #8]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40012300 	.word	0x40012300
 8000dbc:	0f000001 	.word	0x0f000001

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	490d      	ldr	r1, [pc, #52]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	4909      	ldr	r1, [pc, #36]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	2201      	movs	r2, #1
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	1e5a      	subs	r2, r3, #1
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	401a      	ands	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	1e59      	subs	r1, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f7ff ff90 	bl	8000e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff49 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff5e 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff90 	bl	8000e78 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5f 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffb0 	bl	8000edc <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e16b      	b.n	800127c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 815a 	bne.w	8001276 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80b4 	beq.w	8001276 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4a5f      	ldr	r2, [pc, #380]	; (8001290 <HAL_GPIO_Init+0x308>)
 8001114:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <HAL_GPIO_Init+0x308>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800111c:	6453      	str	r3, [r2, #68]	; 0x44
 800111e:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <HAL_GPIO_Init+0x308>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a5a      	ldr	r2, [pc, #360]	; (8001294 <HAL_GPIO_Init+0x30c>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a51      	ldr	r2, [pc, #324]	; (8001298 <HAL_GPIO_Init+0x310>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d02b      	beq.n	80011ae <HAL_GPIO_Init+0x226>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a50      	ldr	r2, [pc, #320]	; (800129c <HAL_GPIO_Init+0x314>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d025      	beq.n	80011aa <HAL_GPIO_Init+0x222>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4f      	ldr	r2, [pc, #316]	; (80012a0 <HAL_GPIO_Init+0x318>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01f      	beq.n	80011a6 <HAL_GPIO_Init+0x21e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4e      	ldr	r2, [pc, #312]	; (80012a4 <HAL_GPIO_Init+0x31c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x21a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4d      	ldr	r2, [pc, #308]	; (80012a8 <HAL_GPIO_Init+0x320>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x216>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_GPIO_Init+0x324>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x212>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <HAL_GPIO_Init+0x328>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x20e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4a      	ldr	r2, [pc, #296]	; (80012b4 <HAL_GPIO_Init+0x32c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x20a>
 800118e:	2307      	movs	r3, #7
 8001190:	e00e      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 8001192:	2308      	movs	r3, #8
 8001194:	e00c      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 8001196:	2306      	movs	r3, #6
 8001198:	e00a      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 800119a:	2305      	movs	r3, #5
 800119c:	e008      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 800119e:	2304      	movs	r3, #4
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e004      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x228>
 80011ae:	2300      	movs	r3, #0
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f002 0203 	and.w	r2, r2, #3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	4093      	lsls	r3, r2
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c0:	4934      	ldr	r1, [pc, #208]	; (8001294 <HAL_GPIO_Init+0x30c>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <HAL_GPIO_Init+0x330>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011f2:	4a31      	ldr	r2, [pc, #196]	; (80012b8 <HAL_GPIO_Init+0x330>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011f8:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x330>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121c:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_GPIO_Init+0x330>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <HAL_GPIO_Init+0x330>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <HAL_GPIO_Init+0x330>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_GPIO_Init+0x330>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_GPIO_Init+0x330>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f ae90 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001284:	bf00      	nop
 8001286:	3724      	adds	r7, #36	; 0x24
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40023800 	.word	0x40023800
 8001294:	40013800 	.word	0x40013800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40021400 	.word	0x40021400
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40021c00 	.word	0x40021c00
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e264      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4ba0      	ldr	r3, [pc, #640]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b9d      	ldr	r3, [pc, #628]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b99      	ldr	r3, [pc, #612]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e23f      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4a91      	ldr	r2, [pc, #580]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	4b90      	ldr	r3, [pc, #576]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4a8b      	ldr	r2, [pc, #556]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	4b8a      	ldr	r3, [pc, #552]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4a88      	ldr	r2, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	4b87      	ldr	r3, [pc, #540]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4a84      	ldr	r2, [pc, #528]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	4b84      	ldr	r3, [pc, #528]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4a81      	ldr	r2, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	4b81      	ldr	r3, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff f916 	bl	80005a4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff f912 	bl	80005a4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e204      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff f902 	bl	80005a4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff f8fe 	bl	80005a4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f0      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b6c      	ldr	r3, [pc, #432]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b62      	ldr	r3, [pc, #392]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b5f      	ldr	r3, [pc, #380]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b5c      	ldr	r3, [pc, #368]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c4      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4956      	ldr	r1, [pc, #344]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	4b55      	ldr	r3, [pc, #340]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x2b0>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff f8b7 	bl	80005a4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff f8b3 	bl	80005a4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a5      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4943      	ldr	r1, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_RCC_OscConfig+0x2b0>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff f896 	bl	80005a4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff f892 	bl	80005a4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e184      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d030      	beq.n	8001508 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_RCC_OscConfig+0x2b4>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff f876 	bl	80005a4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff f872 	bl	80005a4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e164      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e015      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_RCC_OscConfig+0x2b4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f85f 	bl	80005a4 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff f85b 	bl	80005a4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e14d      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a0 	beq.w	8001656 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10f      	bne.n	8001546 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d121      	bne.n	8001596 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <HAL_RCC_OscConfig+0x2b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155e:	f7ff f821 	bl	80005a4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	e011      	b.n	800158a <HAL_RCC_OscConfig+0x2ce>
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	42470000 	.word	0x42470000
 8001570:	42470e80 	.word	0x42470e80
 8001574:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001578:	f7ff f814 	bl	80005a4 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e106      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <HAL_RCC_OscConfig+0x4e4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x2f0>
 800159e:	4a81      	ldr	r2, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	e01c      	b.n	80015e6 <HAL_RCC_OscConfig+0x32a>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x312>
 80015b4:	4a7b      	ldr	r2, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	4b7b      	ldr	r3, [pc, #492]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	4a78      	ldr	r2, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x32a>
 80015ce:	4a75      	ldr	r2, [pc, #468]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	4b74      	ldr	r3, [pc, #464]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	4a72      	ldr	r2, [pc, #456]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	4b71      	ldr	r3, [pc, #452]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7fe ffd9 	bl	80005a4 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7fe ffd5 	bl	80005a4 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0c5      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ee      	beq.n	80015f6 <HAL_RCC_OscConfig+0x33a>
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7fe ffc3 	bl	80005a4 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7fe ffbf 	bl	80005a4 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0af      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ee      	bne.n	8001622 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4a56      	ldr	r2, [pc, #344]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800164c:	4b55      	ldr	r3, [pc, #340]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 809b 	beq.w	8001796 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d05c      	beq.n	8001726 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d141      	bne.n	80016f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7fe ff93 	bl	80005a4 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001682:	f7fe ff8f 	bl	80005a4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e081      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a0:	4940      	ldr	r1, [pc, #256]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	3b01      	subs	r3, #1
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7fe ff68 	bl	80005a4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d8:	f7fe ff64 	bl	80005a4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e056      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x41c>
 80016f6:	e04e      	b.n	8001796 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7fe ff51 	bl	80005a4 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7fe ff4d 	bl	80005a4 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e03f      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x44a>
 8001724:	e037      	b.n	8001796 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e032      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_RCC_OscConfig+0x4e8>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d028      	beq.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d121      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d11a      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001762:	4013      	ands	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001768:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176a:	4293      	cmp	r3, r2
 800176c:	d111      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	3b01      	subs	r3, #1
 800177c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40007000 	.word	0x40007000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	42470060 	.word	0x42470060

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0207 	and.w	r2, r3, #7
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d20c      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0207 	and.w	r2, r3, #7
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4a59      	ldr	r2, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4a53      	ldr	r2, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4950      	ldr	r1, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4937      	ldr	r1, [pc, #220]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 0203 	bic.w	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7fe fe82 	bl	80005a4 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7fe fe7e 	bl	80005a4 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0207 	and.w	r2, r3, #7
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d90c      	bls.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0207 	and.w	r2, r3, #7
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4919      	ldr	r1, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4912      	ldr	r1, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4601      	mov	r1, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	fa21 f303 	lsr.w	r3, r1, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fde2 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	080033e8 	.word	0x080033e8
 8001970:	20000008 	.word	0x20000008
 8001974:	20000000 	.word	0x20000000

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800197c:	b087      	sub	sp, #28
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001980:	2200      	movs	r2, #0
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	617a      	str	r2, [r7, #20]
 8001988:	2200      	movs	r2, #0
 800198a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800198c:	2200      	movs	r2, #0
 800198e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4a51      	ldr	r2, [pc, #324]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001992:	6892      	ldr	r2, [r2, #8]
 8001994:	f002 020c 	and.w	r2, r2, #12
 8001998:	2a04      	cmp	r2, #4
 800199a:	d007      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 800199c:	2a08      	cmp	r2, #8
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019a0:	2a00      	cmp	r2, #0
 80019a2:	f040 8090 	bne.w	8001ac6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <HAL_RCC_GetSysClockFreq+0x164>)
 80019a8:	613b      	str	r3, [r7, #16]
       break;
 80019aa:	e08f      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019ae:	613b      	str	r3, [r7, #16]
      break;
 80019b0:	e08c      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b2:	4a49      	ldr	r2, [pc, #292]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019b4:	6852      	ldr	r2, [r2, #4]
 80019b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80019ba:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019bc:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019be:	6852      	ldr	r2, [r2, #4]
 80019c0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c8:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	099b      	lsrs	r3, r3, #6
 80019ce:	f04f 0400 	mov.w	r4, #0
 80019d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	ea03 0301 	and.w	r3, r3, r1
 80019de:	ea04 0402 	and.w	r4, r4, r2
 80019e2:	4a3f      	ldr	r2, [pc, #252]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019e4:	fb02 f104 	mul.w	r1, r2, r4
 80019e8:	2200      	movs	r2, #0
 80019ea:	fb02 f203 	mul.w	r2, r2, r3
 80019ee:	440a      	add	r2, r1
 80019f0:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019f2:	fba3 0101 	umull	r0, r1, r3, r1
 80019f6:	1853      	adds	r3, r2, r1
 80019f8:	4619      	mov	r1, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	f7fe fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e04c      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a10:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a12:	6852      	ldr	r2, [r2, #4]
 8001a14:	0992      	lsrs	r2, r2, #6
 8001a16:	4611      	mov	r1, r2
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001a20:	f04f 0600 	mov.w	r6, #0
 8001a24:	ea05 0501 	and.w	r5, r5, r1
 8001a28:	ea06 0602 	and.w	r6, r6, r2
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4632      	mov	r2, r6
 8001a30:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001a34:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001a38:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001a3c:	4651      	mov	r1, sl
 8001a3e:	465a      	mov	r2, fp
 8001a40:	46aa      	mov	sl, r5
 8001a42:	46b3      	mov	fp, r6
 8001a44:	4655      	mov	r5, sl
 8001a46:	465e      	mov	r6, fp
 8001a48:	1b4d      	subs	r5, r1, r5
 8001a4a:	eb62 0606 	sbc.w	r6, r2, r6
 8001a4e:	4629      	mov	r1, r5
 8001a50:	4632      	mov	r2, r6
 8001a52:	0194      	lsls	r4, r2, #6
 8001a54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a58:	018b      	lsls	r3, r1, #6
 8001a5a:	1a5b      	subs	r3, r3, r1
 8001a5c:	eb64 0402 	sbc.w	r4, r4, r2
 8001a60:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001a64:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001a68:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001a6c:	4643      	mov	r3, r8
 8001a6e:	464c      	mov	r4, r9
 8001a70:	4655      	mov	r5, sl
 8001a72:	465e      	mov	r6, fp
 8001a74:	18ed      	adds	r5, r5, r3
 8001a76:	eb46 0604 	adc.w	r6, r6, r4
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	4634      	mov	r4, r6
 8001a7e:	02a2      	lsls	r2, r4, #10
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	029b      	lsls	r3, r3, #10
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001a92:	4618      	mov	r0, r3
 8001a94:	4621      	mov	r1, r4
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f04f 0400 	mov.w	r4, #0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	f7fe fb92 	bl	80001c8 <__aeabi_uldivmod>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0c1b      	lsrs	r3, r3, #16
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	613b      	str	r3, [r7, #16]
      break;
 8001ac4:	e002      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetSysClockFreq+0x164>)
 8001ac8:	613b      	str	r3, [r7, #16]
      break;
 8001aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001acc:	693b      	ldr	r3, [r7, #16]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	017d7840 	.word	0x017d7840

08001ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff0 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b04:	4601      	mov	r1, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	080033f8 	.word	0x080033f8

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffdc 	bl	8001ae4 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0b5b      	lsrs	r3, r3, #13
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4a03      	ldr	r2, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	080033f8 	.word	0x080033f8

08001b4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f001 faf6 	bl	8003164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 fa5e 	bl	800204c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_TIM_PWM_Start+0x24>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e022      	b.n	8001c56 <HAL_TIM_PWM_Start+0x6a>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d109      	bne.n	8001c2a <HAL_TIM_PWM_Start+0x3e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	e015      	b.n	8001c56 <HAL_TIM_PWM_Start+0x6a>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d109      	bne.n	8001c44 <HAL_TIM_PWM_Start+0x58>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e008      	b.n	8001c56 <HAL_TIM_PWM_Start+0x6a>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07c      	b.n	8001d58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <HAL_TIM_PWM_Start+0x82>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c6c:	e013      	b.n	8001c96 <HAL_TIM_PWM_Start+0xaa>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d104      	bne.n	8001c7e <HAL_TIM_PWM_Start+0x92>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	e00b      	b.n	8001c96 <HAL_TIM_PWM_Start+0xaa>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d104      	bne.n	8001c8e <HAL_TIM_PWM_Start+0xa2>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c8c:	e003      	b.n	8001c96 <HAL_TIM_PWM_Start+0xaa>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 fc24 	bl	80024ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <HAL_TIM_PWM_Start+0x174>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_TIM_PWM_Start+0xcc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <HAL_TIM_PWM_Start+0x178>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_TIM_PWM_Start+0xd0>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_TIM_PWM_Start+0xd2>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_TIM_PWM_Start+0x174>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d022      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x136>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d01d      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x136>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_TIM_PWM_Start+0x17c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d018      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x136>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_TIM_PWM_Start+0x180>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x136>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_TIM_PWM_Start+0x184>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00e      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x136>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_TIM_PWM_Start+0x178>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x136>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_TIM_PWM_Start+0x188>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_TIM_PWM_Start+0x136>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_TIM_PWM_Start+0x18c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d111      	bne.n	8001d46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b06      	cmp	r3, #6
 8001d32:	d010      	beq.n	8001d56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d44:	e007      	b.n	8001d56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40010400 	.word	0x40010400
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40000c00 	.word	0x40000c00
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40001800 	.word	0x40001800

08001d7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e097      	b.n	8001ec0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d106      	bne.n	8001daa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f001 f963 	bl	8003070 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2202      	movs	r2, #2
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc0:	f023 0307 	bic.w	r3, r3, #7
 8001dc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f000 f93b 	bl	800204c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e1c:	f023 030c 	bic.w	r3, r3, #12
 8001e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	011a      	lsls	r2, r3, #4
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001e62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e0ae      	b.n	8002044 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	f200 809f 	bhi.w	8002034 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08002035 	.word	0x08002035
 8001f04:	08002035 	.word	0x08002035
 8001f08:	08002035 	.word	0x08002035
 8001f0c:	08001f71 	.word	0x08001f71
 8001f10:	08002035 	.word	0x08002035
 8001f14:	08002035 	.word	0x08002035
 8001f18:	08002035 	.word	0x08002035
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08002035 	.word	0x08002035
 8001f24:	08002035 	.word	0x08002035
 8001f28:	08002035 	.word	0x08002035
 8001f2c:	08001ff3 	.word	0x08001ff3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f928 	bl	800218c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	6992      	ldr	r2, [r2, #24]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	6992      	ldr	r2, [r2, #24]
 8001f56:	f022 0204 	bic.w	r2, r2, #4
 8001f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	6991      	ldr	r1, [r2, #24]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	6912      	ldr	r2, [r2, #16]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	619a      	str	r2, [r3, #24]
      break;
 8001f6e:	e064      	b.n	800203a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f978 	bl	800226c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6992      	ldr	r2, [r2, #24]
 8001f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	6992      	ldr	r2, [r2, #24]
 8001f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	6991      	ldr	r1, [r2, #24]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	6912      	ldr	r2, [r2, #16]
 8001faa:	0212      	lsls	r2, r2, #8
 8001fac:	430a      	orrs	r2, r1
 8001fae:	619a      	str	r2, [r3, #24]
      break;
 8001fb0:	e043      	b.n	800203a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f9cd 	bl	8002358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	69d2      	ldr	r2, [r2, #28]
 8001fc8:	f042 0208 	orr.w	r2, r2, #8
 8001fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	69d2      	ldr	r2, [r2, #28]
 8001fd8:	f022 0204 	bic.w	r2, r2, #4
 8001fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	69d1      	ldr	r1, [r2, #28]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	6912      	ldr	r2, [r2, #16]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]
      break;
 8001ff0:	e023      	b.n	800203a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fa21 	bl	8002440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	69d2      	ldr	r2, [r2, #28]
 8002008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	69d2      	ldr	r2, [r2, #28]
 8002018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800201c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	69d1      	ldr	r1, [r2, #28]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	6912      	ldr	r2, [r2, #16]
 800202c:	0212      	lsls	r2, r2, #8
 800202e:	430a      	orrs	r2, r1
 8002030:	61da      	str	r2, [r3, #28]
      break;
 8002032:	e002      	b.n	800203a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
      break;
 8002038:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a40      	ldr	r2, [pc, #256]	; (8002160 <TIM_Base_SetConfig+0x114>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206a:	d00f      	beq.n	800208c <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3d      	ldr	r2, [pc, #244]	; (8002164 <TIM_Base_SetConfig+0x118>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00b      	beq.n	800208c <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <TIM_Base_SetConfig+0x11c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3b      	ldr	r2, [pc, #236]	; (800216c <TIM_Base_SetConfig+0x120>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <TIM_Base_SetConfig+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3a      	ldr	r2, [pc, #232]	; (8002170 <TIM_Base_SetConfig+0x124>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d108      	bne.n	800209e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2f      	ldr	r2, [pc, #188]	; (8002160 <TIM_Base_SetConfig+0x114>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02b      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ac:	d027      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2c      	ldr	r2, [pc, #176]	; (8002164 <TIM_Base_SetConfig+0x118>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d023      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2b      	ldr	r2, [pc, #172]	; (8002168 <TIM_Base_SetConfig+0x11c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01f      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <TIM_Base_SetConfig+0x120>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d01b      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a29      	ldr	r2, [pc, #164]	; (8002170 <TIM_Base_SetConfig+0x124>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d017      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a28      	ldr	r2, [pc, #160]	; (8002174 <TIM_Base_SetConfig+0x128>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <TIM_Base_SetConfig+0x12c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00f      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a26      	ldr	r2, [pc, #152]	; (800217c <TIM_Base_SetConfig+0x130>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00b      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a25      	ldr	r2, [pc, #148]	; (8002180 <TIM_Base_SetConfig+0x134>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <TIM_Base_SetConfig+0x138>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d003      	beq.n	80020fe <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a23      	ldr	r2, [pc, #140]	; (8002188 <TIM_Base_SetConfig+0x13c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d108      	bne.n	8002110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <TIM_Base_SetConfig+0x114>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <TIM_Base_SetConfig+0xf8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <TIM_Base_SetConfig+0x124>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	615a      	str	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000
 8002164:	40000400 	.word	0x40000400
 8002168:	40000800 	.word	0x40000800
 800216c:	40000c00 	.word	0x40000c00
 8002170:	40010400 	.word	0x40010400
 8002174:	40014000 	.word	0x40014000
 8002178:	40014400 	.word	0x40014400
 800217c:	40014800 	.word	0x40014800
 8002180:	40001800 	.word	0x40001800
 8002184:	40001c00 	.word	0x40001c00
 8002188:	40002000 	.word	0x40002000

0800218c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	f023 0201 	bic.w	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 0302 	bic.w	r3, r3, #2
 80021d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <TIM_OC1_SetConfig+0xd8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <TIM_OC1_SetConfig+0x64>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <TIM_OC1_SetConfig+0xdc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d10c      	bne.n	800220a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f023 0308 	bic.w	r3, r3, #8
 80021f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <TIM_OC1_SetConfig+0xd8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d003      	beq.n	800221a <TIM_OC1_SetConfig+0x8e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <TIM_OC1_SetConfig+0xdc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d111      	bne.n	800223e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	621a      	str	r2, [r3, #32]
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40010000 	.word	0x40010000
 8002268:	40010400 	.word	0x40010400

0800226c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f023 0210 	bic.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f023 0320 	bic.w	r3, r3, #32
 80022b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <TIM_OC2_SetConfig+0xe4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_OC2_SetConfig+0x68>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a21      	ldr	r2, [pc, #132]	; (8002354 <TIM_OC2_SetConfig+0xe8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d10d      	bne.n	80022f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <TIM_OC2_SetConfig+0xe4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <TIM_OC2_SetConfig+0x94>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a16      	ldr	r2, [pc, #88]	; (8002354 <TIM_OC2_SetConfig+0xe8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d113      	bne.n	8002328 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800230e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	621a      	str	r2, [r3, #32]
}
 8002342:	bf00      	nop
 8002344:	371c      	adds	r7, #28
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40010000 	.word	0x40010000
 8002354:	40010400 	.word	0x40010400

08002358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <TIM_OC3_SetConfig+0xe0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_OC3_SetConfig+0x66>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <TIM_OC3_SetConfig+0xe4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10d      	bne.n	80023da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <TIM_OC3_SetConfig+0xe0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d003      	beq.n	80023ea <TIM_OC3_SetConfig+0x92>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a15      	ldr	r2, [pc, #84]	; (800243c <TIM_OC3_SetConfig+0xe4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d113      	bne.n	8002412 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40010000 	.word	0x40010000
 800243c:	40010400 	.word	0x40010400

08002440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800248a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	031b      	lsls	r3, r3, #12
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <TIM_OC4_SetConfig+0xa4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_OC4_SetConfig+0x68>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a11      	ldr	r2, [pc, #68]	; (80024e8 <TIM_OC4_SetConfig+0xa8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d109      	bne.n	80024bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	019b      	lsls	r3, r3, #6
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	621a      	str	r2, [r3, #32]
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40010400 	.word	0x40010400

080024ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	2201      	movs	r2, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	621a      	str	r2, [r3, #32]
}
 800252a:	bf00      	nop
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800254c:	2302      	movs	r3, #2
 800254e:	e05a      	b.n	8002606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a21      	ldr	r2, [pc, #132]	; (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d022      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d01d      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d018      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d013      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00e      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d009      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d004      	beq.n	80025da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d10c      	bne.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40010000 	.word	0x40010000
 8002618:	40000400 	.word	0x40000400
 800261c:	40000800 	.word	0x40000800
 8002620:	40000c00 	.word	0x40000c00
 8002624:	40010400 	.word	0x40010400
 8002628:	40014000 	.word	0x40014000
 800262c:	40001800 	.word	0x40001800

08002630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e03f      	b.n	80026c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fde0 	bl	800321c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f829 	bl	80026cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	6912      	ldr	r2, [r2, #16]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	6952      	ldr	r2, [r2, #20]
 8002694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	68d2      	ldr	r2, [r2, #12]
 80026a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	b091      	sub	sp, #68	; 0x44
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4313      	orrs	r3, r2
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002712:	f022 020c 	bic.w	r2, r2, #12
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	4313      	orrs	r3, r2
 800271a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4bba      	ldr	r3, [pc, #744]	; (8002a20 <UART_SetConfig+0x354>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d004      	beq.n	8002746 <UART_SetConfig+0x7a>
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4bb8      	ldr	r3, [pc, #736]	; (8002a24 <UART_SetConfig+0x358>)
 8002742:	429a      	cmp	r2, r3
 8002744:	d103      	bne.n	800274e <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002746:	f7ff f9ed 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 800274a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800274c:	e002      	b.n	8002754 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800274e:	f7ff f9d5 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8002752:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275c:	f040 80a7 	bne.w	80028ae <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	62ba      	str	r2, [r7, #40]	; 0x28
 8002766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	18db      	adds	r3, r3, r3
 8002774:	eb44 0404 	adc.w	r4, r4, r4
 8002778:	185b      	adds	r3, r3, r1
 800277a:	eb44 0402 	adc.w	r4, r4, r2
 800277e:	00e0      	lsls	r0, r4, #3
 8002780:	6178      	str	r0, [r7, #20]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002788:	6178      	str	r0, [r7, #20]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002792:	185d      	adds	r5, r3, r1
 8002794:	eb44 0602 	adc.w	r6, r4, r2
 8002798:	4628      	mov	r0, r5
 800279a:	4631      	mov	r1, r6
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f04f 0400 	mov.w	r4, #0
 80027a4:	18db      	adds	r3, r3, r3
 80027a6:	eb44 0404 	adc.w	r4, r4, r4
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	f7fd fd0b 	bl	80001c8 <__aeabi_uldivmod>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b9b      	ldr	r3, [pc, #620]	; (8002a28 <UART_SetConfig+0x35c>)
 80027ba:	fba3 2302 	umull	r2, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	011e      	lsls	r6, r3, #4
 80027c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c4:	4619      	mov	r1, r3
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	18db      	adds	r3, r3, r3
 80027d0:	eb44 0404 	adc.w	r4, r4, r4
 80027d4:	185b      	adds	r3, r3, r1
 80027d6:	eb44 0402 	adc.w	r4, r4, r2
 80027da:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80027de:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80027e2:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80027e6:	4653      	mov	r3, sl
 80027e8:	465c      	mov	r4, fp
 80027ea:	eb13 0a01 	adds.w	sl, r3, r1
 80027ee:	eb44 0b02 	adc.w	fp, r4, r2
 80027f2:	4650      	mov	r0, sl
 80027f4:	4659      	mov	r1, fp
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f04f 0400 	mov.w	r4, #0
 80027fe:	18db      	adds	r3, r3, r3
 8002800:	eb44 0404 	adc.w	r4, r4, r4
 8002804:	461a      	mov	r2, r3
 8002806:	4623      	mov	r3, r4
 8002808:	f7fd fcde 	bl	80001c8 <__aeabi_uldivmod>
 800280c:	4603      	mov	r3, r0
 800280e:	460c      	mov	r4, r1
 8002810:	461a      	mov	r2, r3
 8002812:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <UART_SetConfig+0x35c>)
 8002814:	fba3 1302 	umull	r1, r3, r3, r2
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	2164      	movs	r1, #100	; 0x64
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	3332      	adds	r3, #50	; 0x32
 8002826:	4a80      	ldr	r2, [pc, #512]	; (8002a28 <UART_SetConfig+0x35c>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002834:	441e      	add	r6, r3
 8002836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002838:	4619      	mov	r1, r3
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	460b      	mov	r3, r1
 8002840:	4614      	mov	r4, r2
 8002842:	18db      	adds	r3, r3, r3
 8002844:	eb44 0404 	adc.w	r4, r4, r4
 8002848:	185b      	adds	r3, r3, r1
 800284a:	eb44 0402 	adc.w	r4, r4, r2
 800284e:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002852:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002856:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800285a:	4643      	mov	r3, r8
 800285c:	464c      	mov	r4, r9
 800285e:	eb13 0801 	adds.w	r8, r3, r1
 8002862:	eb44 0902 	adc.w	r9, r4, r2
 8002866:	4640      	mov	r0, r8
 8002868:	4649      	mov	r1, r9
 800286a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f04f 0400 	mov.w	r4, #0
 8002872:	18db      	adds	r3, r3, r3
 8002874:	eb44 0404 	adc.w	r4, r4, r4
 8002878:	461a      	mov	r2, r3
 800287a:	4623      	mov	r3, r4
 800287c:	f7fd fca4 	bl	80001c8 <__aeabi_uldivmod>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	461a      	mov	r2, r3
 8002886:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <UART_SetConfig+0x35c>)
 8002888:	fba3 1302 	umull	r1, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	2164      	movs	r1, #100	; 0x64
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	3332      	adds	r3, #50	; 0x32
 800289a:	4a63      	ldr	r2, [pc, #396]	; (8002a28 <UART_SetConfig+0x35c>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	4433      	add	r3, r6
 80028a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028aa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028ac:	e0b3      	b.n	8002a16 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	460b      	mov	r3, r1
 80028be:	4614      	mov	r4, r2
 80028c0:	18db      	adds	r3, r3, r3
 80028c2:	eb44 0404 	adc.w	r4, r4, r4
 80028c6:	185b      	adds	r3, r3, r1
 80028c8:	eb44 0402 	adc.w	r4, r4, r2
 80028cc:	00e6      	lsls	r6, r4, #3
 80028ce:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80028d2:	00dd      	lsls	r5, r3, #3
 80028d4:	462b      	mov	r3, r5
 80028d6:	4634      	mov	r4, r6
 80028d8:	185d      	adds	r5, r3, r1
 80028da:	eb44 0602 	adc.w	r6, r4, r2
 80028de:	4628      	mov	r0, r5
 80028e0:	4631      	mov	r1, r6
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	00a5      	lsls	r5, r4, #2
 80028ec:	62fd      	str	r5, [r7, #44]	; 0x2c
 80028ee:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80028f0:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80028f4:	62fd      	str	r5, [r7, #44]	; 0x2c
 80028f6:	009c      	lsls	r4, r3, #2
 80028f8:	62bc      	str	r4, [r7, #40]	; 0x28
 80028fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028fe:	f7fd fc63 	bl	80001c8 <__aeabi_uldivmod>
 8002902:	4603      	mov	r3, r0
 8002904:	460c      	mov	r4, r1
 8002906:	461a      	mov	r2, r3
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <UART_SetConfig+0x35c>)
 800290a:	fba3 1302 	umull	r1, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	011d      	lsls	r5, r3, #4
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	460b      	mov	r3, r1
 800291c:	4614      	mov	r4, r2
 800291e:	18db      	adds	r3, r3, r3
 8002920:	eb44 0404 	adc.w	r4, r4, r4
 8002924:	185b      	adds	r3, r3, r1
 8002926:	eb44 0402 	adc.w	r4, r4, r2
 800292a:	00e0      	lsls	r0, r4, #3
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	00d8      	lsls	r0, r3, #3
 8002938:	60b8      	str	r0, [r7, #8]
 800293a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800293e:	eb13 0801 	adds.w	r8, r3, r1
 8002942:	eb44 0902 	adc.w	r9, r4, r2
 8002946:	4640      	mov	r0, r8
 8002948:	4649      	mov	r1, r9
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f04f 0400 	mov.w	r4, #0
 8002952:	00a6      	lsls	r6, r4, #2
 8002954:	627e      	str	r6, [r7, #36]	; 0x24
 8002956:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8002958:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800295c:	627e      	str	r6, [r7, #36]	; 0x24
 800295e:	009c      	lsls	r4, r3, #2
 8002960:	623c      	str	r4, [r7, #32]
 8002962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002966:	f7fd fc2f 	bl	80001c8 <__aeabi_uldivmod>
 800296a:	4603      	mov	r3, r0
 800296c:	460c      	mov	r4, r1
 800296e:	461a      	mov	r2, r3
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <UART_SetConfig+0x35c>)
 8002972:	fba3 1302 	umull	r1, r3, r3, r2
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2164      	movs	r1, #100	; 0x64
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	3332      	adds	r3, #50	; 0x32
 8002984:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <UART_SetConfig+0x35c>)
 8002986:	fba2 1303 	umull	r1, r3, r2, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002990:	441d      	add	r5, r3
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	4619      	mov	r1, r3
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	460b      	mov	r3, r1
 800299c:	4614      	mov	r4, r2
 800299e:	18db      	adds	r3, r3, r3
 80029a0:	eb44 0404 	adc.w	r4, r4, r4
 80029a4:	185b      	adds	r3, r3, r1
 80029a6:	eb44 0402 	adc.w	r4, r4, r2
 80029aa:	00e0      	lsls	r0, r4, #3
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	00d8      	lsls	r0, r3, #3
 80029b8:	6038      	str	r0, [r7, #0]
 80029ba:	e897 0018 	ldmia.w	r7, {r3, r4}
 80029be:	eb13 0801 	adds.w	r8, r3, r1
 80029c2:	eb44 0902 	adc.w	r9, r4, r2
 80029c6:	4640      	mov	r0, r8
 80029c8:	4649      	mov	r1, r9
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f04f 0400 	mov.w	r4, #0
 80029d2:	00a6      	lsls	r6, r4, #2
 80029d4:	61fe      	str	r6, [r7, #28]
 80029d6:	69fe      	ldr	r6, [r7, #28]
 80029d8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80029dc:	61fe      	str	r6, [r7, #28]
 80029de:	009c      	lsls	r4, r3, #2
 80029e0:	61bc      	str	r4, [r7, #24]
 80029e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e6:	f7fd fbef 	bl	80001c8 <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	461a      	mov	r2, r3
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <UART_SetConfig+0x35c>)
 80029f2:	fba3 1302 	umull	r1, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2164      	movs	r1, #100	; 0x64
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	; 0x32
 8002a04:	4a08      	ldr	r2, [pc, #32]	; (8002a28 <UART_SetConfig+0x35c>)
 8002a06:	fba2 1303 	umull	r1, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	442b      	add	r3, r5
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	6093      	str	r3, [r2, #8]
}
 8002a16:	bf00      	nop
 8002a18:	3744      	adds	r7, #68	; 0x44
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a20:	40011000 	.word	0x40011000
 8002a24:	40011400 	.word	0x40011400
 8002a28:	51eb851f 	.word	0x51eb851f

08002a2c <map>:

uint16_t adcValue;
uint32_t pulse;


uint32_t map(long A,long B,long C,long D,long E){
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]

	return ((A*E)/C);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	fb02 f203 	mul.w	r2, r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <READ_Adc>:

void READ_Adc(){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 8002a58:	480a      	ldr	r0, [pc, #40]	; (8002a84 <READ_Adc+0x30>)
 8002a5a:	f7fd fdf3 	bl	8000644 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1,100000)== HAL_OK){
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <READ_Adc+0x34>)
 8002a60:	4808      	ldr	r0, [pc, #32]	; (8002a84 <READ_Adc+0x30>)
 8002a62:	f7fd fef4 	bl	800084e <HAL_ADC_PollForConversion>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <READ_Adc+0x26>
		adcValue= HAL_ADC_GetValue(&hadc1);
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <READ_Adc+0x30>)
 8002a6e:	f7fd ff79 	bl	8000964 <HAL_ADC_GetValue>
 8002a72:	4603      	mov	r3, r0
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <READ_Adc+0x38>)
 8002a78:	801a      	strh	r2, [r3, #0]

	}
	HAL_ADC_Stop(&hadc1);
 8002a7a:	4802      	ldr	r0, [pc, #8]	; (8002a84 <READ_Adc+0x30>)
 8002a7c:	f7fd feb4 	bl	80007e8 <HAL_ADC_Stop>
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200000bc 	.word	0x200000bc
 8002a88:	000186a0 	.word	0x000186a0
 8002a8c:	20000194 	.word	0x20000194

08002a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a96:	f7fd fd1f 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a9a:	f000 f849 	bl	8002b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a9e:	f000 fa4f 	bl	8002f40 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002aa2:	f000 f8af 	bl	8002c04 <MX_ADC1_Init>
  MX_TIM4_Init();
 8002aa6:	f000 f9a7 	bl	8002df8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002aaa:	f000 f8fd 	bl	8002ca8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002aae:	f000 f94f 	bl	8002d50 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002ab2:	f000 fa1b 	bl	8002eec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	481a      	ldr	r0, [pc, #104]	; (8002b24 <main+0x94>)
 8002aba:	f7ff f897 	bl	8001bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002abe:	2104      	movs	r1, #4
 8002ac0:	4818      	ldr	r0, [pc, #96]	; (8002b24 <main+0x94>)
 8002ac2:	f7ff f893 	bl	8001bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	4816      	ldr	r0, [pc, #88]	; (8002b24 <main+0x94>)
 8002aca:	f7ff f88f 	bl	8001bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002ace:	210c      	movs	r1, #12
 8002ad0:	4814      	ldr	r0, [pc, #80]	; (8002b24 <main+0x94>)
 8002ad2:	f7ff f88b 	bl	8001bec <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  READ_Adc();
 8002ad6:	f7ff ffbd 	bl	8002a54 <READ_Adc>
	  pulse=map(adcValue,0,4095,0,19999);
 8002ada:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <main+0x98>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002aec:	2100      	movs	r1, #0
 8002aee:	f7ff ff9d 	bl	8002a2c <map>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <main+0x9c>)
 8002af6:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,pulse);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <main+0x94>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <main+0x9c>)
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,pulse);
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <main+0x94>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <main+0x9c>)
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pulse);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <main+0x94>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <main+0x9c>)
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pulse);
 8002b16:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <main+0x94>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <main+0x9c>)
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
	  READ_Adc();
 8002b20:	e7d9      	b.n	8002ad6 <main+0x46>
 8002b22:	bf00      	nop
 8002b24:	2000002c 	.word	0x2000002c
 8002b28:	20000194 	.word	0x20000194
 8002b2c:	20000104 	.word	0x20000104

08002b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b094      	sub	sp, #80	; 0x50
 8002b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b36:	f107 0320 	add.w	r3, r7, #32
 8002b3a:	2230      	movs	r2, #48	; 0x30
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fc3e 	bl	80033c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <SystemClock_Config+0xcc>)
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <SystemClock_Config+0xcc>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b62:	6413      	str	r3, [r2, #64]	; 0x40
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <SystemClock_Config+0xcc>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b70:	2300      	movs	r3, #0
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <SystemClock_Config+0xd0>)
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <SystemClock_Config+0xd0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <SystemClock_Config+0xd0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b94:	2310      	movs	r3, #16
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ba4:	23a8      	movs	r3, #168	; 0xa8
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bac:	2304      	movs	r3, #4
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bb0:	f107 0320 	add.w	r3, r7, #32
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe fb81 	bl	80012bc <HAL_RCC_OscConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bc0:	f000 f9e6 	bl	8002f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc4:	230f      	movs	r3, #15
 8002bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	2105      	movs	r1, #5
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fde2 	bl	80017ac <HAL_RCC_ClockConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002bee:	f000 f9cf 	bl	8002f90 <Error_Handler>
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3750      	adds	r7, #80	; 0x50
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40007000 	.word	0x40007000

08002c04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c16:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <MX_ADC1_Init+0x9c>)
 8002c1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <MX_ADC1_Init+0xa0>)
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c50:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c56:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c64:	480d      	ldr	r0, [pc, #52]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c66:	f7fd fca9 	bl	80005bc <HAL_ADC_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c70:	f000 f98e 	bl	8002f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c80:	463b      	mov	r3, r7
 8002c82:	4619      	mov	r1, r3
 8002c84:	4805      	ldr	r0, [pc, #20]	; (8002c9c <MX_ADC1_Init+0x98>)
 8002c86:	f7fd fe7b 	bl	8000980 <HAL_ADC_ConfigChannel>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c90:	f000 f97e 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200000bc 	.word	0x200000bc
 8002ca0:	40012000 	.word	0x40012000
 8002ca4:	0f000001 	.word	0x0f000001

08002ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fb82 	bl	80033c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002cd8:	4b1c      	ldr	r3, [pc, #112]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002cec:	2303      	movs	r3, #3
 8002cee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d04:	2301      	movs	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	4619      	mov	r1, r3
 8002d16:	480d      	ldr	r0, [pc, #52]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002d18:	f7ff f830 	bl	8001d7c <HAL_TIM_Encoder_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002d22:	f000 f935 	bl	8002f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4806      	ldr	r0, [pc, #24]	; (8002d4c <MX_TIM2_Init+0xa4>)
 8002d34:	f7ff fc00 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d3e:	f000 f927 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d42:	bf00      	nop
 8002d44:	3730      	adds	r7, #48	; 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000108 	.word	0x20000108

08002d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d56:	f107 030c 	add.w	r3, r7, #12
 8002d5a:	2224      	movs	r2, #36	; 0x24
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fb2e 	bl	80033c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d6c:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002d6e:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <MX_TIM3_Init+0xa4>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d72:	4b1f      	ldr	r3, [pc, #124]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d92:	2303      	movs	r3, #3
 8002d94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002daa:	2301      	movs	r3, #1
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002dae:	2300      	movs	r3, #0
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002dbe:	f7fe ffdd 	bl	8001d7c <HAL_TIM_Encoder_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002dc8:	f000 f8e2 	bl	8002f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_TIM3_Init+0xa0>)
 8002dda:	f7ff fbad 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002de4:	f000 f8d4 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	3730      	adds	r7, #48	; 0x30
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000074 	.word	0x20000074
 8002df4:	40000400 	.word	0x40000400

08002df8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dfe:	f107 0320 	add.w	r3, r7, #32
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	611a      	str	r2, [r3, #16]
 8002e16:	615a      	str	r2, [r3, #20]
 8002e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e1a:	4b32      	ldr	r3, [pc, #200]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e1c:	4a32      	ldr	r2, [pc, #200]	; (8002ee8 <MX_TIM4_Init+0xf0>)
 8002e1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e22:	2207      	movs	r2, #7
 8002e24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e26:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002e2c:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002e32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e40:	4828      	ldr	r0, [pc, #160]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e42:	f7fe fe83 	bl	8001b4c <HAL_TIM_PWM_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002e4c:	f000 f8a0 	bl	8002f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e58:	f107 0320 	add.w	r3, r7, #32
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4821      	ldr	r0, [pc, #132]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e60:	f7ff fb6a 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002e6a:	f000 f891 	bl	8002f90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e6e:	2360      	movs	r3, #96	; 0x60
 8002e70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2200      	movs	r2, #0
 8002e82:	4619      	mov	r1, r3
 8002e84:	4817      	ldr	r0, [pc, #92]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e86:	f7ff f81f 	bl	8001ec8 <HAL_TIM_PWM_ConfigChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002e90:	f000 f87e 	bl	8002f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2204      	movs	r2, #4
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002e9c:	f7ff f814 	bl	8001ec8 <HAL_TIM_PWM_ConfigChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002ea6:	f000 f873 	bl	8002f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2208      	movs	r2, #8
 8002eae:	4619      	mov	r1, r3
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002eb2:	f7ff f809 	bl	8001ec8 <HAL_TIM_PWM_ConfigChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002ebc:	f000 f868 	bl	8002f90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4807      	ldr	r0, [pc, #28]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002ec8:	f7fe fffe 	bl	8001ec8 <HAL_TIM_PWM_ConfigChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8002ed2:	f000 f85d 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ed6:	4803      	ldr	r0, [pc, #12]	; (8002ee4 <MX_TIM4_Init+0xec>)
 8002ed8:	f000 f966 	bl	80031a8 <HAL_TIM_MspPostInit>

}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	2000002c 	.word	0x2000002c
 8002ee8:	40000800 	.word	0x40000800

08002eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <MX_USART2_UART_Init+0x50>)
 8002ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <MX_USART2_UART_Init+0x4c>)
 8002f24:	f7ff fb84 	bl	8002630 <HAL_UART_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f2e:	f000 f82f 	bl	8002f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000150 	.word	0x20000150
 8002f3c:	40004400 	.word	0x40004400

08002f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <MX_GPIO_Init+0x4c>)
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <MX_GPIO_Init+0x4c>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <MX_GPIO_Init+0x4c>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <MX_GPIO_Init+0x4c>)
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <MX_GPIO_Init+0x4c>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <MX_GPIO_Init+0x4c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]

}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <Error_Handler+0x6>

08002f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <HAL_MspInit+0x4c>)
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_MspInit+0x4c>)
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fac:	6453      	str	r3, [r2, #68]	; 0x44
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <HAL_MspInit+0x4c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4a09      	ldr	r2, [pc, #36]	; (8002fe4 <HAL_MspInit+0x4c>)
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_MspInit+0x4c>)
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_MspInit+0x4c>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_ADC_MspInit+0x7c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d127      	bne.n	800305a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_ADC_MspInit+0x80>)
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_ADC_MspInit+0x80>)
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6453      	str	r3, [r2, #68]	; 0x44
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <HAL_ADC_MspInit+0x80>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <HAL_ADC_MspInit+0x80>)
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_ADC_MspInit+0x80>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_ADC_MspInit+0x80>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003042:	2301      	movs	r3, #1
 8003044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003046:	2303      	movs	r3, #3
 8003048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	4619      	mov	r1, r3
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <HAL_ADC_MspInit+0x84>)
 8003056:	f7fd ff97 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800305a:	bf00      	nop
 800305c:	3728      	adds	r7, #40	; 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40012000 	.word	0x40012000
 8003068:	40023800 	.word	0x40023800
 800306c:	40020000 	.word	0x40020000

08003070 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003090:	d12c      	bne.n	80030ec <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	4a30      	ldr	r2, [pc, #192]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	4a29      	ldr	r2, [pc, #164]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030b4:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80030ca:	2322      	movs	r3, #34	; 0x22
 80030cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030da:	2301      	movs	r3, #1
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 031c 	add.w	r3, r7, #28
 80030e2:	4619      	mov	r1, r3
 80030e4:	481d      	ldr	r0, [pc, #116]	; (800315c <HAL_TIM_Encoder_MspInit+0xec>)
 80030e6:	f7fd ff4f 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030ea:	e030      	b.n	800314e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_TIM_Encoder_MspInit+0xf0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d12b      	bne.n	800314e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4a10      	ldr	r2, [pc, #64]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800312e:	23c0      	movs	r3, #192	; 0xc0
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313a:	2300      	movs	r3, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800313e:	2302      	movs	r3, #2
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	4804      	ldr	r0, [pc, #16]	; (800315c <HAL_TIM_Encoder_MspInit+0xec>)
 800314a:	f7fd ff1d 	bl	8000f88 <HAL_GPIO_Init>
}
 800314e:	bf00      	nop
 8003150:	3730      	adds	r7, #48	; 0x30
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800
 800315c:	40020000 	.word	0x40020000
 8003160:	40000400 	.word	0x40000400

08003164 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10d      	bne.n	8003192 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_TIM_PWM_MspInit+0x40>)
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_TIM_PWM_MspInit+0x40>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	6413      	str	r3, [r2, #64]	; 0x40
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <HAL_TIM_PWM_MspInit+0x40>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40023800 	.word	0x40023800

080031a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a12      	ldr	r2, [pc, #72]	; (8003210 <HAL_TIM_MspPostInit+0x68>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d11e      	bne.n	8003208 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	4a11      	ldr	r2, [pc, #68]	; (8003214 <HAL_TIM_MspPostInit+0x6c>)
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_TIM_MspPostInit+0x6c>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_TIM_MspPostInit+0x6c>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80031e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80031ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031f8:	2302      	movs	r3, #2
 80031fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	4619      	mov	r1, r3
 8003202:	4805      	ldr	r0, [pc, #20]	; (8003218 <HAL_TIM_MspPostInit+0x70>)
 8003204:	f7fd fec0 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003208:	bf00      	nop
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40000800 	.word	0x40000800
 8003214:	40023800 	.word	0x40023800
 8003218:	40020c00 	.word	0x40020c00

0800321c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <HAL_UART_MspInit+0x84>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d12b      	bne.n	8003296 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_UART_MspInit+0x88>)
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_UART_MspInit+0x88>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_UART_MspInit+0x88>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <HAL_UART_MspInit+0x88>)
 8003260:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_UART_MspInit+0x88>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_UART_MspInit+0x88>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003276:	230c      	movs	r3, #12
 8003278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003286:	2307      	movs	r3, #7
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	4619      	mov	r1, r3
 8003290:	4805      	ldr	r0, [pc, #20]	; (80032a8 <HAL_UART_MspInit+0x8c>)
 8003292:	f7fd fe79 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40004400 	.word	0x40004400
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40020000 	.word	0x40020000

080032ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <NMI_Handler+0x4>

080032b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <HardFault_Handler+0x4>

080032b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <MemManage_Handler+0x4>

080032be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032c2:	e7fe      	b.n	80032c2 <BusFault_Handler+0x4>

080032c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <UsageFault_Handler+0x4>

080032ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f8:	f7fd f940 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}

08003300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003304:	4a06      	ldr	r2, [pc, #24]	; (8003320 <SystemInit+0x20>)
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <SystemInit+0x20>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800335c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003328:	480d      	ldr	r0, [pc, #52]	; (8003360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800332a:	490e      	ldr	r1, [pc, #56]	; (8003364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800332c:	4a0e      	ldr	r2, [pc, #56]	; (8003368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003330:	e002      	b.n	8003338 <LoopCopyDataInit>

08003332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003336:	3304      	adds	r3, #4

08003338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800333a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800333c:	d3f9      	bcc.n	8003332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333e:	4a0b      	ldr	r2, [pc, #44]	; (800336c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003340:	4c0b      	ldr	r4, [pc, #44]	; (8003370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003344:	e001      	b.n	800334a <LoopFillZerobss>

08003346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003348:	3204      	adds	r2, #4

0800334a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800334a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800334c:	d3fb      	bcc.n	8003346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800334e:	f7ff ffd7 	bl	8003300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003352:	f000 f811 	bl	8003378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003356:	f7ff fb9b 	bl	8002a90 <main>
  bx  lr    
 800335a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800335c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003364:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003368:	08003410 	.word	0x08003410
  ldr r2, =_sbss
 800336c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003370:	20000198 	.word	0x20000198

08003374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003374:	e7fe      	b.n	8003374 <ADC_IRQHandler>
	...

08003378 <__libc_init_array>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	4e0d      	ldr	r6, [pc, #52]	; (80033b0 <__libc_init_array+0x38>)
 800337c:	4c0d      	ldr	r4, [pc, #52]	; (80033b4 <__libc_init_array+0x3c>)
 800337e:	1ba4      	subs	r4, r4, r6
 8003380:	10a4      	asrs	r4, r4, #2
 8003382:	2500      	movs	r5, #0
 8003384:	42a5      	cmp	r5, r4
 8003386:	d109      	bne.n	800339c <__libc_init_array+0x24>
 8003388:	4e0b      	ldr	r6, [pc, #44]	; (80033b8 <__libc_init_array+0x40>)
 800338a:	4c0c      	ldr	r4, [pc, #48]	; (80033bc <__libc_init_array+0x44>)
 800338c:	f000 f820 	bl	80033d0 <_init>
 8003390:	1ba4      	subs	r4, r4, r6
 8003392:	10a4      	asrs	r4, r4, #2
 8003394:	2500      	movs	r5, #0
 8003396:	42a5      	cmp	r5, r4
 8003398:	d105      	bne.n	80033a6 <__libc_init_array+0x2e>
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033a0:	4798      	blx	r3
 80033a2:	3501      	adds	r5, #1
 80033a4:	e7ee      	b.n	8003384 <__libc_init_array+0xc>
 80033a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033aa:	4798      	blx	r3
 80033ac:	3501      	adds	r5, #1
 80033ae:	e7f2      	b.n	8003396 <__libc_init_array+0x1e>
 80033b0:	08003408 	.word	0x08003408
 80033b4:	08003408 	.word	0x08003408
 80033b8:	08003408 	.word	0x08003408
 80033bc:	0800340c 	.word	0x0800340c

080033c0 <memset>:
 80033c0:	4402      	add	r2, r0
 80033c2:	4603      	mov	r3, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d100      	bne.n	80033ca <memset+0xa>
 80033c8:	4770      	bx	lr
 80033ca:	f803 1b01 	strb.w	r1, [r3], #1
 80033ce:	e7f9      	b.n	80033c4 <memset+0x4>

080033d0 <_init>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr

080033dc <_fini>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr
