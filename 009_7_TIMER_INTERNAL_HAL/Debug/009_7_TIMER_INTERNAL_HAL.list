
009_7_TIMER_INTERNAL_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001be0  08001be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000c0  200000c0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00007be0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000010b9  00000000  00000000  00027c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008e8  00000000  00000000  00028cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000850  00000000  00000000  000295c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000044ac  00000000  00000000  00029e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002e80  00000000  00000000  0002e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003113c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002540  00000000  00000000  000311b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001bc8 	.word	0x08001bc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001bc8 	.word	0x08001bc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f90b 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f001 fa6c 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f915 	bl	800076a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f8eb 	bl	8000732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	db0a      	blt.n	800064a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	490d      	ldr	r1, [pc, #52]	; (800066c <__NVIC_SetPriority+0x4c>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	0112      	lsls	r2, r2, #4
 8000640:	b2d2      	uxtb	r2, r2
 8000642:	440b      	add	r3, r1
 8000644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000648:	e00a      	b.n	8000660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <__NVIC_SetPriority+0x50>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	3b04      	subs	r3, #4
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	0112      	lsls	r2, r2, #4
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	440b      	add	r3, r1
 800065e:	761a      	strb	r2, [r3, #24]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000674:	b480      	push	{r7}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	f1c3 0307 	rsb	r3, r3, #7
 800068e:	2b04      	cmp	r3, #4
 8000690:	bf28      	it	cs
 8000692:	2304      	movcs	r3, #4
 8000694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3304      	adds	r3, #4
 800069a:	2b06      	cmp	r3, #6
 800069c:	d902      	bls.n	80006a4 <NVIC_EncodePriority+0x30>
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	e000      	b.n	80006a6 <NVIC_EncodePriority+0x32>
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	2201      	movs	r2, #1
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	401a      	ands	r2, r3
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	2101      	movs	r1, #1
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	1e59      	subs	r1, r3, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4313      	orrs	r3, r2
         );
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e8:	d301      	bcc.n	80006ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00f      	b.n	800070e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <SysTick_Config+0x40>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f6:	210f      	movs	r1, #15
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f7ff ff90 	bl	8000620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SysTick_Config+0x40>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <SysTick_Config+0x40>)
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff49 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff5e 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ff90 	bl	8000674 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff5f 	bl	8000620 <__NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffb0 	bl	80006d8 <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e264      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d075      	beq.n	800088e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007a2:	4ba3      	ldr	r3, [pc, #652]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	f003 030c 	and.w	r3, r3, #12
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d00c      	beq.n	80007c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007ae:	4ba0      	ldr	r3, [pc, #640]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	d112      	bne.n	80007e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007ba:	4b9d      	ldr	r3, [pc, #628]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80007c6:	d10b      	bne.n	80007e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007c8:	4b99      	ldr	r3, [pc, #612]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d05b      	beq.n	800088c <HAL_RCC_OscConfig+0x108>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d157      	bne.n	800088c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	e23f      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e8:	d106      	bne.n	80007f8 <HAL_RCC_OscConfig+0x74>
 80007ea:	4a91      	ldr	r2, [pc, #580]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80007ec:	4b90      	ldr	r3, [pc, #576]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e01d      	b.n	8000834 <HAL_RCC_OscConfig+0xb0>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000800:	d10c      	bne.n	800081c <HAL_RCC_OscConfig+0x98>
 8000802:	4a8b      	ldr	r2, [pc, #556]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000804:	4b8a      	ldr	r3, [pc, #552]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4a88      	ldr	r2, [pc, #544]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000810:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e00b      	b.n	8000834 <HAL_RCC_OscConfig+0xb0>
 800081c:	4a84      	ldr	r2, [pc, #528]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 800081e:	4b84      	ldr	r3, [pc, #528]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4a81      	ldr	r2, [pc, #516]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 800082a:	4b81      	ldr	r3, [pc, #516]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d013      	beq.n	8000864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800083c:	f7ff feb2 	bl	80005a4 <HAL_GetTick>
 8000840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000842:	e008      	b.n	8000856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000844:	f7ff feae 	bl	80005a4 <HAL_GetTick>
 8000848:	4602      	mov	r2, r0
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2b64      	cmp	r3, #100	; 0x64
 8000850:	d901      	bls.n	8000856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000852:	2303      	movs	r3, #3
 8000854:	e204      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000856:	4b76      	ldr	r3, [pc, #472]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f0      	beq.n	8000844 <HAL_RCC_OscConfig+0xc0>
 8000862:	e014      	b.n	800088e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000864:	f7ff fe9e 	bl	80005a4 <HAL_GetTick>
 8000868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086a:	e008      	b.n	800087e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800086c:	f7ff fe9a 	bl	80005a4 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b64      	cmp	r3, #100	; 0x64
 8000878:	d901      	bls.n	800087e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e1f0      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087e:	4b6c      	ldr	r3, [pc, #432]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f0      	bne.n	800086c <HAL_RCC_OscConfig+0xe8>
 800088a:	e000      	b.n	800088e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800088c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d063      	beq.n	8000962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800089a:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	f003 030c 	and.w	r3, r3, #12
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00b      	beq.n	80008be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ae:	2b08      	cmp	r3, #8
 80008b0:	d11c      	bne.n	80008ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008b2:	4b5f      	ldr	r3, [pc, #380]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d116      	bne.n	80008ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008be:	4b5c      	ldr	r3, [pc, #368]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d005      	beq.n	80008d6 <HAL_RCC_OscConfig+0x152>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d001      	beq.n	80008d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e1c4      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d6:	4956      	ldr	r1, [pc, #344]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80008d8:	4b55      	ldr	r3, [pc, #340]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ea:	e03a      	b.n	8000962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d020      	beq.n	8000936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008f4:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <HAL_RCC_OscConfig+0x2b0>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008fa:	f7ff fe53 	bl	80005a4 <HAL_GetTick>
 80008fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	e008      	b.n	8000914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000902:	f7ff fe4f 	bl	80005a4 <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d901      	bls.n	8000914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000910:	2303      	movs	r3, #3
 8000912:	e1a5      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000914:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 0302 	and.w	r3, r3, #2
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f0      	beq.n	8000902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000920:	4943      	ldr	r1, [pc, #268]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000922:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]
 8000934:	e015      	b.n	8000962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000936:	4b3f      	ldr	r3, [pc, #252]	; (8000a34 <HAL_RCC_OscConfig+0x2b0>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800093c:	f7ff fe32 	bl	80005a4 <HAL_GetTick>
 8000940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000942:	e008      	b.n	8000956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000944:	f7ff fe2e 	bl	80005a4 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d901      	bls.n	8000956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e184      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f0      	bne.n	8000944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d030      	beq.n	80009d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d016      	beq.n	80009a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <HAL_RCC_OscConfig+0x2b4>)
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800097c:	f7ff fe12 	bl	80005a4 <HAL_GetTick>
 8000980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000982:	e008      	b.n	8000996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000984:	f7ff fe0e 	bl	80005a4 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	2b02      	cmp	r3, #2
 8000990:	d901      	bls.n	8000996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000992:	2303      	movs	r3, #3
 8000994:	e164      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000996:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f0      	beq.n	8000984 <HAL_RCC_OscConfig+0x200>
 80009a2:	e015      	b.n	80009d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <HAL_RCC_OscConfig+0x2b4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009aa:	f7ff fdfb 	bl	80005a4 <HAL_GetTick>
 80009ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009b0:	e008      	b.n	80009c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b2:	f7ff fdf7 	bl	80005a4 <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d901      	bls.n	80009c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80009c0:	2303      	movs	r3, #3
 80009c2:	e14d      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80009c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d1f0      	bne.n	80009b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 80a0 	beq.w	8000b1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10f      	bne.n	8000a0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_RCC_OscConfig+0x2ac>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_RCC_OscConfig+0x2b8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d121      	bne.n	8000a5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_RCC_OscConfig+0x2b8>)
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <HAL_RCC_OscConfig+0x2b8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a26:	f7ff fdbd 	bl	80005a4 <HAL_GetTick>
 8000a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a2c:	e011      	b.n	8000a52 <HAL_RCC_OscConfig+0x2ce>
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	42470000 	.word	0x42470000
 8000a38:	42470e80 	.word	0x42470e80
 8000a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a40:	f7ff fdb0 	bl	80005a4 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d901      	bls.n	8000a52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e106      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a52:	4b85      	ldr	r3, [pc, #532]	; (8000c68 <HAL_RCC_OscConfig+0x4e4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f0      	beq.n	8000a40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d106      	bne.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
 8000a66:	4a81      	ldr	r2, [pc, #516]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a68:	4b80      	ldr	r3, [pc, #512]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6713      	str	r3, [r2, #112]	; 0x70
 8000a72:	e01c      	b.n	8000aae <HAL_RCC_OscConfig+0x32a>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	d10c      	bne.n	8000a96 <HAL_RCC_OscConfig+0x312>
 8000a7c:	4a7b      	ldr	r2, [pc, #492]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a7e:	4b7b      	ldr	r3, [pc, #492]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6713      	str	r3, [r2, #112]	; 0x70
 8000a88:	4a78      	ldr	r2, [pc, #480]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a8a:	4b78      	ldr	r3, [pc, #480]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6713      	str	r3, [r2, #112]	; 0x70
 8000a94:	e00b      	b.n	8000aae <HAL_RCC_OscConfig+0x32a>
 8000a96:	4a75      	ldr	r2, [pc, #468]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a98:	4b74      	ldr	r3, [pc, #464]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a9c:	f023 0301 	bic.w	r3, r3, #1
 8000aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8000aa2:	4a72      	ldr	r2, [pc, #456]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000aa4:	4b71      	ldr	r3, [pc, #452]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000aa8:	f023 0304 	bic.w	r3, r3, #4
 8000aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d015      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ab6:	f7ff fd75 	bl	80005a4 <HAL_GetTick>
 8000aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000abc:	e00a      	b.n	8000ad4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000abe:	f7ff fd71 	bl	80005a4 <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d901      	bls.n	8000ad4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e0c5      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad4:	4b65      	ldr	r3, [pc, #404]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0ee      	beq.n	8000abe <HAL_RCC_OscConfig+0x33a>
 8000ae0:	e014      	b.n	8000b0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae2:	f7ff fd5f 	bl	80005a4 <HAL_GetTick>
 8000ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae8:	e00a      	b.n	8000b00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aea:	f7ff fd5b 	bl	80005a4 <HAL_GetTick>
 8000aee:	4602      	mov	r2, r0
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d901      	bls.n	8000b00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e0af      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b00:	4b5a      	ldr	r3, [pc, #360]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1ee      	bne.n	8000aea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d105      	bne.n	8000b1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b12:	4a56      	ldr	r2, [pc, #344]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000b14:	4b55      	ldr	r3, [pc, #340]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 809b 	beq.w	8000c5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b28:	4b50      	ldr	r3, [pc, #320]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 030c 	and.w	r3, r3, #12
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d05c      	beq.n	8000bee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d141      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b3c:	4b4c      	ldr	r3, [pc, #304]	; (8000c70 <HAL_RCC_OscConfig+0x4ec>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b42:	f7ff fd2f 	bl	80005a4 <HAL_GetTick>
 8000b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b48:	e008      	b.n	8000b5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4a:	f7ff fd2b 	bl	80005a4 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d901      	bls.n	8000b5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e081      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f0      	bne.n	8000b4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b68:	4940      	ldr	r1, [pc, #256]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	69da      	ldr	r2, [r3, #28]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a1b      	ldr	r3, [r3, #32]
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	3b01      	subs	r3, #1
 8000b84:	041b      	lsls	r3, r3, #16
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8c:	061b      	lsls	r3, r3, #24
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b92:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <HAL_RCC_OscConfig+0x4ec>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b98:	f7ff fd04 	bl	80005a4 <HAL_GetTick>
 8000b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b9e:	e008      	b.n	8000bb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba0:	f7ff fd00 	bl	80005a4 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e056      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f0      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x41c>
 8000bbe:	e04e      	b.n	8000c5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <HAL_RCC_OscConfig+0x4ec>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fced 	bl	80005a4 <HAL_GetTick>
 8000bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bcc:	e008      	b.n	8000be0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fce9 	bl	80005a4 <HAL_GetTick>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d901      	bls.n	8000be0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e03f      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f0      	bne.n	8000bce <HAL_RCC_OscConfig+0x44a>
 8000bec:	e037      	b.n	8000c5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e032      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_RCC_OscConfig+0x4e8>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d028      	beq.n	8000c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d121      	bne.n	8000c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d11a      	bne.n	8000c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d111      	bne.n	8000c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	085b      	lsrs	r3, r3, #1
 8000c42:	3b01      	subs	r3, #1
 8000c44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d107      	bne.n	8000c5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d001      	beq.n	8000c5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40007000 	.word	0x40007000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	42470060 	.word	0x42470060

08000c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e0cc      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c88:	4b68      	ldr	r3, [pc, #416]	; (8000e2c <HAL_RCC_ClockConfig+0x1b8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0207 	and.w	r2, r3, #7
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d20c      	bcs.n	8000cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c96:	4b65      	ldr	r3, [pc, #404]	; (8000e2c <HAL_RCC_ClockConfig+0x1b8>)
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c9e:	4b63      	ldr	r3, [pc, #396]	; (8000e2c <HAL_RCC_ClockConfig+0x1b8>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0207 	and.w	r2, r3, #7
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d001      	beq.n	8000cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e0b8      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d020      	beq.n	8000cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cc8:	4a59      	ldr	r2, [pc, #356]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ce0:	4a53      	ldr	r2, [pc, #332]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000ce2:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cec:	4950      	ldr	r1, [pc, #320]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000cee:	4b50      	ldr	r3, [pc, #320]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d044      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d107      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d12:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d119      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e07f      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d003      	beq.n	8000d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d107      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d32:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e06f      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d42:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e067      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d52:	4937      	ldr	r1, [pc, #220]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f023 0203 	bic.w	r2, r3, #3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d64:	f7ff fc1e 	bl	80005a4 <HAL_GetTick>
 8000d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d6a:	e00a      	b.n	8000d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d6c:	f7ff fc1a 	bl	80005a4 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e04f      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d82:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 020c 	and.w	r2, r3, #12
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d1eb      	bne.n	8000d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_RCC_ClockConfig+0x1b8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0207 	and.w	r2, r3, #7
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d90c      	bls.n	8000dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <HAL_RCC_ClockConfig+0x1b8>)
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000daa:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <HAL_RCC_ClockConfig+0x1b8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0207 	and.w	r2, r3, #7
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d001      	beq.n	8000dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e032      	b.n	8000e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d008      	beq.n	8000dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc8:	4919      	ldr	r1, [pc, #100]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d009      	beq.n	8000dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000de6:	4912      	ldr	r1, [pc, #72]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dfa:	f000 f821 	bl	8000e40 <HAL_RCC_GetSysClockFreq>
 8000dfe:	4601      	mov	r1, r0
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_RCC_ClockConfig+0x1bc>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	091b      	lsrs	r3, r3, #4
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_RCC_ClockConfig+0x1c0>)
 8000e0c:	5cd3      	ldrb	r3, [r2, r3]
 8000e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_RCC_ClockConfig+0x1c4>)
 8000e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_RCC_ClockConfig+0x1c8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb7e 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00
 8000e30:	40023800 	.word	0x40023800
 8000e34:	08001be0 	.word	0x08001be0
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000000 	.word	0x20000000

08000e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e44:	b087      	sub	sp, #28
 8000e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60fa      	str	r2, [r7, #12]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	617a      	str	r2, [r7, #20]
 8000e50:	2200      	movs	r2, #0
 8000e52:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8000e54:	2200      	movs	r2, #0
 8000e56:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e58:	4a51      	ldr	r2, [pc, #324]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e5a:	6892      	ldr	r2, [r2, #8]
 8000e5c:	f002 020c 	and.w	r2, r2, #12
 8000e60:	2a04      	cmp	r2, #4
 8000e62:	d007      	beq.n	8000e74 <HAL_RCC_GetSysClockFreq+0x34>
 8000e64:	2a08      	cmp	r2, #8
 8000e66:	d008      	beq.n	8000e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	f040 8090 	bne.w	8000f8e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x164>)
 8000e70:	613b      	str	r3, [r7, #16]
       break;
 8000e72:	e08f      	b.n	8000f94 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e74:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x168>)
 8000e76:	613b      	str	r3, [r7, #16]
      break;
 8000e78:	e08c      	b.n	8000f94 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e7a:	4a49      	ldr	r2, [pc, #292]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e7c:	6852      	ldr	r2, [r2, #4]
 8000e7e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e82:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e84:	4a46      	ldr	r2, [pc, #280]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e86:	6852      	ldr	r2, [r2, #4]
 8000e88:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000e8c:	2a00      	cmp	r2, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	099b      	lsrs	r3, r3, #6
 8000e96:	f04f 0400 	mov.w	r4, #0
 8000e9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	ea03 0301 	and.w	r3, r3, r1
 8000ea6:	ea04 0402 	and.w	r4, r4, r2
 8000eaa:	4a3f      	ldr	r2, [pc, #252]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x168>)
 8000eac:	fb02 f104 	mul.w	r1, r2, r4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	fb02 f203 	mul.w	r2, r2, r3
 8000eb6:	440a      	add	r2, r1
 8000eb8:	493b      	ldr	r1, [pc, #236]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0x168>)
 8000eba:	fba3 0101 	umull	r0, r1, r3, r1
 8000ebe:	1853      	adds	r3, r2, r1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f04f 0400 	mov.w	r4, #0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	f7ff f97c 	bl	80001c8 <__aeabi_uldivmod>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	e04c      	b.n	8000f72 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ed8:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8000eda:	6852      	ldr	r2, [r2, #4]
 8000edc:	0992      	lsrs	r2, r2, #6
 8000ede:	4611      	mov	r1, r2
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	f240 15ff 	movw	r5, #511	; 0x1ff
 8000ee8:	f04f 0600 	mov.w	r6, #0
 8000eec:	ea05 0501 	and.w	r5, r5, r1
 8000ef0:	ea06 0602 	and.w	r6, r6, r2
 8000ef4:	4629      	mov	r1, r5
 8000ef6:	4632      	mov	r2, r6
 8000ef8:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8000efc:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8000f00:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8000f04:	4651      	mov	r1, sl
 8000f06:	465a      	mov	r2, fp
 8000f08:	46aa      	mov	sl, r5
 8000f0a:	46b3      	mov	fp, r6
 8000f0c:	4655      	mov	r5, sl
 8000f0e:	465e      	mov	r6, fp
 8000f10:	1b4d      	subs	r5, r1, r5
 8000f12:	eb62 0606 	sbc.w	r6, r2, r6
 8000f16:	4629      	mov	r1, r5
 8000f18:	4632      	mov	r2, r6
 8000f1a:	0194      	lsls	r4, r2, #6
 8000f1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8000f20:	018b      	lsls	r3, r1, #6
 8000f22:	1a5b      	subs	r3, r3, r1
 8000f24:	eb64 0402 	sbc.w	r4, r4, r2
 8000f28:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8000f2c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8000f30:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8000f34:	4643      	mov	r3, r8
 8000f36:	464c      	mov	r4, r9
 8000f38:	4655      	mov	r5, sl
 8000f3a:	465e      	mov	r6, fp
 8000f3c:	18ed      	adds	r5, r5, r3
 8000f3e:	eb46 0604 	adc.w	r6, r6, r4
 8000f42:	462b      	mov	r3, r5
 8000f44:	4634      	mov	r4, r6
 8000f46:	02a2      	lsls	r2, r4, #10
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f04f 0400 	mov.w	r4, #0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	f7ff f92e 	bl	80001c8 <__aeabi_uldivmod>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	460c      	mov	r4, r1
 8000f70:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	0c1b      	lsrs	r3, r3, #16
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	613b      	str	r3, [r7, #16]
      break;
 8000f8c:	e002      	b.n	8000f94 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x164>)
 8000f90:	613b      	str	r3, [r7, #16]
      break;
 8000f92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f94:	693b      	ldr	r3, [r7, #16]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	00f42400 	.word	0x00f42400
 8000fa8:	017d7840 	.word	0x017d7840

08000fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e041      	b.n	8001042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d106      	bne.n	8000fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fd30 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f000 f994 	bl	8001318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d001      	beq.n	8001064 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e046      	b.n	80010f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a23      	ldr	r2, [pc, #140]	; (8001100 <HAL_TIM_Base_Start+0xb4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d022      	beq.n	80010bc <HAL_TIM_Base_Start+0x70>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800107e:	d01d      	beq.n	80010bc <HAL_TIM_Base_Start+0x70>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <HAL_TIM_Base_Start+0xb8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d018      	beq.n	80010bc <HAL_TIM_Base_Start+0x70>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1e      	ldr	r2, [pc, #120]	; (8001108 <HAL_TIM_Base_Start+0xbc>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d013      	beq.n	80010bc <HAL_TIM_Base_Start+0x70>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <HAL_TIM_Base_Start+0xc0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00e      	beq.n	80010bc <HAL_TIM_Base_Start+0x70>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <HAL_TIM_Base_Start+0xc4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d009      	beq.n	80010bc <HAL_TIM_Base_Start+0x70>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_TIM_Base_Start+0xc8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d004      	beq.n	80010bc <HAL_TIM_Base_Start+0x70>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_TIM_Base_Start+0xcc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d111      	bne.n	80010e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d010      	beq.n	80010f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	f042 0201 	orr.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80010de:	e007      	b.n	80010f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40010000 	.word	0x40010000
 8001104:	40000400 	.word	0x40000400
 8001108:	40000800 	.word	0x40000800
 800110c:	40000c00 	.word	0x40000c00
 8001110:	40010400 	.word	0x40010400
 8001114:	40014000 	.word	0x40014000
 8001118:	40001800 	.word	0x40001800

0800111c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <HAL_TIM_ConfigClockSource+0x1c>
 8001134:	2302      	movs	r3, #2
 8001136:	e0a9      	b.n	800128c <HAL_TIM_ConfigClockSource+0x170>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2202      	movs	r2, #2
 8001144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800115e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b40      	cmp	r3, #64	; 0x40
 800116e:	d067      	beq.n	8001240 <HAL_TIM_ConfigClockSource+0x124>
 8001170:	2b40      	cmp	r3, #64	; 0x40
 8001172:	d80b      	bhi.n	800118c <HAL_TIM_ConfigClockSource+0x70>
 8001174:	2b10      	cmp	r3, #16
 8001176:	d073      	beq.n	8001260 <HAL_TIM_ConfigClockSource+0x144>
 8001178:	2b10      	cmp	r3, #16
 800117a:	d802      	bhi.n	8001182 <HAL_TIM_ConfigClockSource+0x66>
 800117c:	2b00      	cmp	r3, #0
 800117e:	d06f      	beq.n	8001260 <HAL_TIM_ConfigClockSource+0x144>
 8001180:	e077      	b.n	8001272 <HAL_TIM_ConfigClockSource+0x156>
 8001182:	2b20      	cmp	r3, #32
 8001184:	d06c      	beq.n	8001260 <HAL_TIM_ConfigClockSource+0x144>
 8001186:	2b30      	cmp	r3, #48	; 0x30
 8001188:	d06a      	beq.n	8001260 <HAL_TIM_ConfigClockSource+0x144>
 800118a:	e072      	b.n	8001272 <HAL_TIM_ConfigClockSource+0x156>
 800118c:	2b70      	cmp	r3, #112	; 0x70
 800118e:	d00d      	beq.n	80011ac <HAL_TIM_ConfigClockSource+0x90>
 8001190:	2b70      	cmp	r3, #112	; 0x70
 8001192:	d804      	bhi.n	800119e <HAL_TIM_ConfigClockSource+0x82>
 8001194:	2b50      	cmp	r3, #80	; 0x50
 8001196:	d033      	beq.n	8001200 <HAL_TIM_ConfigClockSource+0xe4>
 8001198:	2b60      	cmp	r3, #96	; 0x60
 800119a:	d041      	beq.n	8001220 <HAL_TIM_ConfigClockSource+0x104>
 800119c:	e069      	b.n	8001272 <HAL_TIM_ConfigClockSource+0x156>
 800119e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011a2:	d069      	beq.n	8001278 <HAL_TIM_ConfigClockSource+0x15c>
 80011a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a8:	d017      	beq.n	80011da <HAL_TIM_ConfigClockSource+0xbe>
 80011aa:	e062      	b.n	8001272 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6899      	ldr	r1, [r3, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f000 fa50 	bl	8001660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80011ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	609a      	str	r2, [r3, #8]
      break;
 80011d8:	e04f      	b.n	800127a <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	6899      	ldr	r1, [r3, #8]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f000 fa39 	bl	8001660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	6892      	ldr	r2, [r2, #8]
 80011f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011fc:	609a      	str	r2, [r3, #8]
      break;
 80011fe:	e03c      	b.n	800127a <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	461a      	mov	r2, r3
 800120e:	f000 f9ad 	bl	800156c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2150      	movs	r1, #80	; 0x50
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fa06 	bl	800162a <TIM_ITRx_SetConfig>
      break;
 800121e:	e02c      	b.n	800127a <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6859      	ldr	r1, [r3, #4]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	461a      	mov	r2, r3
 800122e:	f000 f9cc 	bl	80015ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2160      	movs	r1, #96	; 0x60
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f9f6 	bl	800162a <TIM_ITRx_SetConfig>
      break;
 800123e:	e01c      	b.n	800127a <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	461a      	mov	r2, r3
 800124e:	f000 f98d 	bl	800156c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f9e6 	bl	800162a <TIM_ITRx_SetConfig>
      break;
 800125e:	e00c      	b.n	800127a <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f000 f9dd 	bl	800162a <TIM_ITRx_SetConfig>
      break;
 8001270:	e003      	b.n	800127a <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	73fb      	strb	r3, [r7, #15]
      break;
 8001276:	e000      	b.n	800127a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001278:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_TIM_SlaveConfigSynchro+0x18>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e031      	b.n	8001310 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 f8ca 	bl	8001458 <TIM_SlaveTimer_SetConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e018      	b.n	8001310 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	68d2      	ldr	r2, [r2, #12]
 80012e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	68d2      	ldr	r2, [r2, #12]
 80012f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a40      	ldr	r2, [pc, #256]	; (800142c <TIM_Base_SetConfig+0x114>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <TIM_Base_SetConfig+0x40>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001336:	d00f      	beq.n	8001358 <TIM_Base_SetConfig+0x40>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <TIM_Base_SetConfig+0x118>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00b      	beq.n	8001358 <TIM_Base_SetConfig+0x40>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <TIM_Base_SetConfig+0x11c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <TIM_Base_SetConfig+0x40>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a3b      	ldr	r2, [pc, #236]	; (8001438 <TIM_Base_SetConfig+0x120>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d003      	beq.n	8001358 <TIM_Base_SetConfig+0x40>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a3a      	ldr	r2, [pc, #232]	; (800143c <TIM_Base_SetConfig+0x124>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d108      	bne.n	800136a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800135e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a2f      	ldr	r2, [pc, #188]	; (800142c <TIM_Base_SetConfig+0x114>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d02b      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001378:	d027      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <TIM_Base_SetConfig+0x118>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d023      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a2b      	ldr	r2, [pc, #172]	; (8001434 <TIM_Base_SetConfig+0x11c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01f      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a2a      	ldr	r2, [pc, #168]	; (8001438 <TIM_Base_SetConfig+0x120>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d01b      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a29      	ldr	r2, [pc, #164]	; (800143c <TIM_Base_SetConfig+0x124>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d017      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a28      	ldr	r2, [pc, #160]	; (8001440 <TIM_Base_SetConfig+0x128>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a27      	ldr	r2, [pc, #156]	; (8001444 <TIM_Base_SetConfig+0x12c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00f      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a26      	ldr	r2, [pc, #152]	; (8001448 <TIM_Base_SetConfig+0x130>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00b      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <TIM_Base_SetConfig+0x134>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a24      	ldr	r2, [pc, #144]	; (8001450 <TIM_Base_SetConfig+0x138>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d003      	beq.n	80013ca <TIM_Base_SetConfig+0xb2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a23      	ldr	r2, [pc, #140]	; (8001454 <TIM_Base_SetConfig+0x13c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d108      	bne.n	80013dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <TIM_Base_SetConfig+0x114>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d003      	beq.n	8001410 <TIM_Base_SetConfig+0xf8>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <TIM_Base_SetConfig+0x124>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d103      	bne.n	8001418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	615a      	str	r2, [r3, #20]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40010000 	.word	0x40010000
 8001430:	40000400 	.word	0x40000400
 8001434:	40000800 	.word	0x40000800
 8001438:	40000c00 	.word	0x40000c00
 800143c:	40010400 	.word	0x40010400
 8001440:	40014000 	.word	0x40014000
 8001444:	40014400 	.word	0x40014400
 8001448:	40014800 	.word	0x40014800
 800144c:	40001800 	.word	0x40001800
 8001450:	40001c00 	.word	0x40001c00
 8001454:	40002000 	.word	0x40002000

08001458 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001474:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f023 0307 	bic.w	r3, r3, #7
 8001486:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b30      	cmp	r3, #48	; 0x30
 80014a0:	d05e      	beq.n	8001560 <TIM_SlaveTimer_SetConfig+0x108>
 80014a2:	2b30      	cmp	r3, #48	; 0x30
 80014a4:	d806      	bhi.n	80014b4 <TIM_SlaveTimer_SetConfig+0x5c>
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	d05a      	beq.n	8001560 <TIM_SlaveTimer_SetConfig+0x108>
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	d058      	beq.n	8001560 <TIM_SlaveTimer_SetConfig+0x108>
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d056      	beq.n	8001560 <TIM_SlaveTimer_SetConfig+0x108>
 80014b2:	e052      	b.n	800155a <TIM_SlaveTimer_SetConfig+0x102>
 80014b4:	2b50      	cmp	r3, #80	; 0x50
 80014b6:	d03c      	beq.n	8001532 <TIM_SlaveTimer_SetConfig+0xda>
 80014b8:	2b50      	cmp	r3, #80	; 0x50
 80014ba:	d802      	bhi.n	80014c2 <TIM_SlaveTimer_SetConfig+0x6a>
 80014bc:	2b40      	cmp	r3, #64	; 0x40
 80014be:	d00f      	beq.n	80014e0 <TIM_SlaveTimer_SetConfig+0x88>
 80014c0:	e04b      	b.n	800155a <TIM_SlaveTimer_SetConfig+0x102>
 80014c2:	2b60      	cmp	r3, #96	; 0x60
 80014c4:	d03f      	beq.n	8001546 <TIM_SlaveTimer_SetConfig+0xee>
 80014c6:	2b70      	cmp	r3, #112	; 0x70
 80014c8:	d147      	bne.n	800155a <TIM_SlaveTimer_SetConfig+0x102>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68d9      	ldr	r1, [r3, #12]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	f000 f8c1 	bl	8001660 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80014de:	e040      	b.n	8001562 <TIM_SlaveTimer_SetConfig+0x10a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d101      	bne.n	80014ec <TIM_SlaveTimer_SetConfig+0x94>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e03b      	b.n	8001564 <TIM_SlaveTimer_SetConfig+0x10c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	6a12      	ldr	r2, [r2, #32]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001512:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	4313      	orrs	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	621a      	str	r2, [r3, #32]
      break;
 8001530:	e017      	b.n	8001562 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	461a      	mov	r2, r3
 8001540:	f000 f814 	bl	800156c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001544:	e00d      	b.n	8001562 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6899      	ldr	r1, [r3, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	461a      	mov	r2, r3
 8001554:	f000 f839 	bl	80015ca <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8001558:	e003      	b.n	8001562 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
      break;
 800155e:	e000      	b.n	8001562 <TIM_SlaveTimer_SetConfig+0x10a>
      break;
 8001560:	bf00      	nop
  }

  return status;
 8001562:	7dfb      	ldrb	r3, [r7, #23]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	f023 0201 	bic.w	r2, r3, #1
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f023 030a 	bic.w	r3, r3, #10
 80015a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	621a      	str	r2, [r3, #32]
}
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b087      	sub	sp, #28
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	f023 0210 	bic.w	r2, r3, #16
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80015f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	031b      	lsls	r3, r3, #12
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	621a      	str	r2, [r3, #32]
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	f043 0307 	orr.w	r3, r3, #7
 800164c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	609a      	str	r2, [r3, #8]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800167a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	021a      	lsls	r2, r3, #8
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	431a      	orrs	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4313      	orrs	r3, r2
 800168c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	609a      	str	r2, [r3, #8]
}
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e05a      	b.n	800176e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a21      	ldr	r2, [pc, #132]	; (800177c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001704:	d01d      	beq.n	8001742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d018      	beq.n	8001742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1a      	ldr	r2, [pc, #104]	; (8001788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00e      	beq.n	8001742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a18      	ldr	r2, [pc, #96]	; (800178c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d009      	beq.n	8001742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d004      	beq.n	8001742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10c      	bne.n	800175c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40010000 	.word	0x40010000
 8001780:	40000400 	.word	0x40000400
 8001784:	40000800 	.word	0x40000800
 8001788:	40000c00 	.word	0x40000c00
 800178c:	40010400 	.word	0x40010400
 8001790:	40014000 	.word	0x40014000
 8001794:	40001800 	.word	0x40001800

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f7fe fe9c 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 f820 	bl	80017e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM1_Init();
 80017a4:	f000 f87c 	bl	80018a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017a8:	f000 f8cc 	bl	8001944 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <main+0x3c>)
 80017ae:	f7ff fc4d 	bl	800104c <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start(&htim2);
 80017b2:	4809      	ldr	r0, [pc, #36]	; (80017d8 <main+0x40>)
 80017b4:	f7ff fc4a 	bl	800104c <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  count_1= __HAL_TIM_GET_COUNTER(&htim1);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <main+0x3c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <main+0x44>)
 80017c2:	801a      	strh	r2, [r3, #0]
	  count_2= __HAL_TIM_GET_COUNTER(&htim2);
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <main+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <main+0x48>)
 80017ce:	801a      	strh	r2, [r3, #0]
	  count_1= __HAL_TIM_GET_COUNTER(&htim1);
 80017d0:	e7f2      	b.n	80017b8 <main+0x20>
 80017d2:	bf00      	nop
 80017d4:	20000030 	.word	0x20000030
 80017d8:	20000078 	.word	0x20000078
 80017dc:	2000002e 	.word	0x2000002e
 80017e0:	2000002c 	.word	0x2000002c

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	; 0x50
 80017e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	2230      	movs	r2, #48	; 0x30
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f9e0 	bl	8001bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <SystemClock_Config+0xb4>)
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <SystemClock_Config+0xb4>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <SystemClock_Config+0xb4>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	4a1c      	ldr	r2, [pc, #112]	; (800189c <SystemClock_Config+0xb8>)
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <SystemClock_Config+0xb8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <SystemClock_Config+0xb8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001840:	2302      	movs	r3, #2
 8001842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001844:	2301      	movs	r3, #1
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001848:	2310      	movs	r3, #16
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800184c:	2300      	movs	r3, #0
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe ff95 	bl	8000784 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001860:	f000 f8be 	bl	80019e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f9f8 	bl	8000c74 <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800188a:	f000 f8a9 	bl	80019e0 <Error_Handler>
  }
}
 800188e:	bf00      	nop
 8001890:	3750      	adds	r7, #80	; 0x50
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0308 	add.w	r3, r7, #8
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <MX_TIM1_Init+0x9c>)
 80018be:	4a20      	ldr	r2, [pc, #128]	; (8001940 <MX_TIM1_Init+0xa0>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15999;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <MX_TIM1_Init+0x9c>)
 80018c4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80018c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <MX_TIM1_Init+0x9c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_TIM1_Init+0x9c>)
 80018d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_TIM1_Init+0x9c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_TIM1_Init+0x9c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_TIM1_Init+0x9c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ea:	4814      	ldr	r0, [pc, #80]	; (800193c <MX_TIM1_Init+0x9c>)
 80018ec:	f7ff fb5e 	bl	8000fac <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018f6:	f000 f873 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	; (800193c <MX_TIM1_Init+0x9c>)
 8001908:	f7ff fc08 	bl	800111c <HAL_TIM_ConfigClockSource>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001912:	f000 f865 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001916:	2320      	movs	r3, #32
 8001918:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <MX_TIM1_Init+0x9c>)
 8001924:	f7ff febc 	bl	80016a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800192e:	f000 f857 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000030 	.word	0x20000030
 8001940:	40010000 	.word	0x40010000

08001944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <MX_TIM2_Init+0x98>)
 8001964:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001968:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_TIM2_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_TIM2_Init+0x98>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_TIM2_Init+0x98>)
 8001978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_TIM2_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_TIM2_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800198a:	4814      	ldr	r0, [pc, #80]	; (80019dc <MX_TIM2_Init+0x98>)
 800198c:	f7ff fb0e 	bl	8000fac <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001996:	f000 f823 	bl	80019e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800199a:	2307      	movs	r3, #7
 800199c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <MX_TIM2_Init+0x98>)
 80019aa:	f7ff fc73 	bl	8001294 <HAL_TIM_SlaveConfigSynchro>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019b4:	f000 f814 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_TIM2_Init+0x98>)
 80019c6:	f7ff fe6b 	bl	80016a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80019d0:	f000 f806 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000078 	.word	0x20000078

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <Error_Handler+0x6>

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a15      	ldr	r2, [pc, #84]	; (8001a9c <HAL_TIM_Base_MspInit+0x64>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10e      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <HAL_TIM_Base_MspInit+0x68>)
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_TIM_Base_MspInit+0x68>)
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_TIM_Base_MspInit+0x68>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a66:	e012      	b.n	8001a8e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a70:	d10d      	bne.n	8001a8e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_TIM_Base_MspInit+0x68>)
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_TIM_Base_MspInit+0x68>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_TIM_Base_MspInit+0x68>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af0:	f7fe fd44 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001afc:	4a06      	ldr	r2, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b22:	490e      	ldr	r1, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b38:	4c0b      	ldr	r4, [pc, #44]	; (8001b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b46:	f7ff ffd7 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f000 f811 	bl	8001b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fe23 	bl	8001798 <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b54:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b60:	08001c00 	.word	0x08001c00
  ldr r2, =_sbss
 8001b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b68:	200000c0 	.word	0x200000c0

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>
	...

08001b70 <__libc_init_array>:
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	4e0d      	ldr	r6, [pc, #52]	; (8001ba8 <__libc_init_array+0x38>)
 8001b74:	4c0d      	ldr	r4, [pc, #52]	; (8001bac <__libc_init_array+0x3c>)
 8001b76:	1ba4      	subs	r4, r4, r6
 8001b78:	10a4      	asrs	r4, r4, #2
 8001b7a:	2500      	movs	r5, #0
 8001b7c:	42a5      	cmp	r5, r4
 8001b7e:	d109      	bne.n	8001b94 <__libc_init_array+0x24>
 8001b80:	4e0b      	ldr	r6, [pc, #44]	; (8001bb0 <__libc_init_array+0x40>)
 8001b82:	4c0c      	ldr	r4, [pc, #48]	; (8001bb4 <__libc_init_array+0x44>)
 8001b84:	f000 f820 	bl	8001bc8 <_init>
 8001b88:	1ba4      	subs	r4, r4, r6
 8001b8a:	10a4      	asrs	r4, r4, #2
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	42a5      	cmp	r5, r4
 8001b90:	d105      	bne.n	8001b9e <__libc_init_array+0x2e>
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b98:	4798      	blx	r3
 8001b9a:	3501      	adds	r5, #1
 8001b9c:	e7ee      	b.n	8001b7c <__libc_init_array+0xc>
 8001b9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba2:	4798      	blx	r3
 8001ba4:	3501      	adds	r5, #1
 8001ba6:	e7f2      	b.n	8001b8e <__libc_init_array+0x1e>
 8001ba8:	08001bf8 	.word	0x08001bf8
 8001bac:	08001bf8 	.word	0x08001bf8
 8001bb0:	08001bf8 	.word	0x08001bf8
 8001bb4:	08001bfc 	.word	0x08001bfc

08001bb8 <memset>:
 8001bb8:	4402      	add	r2, r0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d100      	bne.n	8001bc2 <memset+0xa>
 8001bc0:	4770      	bx	lr
 8001bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8001bc6:	e7f9      	b.n	8001bbc <memset+0x4>

08001bc8 <_init>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr

08001bd4 <_fini>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr
