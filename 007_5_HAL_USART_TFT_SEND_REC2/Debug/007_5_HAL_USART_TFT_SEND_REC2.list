
007_5_HAL_USART_TFT_SEND_REC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001e50  08001e50  00011e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001e70  08001e70  00011e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001e74  08001e74  00011e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000dc  200000dc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00007a09  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000010fe  00000000  00000000  00027a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000608  00000000  00000000  00028b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005a0  00000000  00000000  00029150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003654  00000000  00000000  000296f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000020c0  00000000  00000000  0002cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002ee04  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000017b0  00000000  00000000  0002ee80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e38 	.word	0x08001e38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e38 	.word	0x08001e38

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_Init+0x40>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <HAL_Init+0x40>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000510:	2003      	movs	r0, #3
 8000512:	f000 f90b 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000516:	200f      	movs	r0, #15
 8000518:	f000 f808 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051c:	f001 fb8a 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023c00 	.word	0x40023c00

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f915 	bl	800077a <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f8eb 	bl	8000742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000028 	.word	0x20000028

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	490d      	ldr	r1, [pc, #52]	; (800067c <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	4909      	ldr	r1, [pc, #36]	; (8000680 <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	2201      	movs	r2, #1
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	1e5a      	subs	r2, r3, #1
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	401a      	ands	r2, r3
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	2101      	movs	r1, #1
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	1e59      	subs	r1, r3, #1
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	; 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f8:	d301      	bcc.n	80006fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00f      	b.n	800071e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SysTick_Config+0x40>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000706:	210f      	movs	r1, #15
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f7ff ff90 	bl	8000630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SysTick_Config+0x40>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SysTick_Config+0x40>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff49 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000754:	f7ff ff5e 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff90 	bl	8000684 <NVIC_EncodePriority>
 8000764:	4602      	mov	r2, r0
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff5f 	bl	8000630 <__NVIC_SetPriority>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffb0 	bl	80006e8 <SysTick_Config>
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	e16b      	b.n	8000a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007b0:	2201      	movs	r2, #1
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	f040 815a 	bne.w	8000a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d005      	beq.n	80007e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d130      	bne.n	8000848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	2203      	movs	r2, #3
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43db      	mvns	r3, r3
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	4013      	ands	r3, r2
 80007fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	4313      	orrs	r3, r2
 800080e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800081c:	2201      	movs	r2, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	f003 0201 	and.w	r2, r3, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4313      	orrs	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	2b03      	cmp	r3, #3
 8000852:	d017      	beq.n	8000884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	2203      	movs	r2, #3
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	4013      	ands	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	689a      	ldr	r2, [r3, #8]
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4313      	orrs	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	2b02      	cmp	r3, #2
 800088e:	d123      	bne.n	80008d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	08da      	lsrs	r2, r3, #3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3208      	adds	r2, #8
 8000898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	f003 0307 	and.w	r3, r3, #7
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	220f      	movs	r2, #15
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	691a      	ldr	r2, [r3, #16]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	08da      	lsrs	r2, r3, #3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3208      	adds	r2, #8
 80008d2:	69b9      	ldr	r1, [r7, #24]
 80008d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2203      	movs	r2, #3
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 0203 	and.w	r2, r3, #3
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000914:	2b00      	cmp	r3, #0
 8000916:	f000 80b4 	beq.w	8000a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4a5f      	ldr	r2, [pc, #380]	; (8000a9c <HAL_GPIO_Init+0x308>)
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <HAL_GPIO_Init+0x308>)
 8000922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <HAL_GPIO_Init+0x308>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000936:	4a5a      	ldr	r2, [pc, #360]	; (8000aa0 <HAL_GPIO_Init+0x30c>)
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	3302      	adds	r3, #2
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f003 0303 	and.w	r3, r3, #3
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	220f      	movs	r2, #15
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4013      	ands	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a51      	ldr	r2, [pc, #324]	; (8000aa4 <HAL_GPIO_Init+0x310>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d02b      	beq.n	80009ba <HAL_GPIO_Init+0x226>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a50      	ldr	r2, [pc, #320]	; (8000aa8 <HAL_GPIO_Init+0x314>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d025      	beq.n	80009b6 <HAL_GPIO_Init+0x222>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4f      	ldr	r2, [pc, #316]	; (8000aac <HAL_GPIO_Init+0x318>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d01f      	beq.n	80009b2 <HAL_GPIO_Init+0x21e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4e      	ldr	r2, [pc, #312]	; (8000ab0 <HAL_GPIO_Init+0x31c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d019      	beq.n	80009ae <HAL_GPIO_Init+0x21a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4d      	ldr	r2, [pc, #308]	; (8000ab4 <HAL_GPIO_Init+0x320>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0x216>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4c      	ldr	r2, [pc, #304]	; (8000ab8 <HAL_GPIO_Init+0x324>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d00d      	beq.n	80009a6 <HAL_GPIO_Init+0x212>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4b      	ldr	r2, [pc, #300]	; (8000abc <HAL_GPIO_Init+0x328>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d007      	beq.n	80009a2 <HAL_GPIO_Init+0x20e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4a      	ldr	r2, [pc, #296]	; (8000ac0 <HAL_GPIO_Init+0x32c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_GPIO_Init+0x20a>
 800099a:	2307      	movs	r3, #7
 800099c:	e00e      	b.n	80009bc <HAL_GPIO_Init+0x228>
 800099e:	2308      	movs	r3, #8
 80009a0:	e00c      	b.n	80009bc <HAL_GPIO_Init+0x228>
 80009a2:	2306      	movs	r3, #6
 80009a4:	e00a      	b.n	80009bc <HAL_GPIO_Init+0x228>
 80009a6:	2305      	movs	r3, #5
 80009a8:	e008      	b.n	80009bc <HAL_GPIO_Init+0x228>
 80009aa:	2304      	movs	r3, #4
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x228>
 80009ae:	2303      	movs	r3, #3
 80009b0:	e004      	b.n	80009bc <HAL_GPIO_Init+0x228>
 80009b2:	2302      	movs	r3, #2
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_Init+0x228>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x228>
 80009ba:	2300      	movs	r3, #0
 80009bc:	69fa      	ldr	r2, [r7, #28]
 80009be:	f002 0203 	and.w	r2, r2, #3
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009cc:	4934      	ldr	r1, [pc, #208]	; (8000aa0 <HAL_GPIO_Init+0x30c>)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009fe:	4a31      	ldr	r2, [pc, #196]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a7c:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_GPIO_Init+0x330>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	f67f ae90 	bls.w	80007b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a90:	bf00      	nop
 8000a92:	3724      	adds	r7, #36	; 0x24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40013800 	.word	0x40013800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40021400 	.word	0x40021400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40021c00 	.word	0x40021c00
 8000ac4:	40013c00 	.word	0x40013c00

08000ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad8:	787b      	ldrb	r3, [r7, #1]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ade:	887a      	ldrh	r2, [r7, #2]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ae4:	e003      	b.n	8000aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ae6:	887b      	ldrh	r3, [r7, #2]
 8000ae8:	041a      	lsls	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	041a      	lsls	r2, r3, #16
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e264      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d075      	beq.n	8000c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b4e:	4ba3      	ldr	r3, [pc, #652]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d00c      	beq.n	8000b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b5a:	4ba0      	ldr	r3, [pc, #640]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d112      	bne.n	8000b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b66:	4b9d      	ldr	r3, [pc, #628]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b72:	d10b      	bne.n	8000b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b74:	4b99      	ldr	r3, [pc, #612]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d05b      	beq.n	8000c38 <HAL_RCC_OscConfig+0x108>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d157      	bne.n	8000c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e23f      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b94:	d106      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x74>
 8000b96:	4a91      	ldr	r2, [pc, #580]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	4b90      	ldr	r3, [pc, #576]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e01d      	b.n	8000be0 <HAL_RCC_OscConfig+0xb0>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bac:	d10c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x98>
 8000bae:	4a8b      	ldr	r2, [pc, #556]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	4b8a      	ldr	r3, [pc, #552]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	4a88      	ldr	r2, [pc, #544]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	4b87      	ldr	r3, [pc, #540]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e00b      	b.n	8000be0 <HAL_RCC_OscConfig+0xb0>
 8000bc8:	4a84      	ldr	r2, [pc, #528]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bca:	4b84      	ldr	r3, [pc, #528]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4a81      	ldr	r2, [pc, #516]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bd6:	4b81      	ldr	r3, [pc, #516]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be8:	f7ff fce4 	bl	80005b4 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bee:	e008      	b.n	8000c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf0:	f7ff fce0 	bl	80005b4 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b64      	cmp	r3, #100	; 0x64
 8000bfc:	d901      	bls.n	8000c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e204      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c02:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f0      	beq.n	8000bf0 <HAL_RCC_OscConfig+0xc0>
 8000c0e:	e014      	b.n	8000c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fcd0 	bl	80005b4 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff fccc 	bl	80005b4 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e1f0      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c2a:	4b6c      	ldr	r3, [pc, #432]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1f0      	bne.n	8000c18 <HAL_RCC_OscConfig+0xe8>
 8000c36:	e000      	b.n	8000c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d063      	beq.n	8000d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c46:	4b65      	ldr	r3, [pc, #404]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00b      	beq.n	8000c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c52:	4b62      	ldr	r3, [pc, #392]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d11c      	bne.n	8000c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c5e:	4b5f      	ldr	r3, [pc, #380]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d116      	bne.n	8000c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c6a:	4b5c      	ldr	r3, [pc, #368]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <HAL_RCC_OscConfig+0x152>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d001      	beq.n	8000c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e1c4      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c82:	4956      	ldr	r1, [pc, #344]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c84:	4b55      	ldr	r3, [pc, #340]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c96:	e03a      	b.n	8000d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d020      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ca0:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <HAL_RCC_OscConfig+0x2b0>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca6:	f7ff fc85 	bl	80005b4 <HAL_GetTick>
 8000caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cac:	e008      	b.n	8000cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cae:	f7ff fc81 	bl	80005b4 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e1a5      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc0:	4b46      	ldr	r3, [pc, #280]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f0      	beq.n	8000cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ccc:	4943      	ldr	r1, [pc, #268]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000cce:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
 8000ce0:	e015      	b.n	8000d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <HAL_RCC_OscConfig+0x2b0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fc64 	bl	80005b4 <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf0:	f7ff fc60 	bl	80005b4 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e184      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d030      	beq.n	8000d7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d016      	beq.n	8000d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d22:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <HAL_RCC_OscConfig+0x2b4>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d28:	f7ff fc44 	bl	80005b4 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d30:	f7ff fc40 	bl	80005b4 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e164      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f0      	beq.n	8000d30 <HAL_RCC_OscConfig+0x200>
 8000d4e:	e015      	b.n	8000d7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_RCC_OscConfig+0x2b4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc2d 	bl	80005b4 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fc29 	bl	80005b4 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e14d      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f0      	bne.n	8000d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 80a0 	beq.w	8000eca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10f      	bne.n	8000dba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_RCC_OscConfig+0x2ac>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_RCC_OscConfig+0x2b8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d121      	bne.n	8000e0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dc6:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_RCC_OscConfig+0x2b8>)
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_RCC_OscConfig+0x2b8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fbef 	bl	80005b4 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd8:	e011      	b.n	8000dfe <HAL_RCC_OscConfig+0x2ce>
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	42470000 	.word	0x42470000
 8000de4:	42470e80 	.word	0x42470e80
 8000de8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dec:	f7ff fbe2 	bl	80005b4 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e106      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfe:	4b85      	ldr	r3, [pc, #532]	; (8001014 <HAL_RCC_OscConfig+0x4e4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f0      	beq.n	8000dec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d106      	bne.n	8000e20 <HAL_RCC_OscConfig+0x2f0>
 8000e12:	4a81      	ldr	r2, [pc, #516]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e14:	4b80      	ldr	r3, [pc, #512]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1e:	e01c      	b.n	8000e5a <HAL_RCC_OscConfig+0x32a>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d10c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x312>
 8000e28:	4a7b      	ldr	r2, [pc, #492]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e2a:	4b7b      	ldr	r3, [pc, #492]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6713      	str	r3, [r2, #112]	; 0x70
 8000e34:	4a78      	ldr	r2, [pc, #480]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e36:	4b78      	ldr	r3, [pc, #480]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e40:	e00b      	b.n	8000e5a <HAL_RCC_OscConfig+0x32a>
 8000e42:	4a75      	ldr	r2, [pc, #468]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e44:	4b74      	ldr	r3, [pc, #464]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e4e:	4a72      	ldr	r2, [pc, #456]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e50:	4b71      	ldr	r3, [pc, #452]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d015      	beq.n	8000e8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e62:	f7ff fba7 	bl	80005b4 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fba3 	bl	80005b4 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e0c5      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	4b65      	ldr	r3, [pc, #404]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0ee      	beq.n	8000e6a <HAL_RCC_OscConfig+0x33a>
 8000e8c:	e014      	b.n	8000eb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fb91 	bl	80005b4 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e94:	e00a      	b.n	8000eac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fb8d 	bl	80005b4 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e0af      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	4b5a      	ldr	r3, [pc, #360]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1ee      	bne.n	8000e96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d105      	bne.n	8000eca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ebe:	4a56      	ldr	r2, [pc, #344]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000ec0:	4b55      	ldr	r3, [pc, #340]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 809b 	beq.w	800100a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ed4:	4b50      	ldr	r3, [pc, #320]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d05c      	beq.n	8000f9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d141      	bne.n	8000f6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee8:	4b4c      	ldr	r3, [pc, #304]	; (800101c <HAL_RCC_OscConfig+0x4ec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fb61 	bl	80005b4 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef6:	f7ff fb5d 	bl	80005b4 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e081      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f08:	4b43      	ldr	r3, [pc, #268]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f0      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f14:	4940      	ldr	r1, [pc, #256]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69da      	ldr	r2, [r3, #28]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	019b      	lsls	r3, r3, #6
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	085b      	lsrs	r3, r3, #1
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	061b      	lsls	r3, r3, #24
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f3e:	4b37      	ldr	r3, [pc, #220]	; (800101c <HAL_RCC_OscConfig+0x4ec>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fb36 	bl	80005b4 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4c:	f7ff fb32 	bl	80005b4 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e056      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f0      	beq.n	8000f4c <HAL_RCC_OscConfig+0x41c>
 8000f6a:	e04e      	b.n	800100a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_RCC_OscConfig+0x4ec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f72:	f7ff fb1f 	bl	80005b4 <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7a:	f7ff fb1b 	bl	80005b4 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e03f      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f0      	bne.n	8000f7a <HAL_RCC_OscConfig+0x44a>
 8000f98:	e037      	b.n	800100a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e032      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_RCC_OscConfig+0x4e8>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d028      	beq.n	8001006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d121      	bne.n	8001006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d11a      	bne.n	8001006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d111      	bne.n	8001006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	085b      	lsrs	r3, r3, #1
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d107      	bne.n	8001006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001002:	429a      	cmp	r2, r3
 8001004:	d001      	beq.n	800100a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40007000 	.word	0x40007000
 8001018:	40023800 	.word	0x40023800
 800101c:	42470060 	.word	0x42470060

08001020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e0cc      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001034:	4b68      	ldr	r3, [pc, #416]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0207 	and.w	r2, r3, #7
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d20c      	bcs.n	800105c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b65      	ldr	r3, [pc, #404]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104a:	4b63      	ldr	r3, [pc, #396]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0207 	and.w	r2, r3, #7
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d001      	beq.n	800105c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0b8      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d020      	beq.n	80010aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001074:	4a59      	ldr	r2, [pc, #356]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	4b59      	ldr	r3, [pc, #356]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800107e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800108c:	4a53      	ldr	r2, [pc, #332]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	4b53      	ldr	r3, [pc, #332]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001098:	4950      	ldr	r1, [pc, #320]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	4b50      	ldr	r3, [pc, #320]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d044      	beq.n	8001140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d119      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e07f      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d107      	bne.n	80010ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010de:	4b3f      	ldr	r3, [pc, #252]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e06f      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e067      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010fe:	4937      	ldr	r1, [pc, #220]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 0203 	bic.w	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001110:	f7ff fa50 	bl	80005b4 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	e00a      	b.n	800112e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff fa4c 	bl	80005b4 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f241 3288 	movw	r2, #5000	; 0x1388
 8001126:	4293      	cmp	r3, r2
 8001128:	d901      	bls.n	800112e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e04f      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 020c 	and.w	r2, r3, #12
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	429a      	cmp	r2, r3
 800113e:	d1eb      	bne.n	8001118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0207 	and.w	r2, r3, #7
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d90c      	bls.n	8001168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0207 	and.w	r2, r3, #7
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d001      	beq.n	8001168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e032      	b.n	80011ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	2b00      	cmp	r3, #0
 8001172:	d008      	beq.n	8001186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001174:	4919      	ldr	r1, [pc, #100]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d009      	beq.n	80011a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001192:	4912      	ldr	r1, [pc, #72]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a6:	f000 f821 	bl	80011ec <HAL_RCC_GetSysClockFreq>
 80011aa:	4601      	mov	r1, r0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_RCC_ClockConfig+0x1c0>)
 80011b8:	5cd3      	ldrb	r3, [r2, r3]
 80011ba:	fa21 f303 	lsr.w	r3, r1, r3
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_RCC_ClockConfig+0x1c8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9b0 	bl	800052c <HAL_InitTick>

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00
 80011dc:	40023800 	.word	0x40023800
 80011e0:	08001e50 	.word	0x08001e50
 80011e4:	20000008 	.word	0x20000008
 80011e8:	20000000 	.word	0x20000000

080011ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f0:	b087      	sub	sp, #28
 80011f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011f4:	2200      	movs	r2, #0
 80011f6:	60fa      	str	r2, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	617a      	str	r2, [r7, #20]
 80011fc:	2200      	movs	r2, #0
 80011fe:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001200:	2200      	movs	r2, #0
 8001202:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001204:	4a51      	ldr	r2, [pc, #324]	; (800134c <HAL_RCC_GetSysClockFreq+0x160>)
 8001206:	6892      	ldr	r2, [r2, #8]
 8001208:	f002 020c 	and.w	r2, r2, #12
 800120c:	2a04      	cmp	r2, #4
 800120e:	d007      	beq.n	8001220 <HAL_RCC_GetSysClockFreq+0x34>
 8001210:	2a08      	cmp	r2, #8
 8001212:	d008      	beq.n	8001226 <HAL_RCC_GetSysClockFreq+0x3a>
 8001214:	2a00      	cmp	r2, #0
 8001216:	f040 8090 	bne.w	800133a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800121a:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <HAL_RCC_GetSysClockFreq+0x164>)
 800121c:	613b      	str	r3, [r7, #16]
       break;
 800121e:	e08f      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001220:	4b4c      	ldr	r3, [pc, #304]	; (8001354 <HAL_RCC_GetSysClockFreq+0x168>)
 8001222:	613b      	str	r3, [r7, #16]
      break;
 8001224:	e08c      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001226:	4a49      	ldr	r2, [pc, #292]	; (800134c <HAL_RCC_GetSysClockFreq+0x160>)
 8001228:	6852      	ldr	r2, [r2, #4]
 800122a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800122e:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001230:	4a46      	ldr	r2, [pc, #280]	; (800134c <HAL_RCC_GetSysClockFreq+0x160>)
 8001232:	6852      	ldr	r2, [r2, #4]
 8001234:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001238:	2a00      	cmp	r2, #0
 800123a:	d023      	beq.n	8001284 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800123c:	4b43      	ldr	r3, [pc, #268]	; (800134c <HAL_RCC_GetSysClockFreq+0x160>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	099b      	lsrs	r3, r3, #6
 8001242:	f04f 0400 	mov.w	r4, #0
 8001246:	f240 11ff 	movw	r1, #511	; 0x1ff
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	ea03 0301 	and.w	r3, r3, r1
 8001252:	ea04 0402 	and.w	r4, r4, r2
 8001256:	4a3f      	ldr	r2, [pc, #252]	; (8001354 <HAL_RCC_GetSysClockFreq+0x168>)
 8001258:	fb02 f104 	mul.w	r1, r2, r4
 800125c:	2200      	movs	r2, #0
 800125e:	fb02 f203 	mul.w	r2, r2, r3
 8001262:	440a      	add	r2, r1
 8001264:	493b      	ldr	r1, [pc, #236]	; (8001354 <HAL_RCC_GetSysClockFreq+0x168>)
 8001266:	fba3 0101 	umull	r0, r1, r3, r1
 800126a:	1853      	adds	r3, r2, r1
 800126c:	4619      	mov	r1, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f04f 0400 	mov.w	r4, #0
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7fe ffae 	bl	80001d8 <__aeabi_uldivmod>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e04c      	b.n	800131e <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_RCC_GetSysClockFreq+0x160>)
 8001286:	6852      	ldr	r2, [r2, #4]
 8001288:	0992      	lsrs	r2, r2, #6
 800128a:	4611      	mov	r1, r2
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001294:	f04f 0600 	mov.w	r6, #0
 8001298:	ea05 0501 	and.w	r5, r5, r1
 800129c:	ea06 0602 	and.w	r6, r6, r2
 80012a0:	4629      	mov	r1, r5
 80012a2:	4632      	mov	r2, r6
 80012a4:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80012a8:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80012ac:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80012b0:	4651      	mov	r1, sl
 80012b2:	465a      	mov	r2, fp
 80012b4:	46aa      	mov	sl, r5
 80012b6:	46b3      	mov	fp, r6
 80012b8:	4655      	mov	r5, sl
 80012ba:	465e      	mov	r6, fp
 80012bc:	1b4d      	subs	r5, r1, r5
 80012be:	eb62 0606 	sbc.w	r6, r2, r6
 80012c2:	4629      	mov	r1, r5
 80012c4:	4632      	mov	r2, r6
 80012c6:	0194      	lsls	r4, r2, #6
 80012c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012cc:	018b      	lsls	r3, r1, #6
 80012ce:	1a5b      	subs	r3, r3, r1
 80012d0:	eb64 0402 	sbc.w	r4, r4, r2
 80012d4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80012d8:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80012dc:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80012e0:	4643      	mov	r3, r8
 80012e2:	464c      	mov	r4, r9
 80012e4:	4655      	mov	r5, sl
 80012e6:	465e      	mov	r6, fp
 80012e8:	18ed      	adds	r5, r5, r3
 80012ea:	eb46 0604 	adc.w	r6, r6, r4
 80012ee:	462b      	mov	r3, r5
 80012f0:	4634      	mov	r4, r6
 80012f2:	02a2      	lsls	r2, r4, #10
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	029b      	lsls	r3, r3, #10
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001306:	4618      	mov	r0, r3
 8001308:	4621      	mov	r1, r4
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f04f 0400 	mov.w	r4, #0
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	f7fe ff60 	bl	80001d8 <__aeabi_uldivmod>
 8001318:	4603      	mov	r3, r0
 800131a:	460c      	mov	r4, r1
 800131c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_GetSysClockFreq+0x160>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	0c1b      	lsrs	r3, r3, #16
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	3301      	adds	r3, #1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	613b      	str	r3, [r7, #16]
      break;
 8001338:	e002      	b.n	8001340 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_RCC_GetSysClockFreq+0x164>)
 800133c:	613b      	str	r3, [r7, #16]
      break;
 800133e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001340:	693b      	ldr	r3, [r7, #16]
}
 8001342:	4618      	mov	r0, r3
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	00f42400 	.word	0x00f42400
 8001354:	017d7840 	.word	0x017d7840

08001358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_RCC_GetHCLKFreq+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001374:	f7ff fff0 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 8001378:	4601      	mov	r1, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0a9b      	lsrs	r3, r3, #10
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	08001e60 	.word	0x08001e60

08001398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800139c:	f7ff ffdc 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 80013a0:	4601      	mov	r1, r0
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	0b5b      	lsrs	r3, r3, #13
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	08001e60 	.word	0x08001e60

080013c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e03f      	b.n	8001452 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fc4c 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	68d2      	ldr	r2, [r2, #12]
 80013fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001402:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f939 	bl	800167c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	6912      	ldr	r2, [r2, #16]
 8001414:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001418:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	6952      	ldr	r2, [r2, #20]
 8001424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001428:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	68d2      	ldr	r2, [r2, #12]
 8001434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001438:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b08a      	sub	sp, #40	; 0x28
 800145e:	af02      	add	r7, sp, #8
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	4613      	mov	r3, r2
 8001468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b20      	cmp	r3, #32
 8001478:	f040 808c 	bne.w	8001594 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <HAL_UART_Receive+0x2e>
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e084      	b.n	8001596 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_UART_Receive+0x40>
 8001496:	2302      	movs	r3, #2
 8001498:	e07d      	b.n	8001596 <HAL_UART_Receive+0x13c>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2222      	movs	r2, #34	; 0x22
 80014ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014b6:	f7ff f87d 	bl	80005b4 <HAL_GetTick>
 80014ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	88fa      	ldrh	r2, [r7, #6]
 80014c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d0:	d108      	bne.n	80014e4 <HAL_UART_Receive+0x8a>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d104      	bne.n	80014e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	e003      	b.n	80014ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80014f4:	e043      	b.n	800157e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2200      	movs	r2, #0
 80014fe:	2120      	movs	r1, #32
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f84c 	bl	800159e <UART_WaitOnFlagUntilTimeout>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e042      	b.n	8001596 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10c      	bne.n	8001530 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	b29b      	uxth	r3, r3
 800151e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001522:	b29a      	uxth	r2, r3
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	3302      	adds	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	e01f      	b.n	8001570 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001538:	d007      	beq.n	800154a <HAL_UART_Receive+0xf0>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10a      	bne.n	8001558 <HAL_UART_Receive+0xfe>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	e008      	b.n	800156a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001564:	b2da      	uxtb	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001574:	b29b      	uxth	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b29a      	uxth	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001582:	b29b      	uxth	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1b6      	bne.n	80014f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	e000      	b.n	8001596 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001594:	2302      	movs	r3, #2
  }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b090      	sub	sp, #64	; 0x40
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015ae:	e050      	b.n	8001652 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b6:	d04c      	beq.n	8001652 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <UART_WaitOnFlagUntilTimeout+0x30>
 80015be:	f7fe fff9 	bl	80005b4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d941      	bls.n	8001652 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	330c      	adds	r3, #12
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	e853 3f00 	ldrex	r3, [r3]
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	330c      	adds	r3, #12
 80015ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015ee:	637a      	str	r2, [r7, #52]	; 0x34
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f6:	e841 2300 	strex	r3, r2, [r1]
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1e5      	bne.n	80015ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3314      	adds	r3, #20
 8001608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	e853 3f00 	ldrex	r3, [r3]
 8001610:	613b      	str	r3, [r7, #16]
   return(result);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3314      	adds	r3, #20
 8001620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001622:	623a      	str	r2, [r7, #32]
 8001624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001626:	69f9      	ldr	r1, [r7, #28]
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	e841 2300 	strex	r3, r2, [r1]
 800162e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1e5      	bne.n	8001602 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e00f      	b.n	8001672 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	429a      	cmp	r2, r3
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	429a      	cmp	r2, r3
 800166e:	d09f      	beq.n	80015b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3740      	adds	r7, #64	; 0x40
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001680:	b091      	sub	sp, #68	; 0x44
 8001682:	af00      	add	r7, sp, #0
 8001684:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80016b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80016c2:	f022 020c 	bic.w	r2, r2, #12
 80016c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4313      	orrs	r3, r2
 80016e0:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4bba      	ldr	r3, [pc, #744]	; (80019d0 <UART_SetConfig+0x354>)
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d004      	beq.n	80016f6 <UART_SetConfig+0x7a>
 80016ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4bb8      	ldr	r3, [pc, #736]	; (80019d4 <UART_SetConfig+0x358>)
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d103      	bne.n	80016fe <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80016f6:	f7ff fe4f 	bl	8001398 <HAL_RCC_GetPCLK2Freq>
 80016fa:	63f8      	str	r0, [r7, #60]	; 0x3c
 80016fc:	e002      	b.n	8001704 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80016fe:	f7ff fe37 	bl	8001370 <HAL_RCC_GetPCLK1Freq>
 8001702:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800170c:	f040 80a7 	bne.w	800185e <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	62ba      	str	r2, [r7, #40]	; 0x28
 8001716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	460b      	mov	r3, r1
 8001720:	4614      	mov	r4, r2
 8001722:	18db      	adds	r3, r3, r3
 8001724:	eb44 0404 	adc.w	r4, r4, r4
 8001728:	185b      	adds	r3, r3, r1
 800172a:	eb44 0402 	adc.w	r4, r4, r2
 800172e:	00e0      	lsls	r0, r4, #3
 8001730:	6178      	str	r0, [r7, #20]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001738:	6178      	str	r0, [r7, #20]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001742:	185d      	adds	r5, r3, r1
 8001744:	eb44 0602 	adc.w	r6, r4, r2
 8001748:	4628      	mov	r0, r5
 800174a:	4631      	mov	r1, r6
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f04f 0400 	mov.w	r4, #0
 8001754:	18db      	adds	r3, r3, r3
 8001756:	eb44 0404 	adc.w	r4, r4, r4
 800175a:	461a      	mov	r2, r3
 800175c:	4623      	mov	r3, r4
 800175e:	f7fe fd3b 	bl	80001d8 <__aeabi_uldivmod>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	461a      	mov	r2, r3
 8001768:	4b9b      	ldr	r3, [pc, #620]	; (80019d8 <UART_SetConfig+0x35c>)
 800176a:	fba3 2302 	umull	r2, r3, r3, r2
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	011e      	lsls	r6, r3, #4
 8001772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	18db      	adds	r3, r3, r3
 8001780:	eb44 0404 	adc.w	r4, r4, r4
 8001784:	185b      	adds	r3, r3, r1
 8001786:	eb44 0402 	adc.w	r4, r4, r2
 800178a:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800178e:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8001792:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8001796:	4653      	mov	r3, sl
 8001798:	465c      	mov	r4, fp
 800179a:	eb13 0a01 	adds.w	sl, r3, r1
 800179e:	eb44 0b02 	adc.w	fp, r4, r2
 80017a2:	4650      	mov	r0, sl
 80017a4:	4659      	mov	r1, fp
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f04f 0400 	mov.w	r4, #0
 80017ae:	18db      	adds	r3, r3, r3
 80017b0:	eb44 0404 	adc.w	r4, r4, r4
 80017b4:	461a      	mov	r2, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	f7fe fd0e 	bl	80001d8 <__aeabi_uldivmod>
 80017bc:	4603      	mov	r3, r0
 80017be:	460c      	mov	r4, r1
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b85      	ldr	r3, [pc, #532]	; (80019d8 <UART_SetConfig+0x35c>)
 80017c4:	fba3 1302 	umull	r1, r3, r3, r2
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	2164      	movs	r1, #100	; 0x64
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	3332      	adds	r3, #50	; 0x32
 80017d6:	4a80      	ldr	r2, [pc, #512]	; (80019d8 <UART_SetConfig+0x35c>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80017e4:	441e      	add	r6, r3
 80017e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	18db      	adds	r3, r3, r3
 80017f4:	eb44 0404 	adc.w	r4, r4, r4
 80017f8:	185b      	adds	r3, r3, r1
 80017fa:	eb44 0402 	adc.w	r4, r4, r2
 80017fe:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001802:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001806:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800180a:	4643      	mov	r3, r8
 800180c:	464c      	mov	r4, r9
 800180e:	eb13 0801 	adds.w	r8, r3, r1
 8001812:	eb44 0902 	adc.w	r9, r4, r2
 8001816:	4640      	mov	r0, r8
 8001818:	4649      	mov	r1, r9
 800181a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f04f 0400 	mov.w	r4, #0
 8001822:	18db      	adds	r3, r3, r3
 8001824:	eb44 0404 	adc.w	r4, r4, r4
 8001828:	461a      	mov	r2, r3
 800182a:	4623      	mov	r3, r4
 800182c:	f7fe fcd4 	bl	80001d8 <__aeabi_uldivmod>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	461a      	mov	r2, r3
 8001836:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <UART_SetConfig+0x35c>)
 8001838:	fba3 1302 	umull	r1, r3, r3, r2
 800183c:	095b      	lsrs	r3, r3, #5
 800183e:	2164      	movs	r1, #100	; 0x64
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	3332      	adds	r3, #50	; 0x32
 800184a:	4a63      	ldr	r2, [pc, #396]	; (80019d8 <UART_SetConfig+0x35c>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	4433      	add	r3, r6
 8001858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800185c:	e0b3      	b.n	80019c6 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800185e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001866:	4619      	mov	r1, r3
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	18db      	adds	r3, r3, r3
 8001872:	eb44 0404 	adc.w	r4, r4, r4
 8001876:	185b      	adds	r3, r3, r1
 8001878:	eb44 0402 	adc.w	r4, r4, r2
 800187c:	00e6      	lsls	r6, r4, #3
 800187e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8001882:	00dd      	lsls	r5, r3, #3
 8001884:	462b      	mov	r3, r5
 8001886:	4634      	mov	r4, r6
 8001888:	185d      	adds	r5, r3, r1
 800188a:	eb44 0602 	adc.w	r6, r4, r2
 800188e:	4628      	mov	r0, r5
 8001890:	4631      	mov	r1, r6
 8001892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f04f 0400 	mov.w	r4, #0
 800189a:	00a5      	lsls	r5, r4, #2
 800189c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800189e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80018a0:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80018a4:	62fd      	str	r5, [r7, #44]	; 0x2c
 80018a6:	009c      	lsls	r4, r3, #2
 80018a8:	62bc      	str	r4, [r7, #40]	; 0x28
 80018aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018ae:	f7fe fc93 	bl	80001d8 <__aeabi_uldivmod>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <UART_SetConfig+0x35c>)
 80018ba:	fba3 1302 	umull	r1, r3, r3, r2
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	011d      	lsls	r5, r3, #4
 80018c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c4:	4619      	mov	r1, r3
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4614      	mov	r4, r2
 80018ce:	18db      	adds	r3, r3, r3
 80018d0:	eb44 0404 	adc.w	r4, r4, r4
 80018d4:	185b      	adds	r3, r3, r1
 80018d6:	eb44 0402 	adc.w	r4, r4, r2
 80018da:	00e0      	lsls	r0, r4, #3
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	00d8      	lsls	r0, r3, #3
 80018e8:	60b8      	str	r0, [r7, #8]
 80018ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80018ee:	eb13 0801 	adds.w	r8, r3, r1
 80018f2:	eb44 0902 	adc.w	r9, r4, r2
 80018f6:	4640      	mov	r0, r8
 80018f8:	4649      	mov	r1, r9
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f04f 0400 	mov.w	r4, #0
 8001902:	00a6      	lsls	r6, r4, #2
 8001904:	627e      	str	r6, [r7, #36]	; 0x24
 8001906:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8001908:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800190c:	627e      	str	r6, [r7, #36]	; 0x24
 800190e:	009c      	lsls	r4, r3, #2
 8001910:	623c      	str	r4, [r7, #32]
 8001912:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001916:	f7fe fc5f 	bl	80001d8 <__aeabi_uldivmod>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	461a      	mov	r2, r3
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <UART_SetConfig+0x35c>)
 8001922:	fba3 1302 	umull	r1, r3, r3, r2
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2164      	movs	r1, #100	; 0x64
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	3332      	adds	r3, #50	; 0x32
 8001934:	4a28      	ldr	r2, [pc, #160]	; (80019d8 <UART_SetConfig+0x35c>)
 8001936:	fba2 1303 	umull	r1, r3, r2, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001940:	441d      	add	r5, r3
 8001942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001944:	4619      	mov	r1, r3
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	18db      	adds	r3, r3, r3
 8001950:	eb44 0404 	adc.w	r4, r4, r4
 8001954:	185b      	adds	r3, r3, r1
 8001956:	eb44 0402 	adc.w	r4, r4, r2
 800195a:	00e0      	lsls	r0, r4, #3
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	00d8      	lsls	r0, r3, #3
 8001968:	6038      	str	r0, [r7, #0]
 800196a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800196e:	eb13 0801 	adds.w	r8, r3, r1
 8001972:	eb44 0902 	adc.w	r9, r4, r2
 8001976:	4640      	mov	r0, r8
 8001978:	4649      	mov	r1, r9
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f04f 0400 	mov.w	r4, #0
 8001982:	00a6      	lsls	r6, r4, #2
 8001984:	61fe      	str	r6, [r7, #28]
 8001986:	69fe      	ldr	r6, [r7, #28]
 8001988:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800198c:	61fe      	str	r6, [r7, #28]
 800198e:	009c      	lsls	r4, r3, #2
 8001990:	61bc      	str	r4, [r7, #24]
 8001992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001996:	f7fe fc1f 	bl	80001d8 <__aeabi_uldivmod>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	461a      	mov	r2, r3
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <UART_SetConfig+0x35c>)
 80019a2:	fba3 1302 	umull	r1, r3, r3, r2
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2164      	movs	r1, #100	; 0x64
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	3332      	adds	r3, #50	; 0x32
 80019b4:	4a08      	ldr	r2, [pc, #32]	; (80019d8 <UART_SetConfig+0x35c>)
 80019b6:	fba2 1303 	umull	r1, r3, r2, r3
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	442b      	add	r3, r5
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	6093      	str	r3, [r2, #8]
}
 80019c6:	bf00      	nop
 80019c8:	3744      	adds	r7, #68	; 0x44
 80019ca:	46bd      	mov	sp, r7
 80019cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40011400 	.word	0x40011400
 80019d8:	51eb851f 	.word	0x51eb851f

080019dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e2:	f7fe fd81 	bl	80004e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e6:	f000 f849 	bl	8001a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ea:	f000 f8db 	bl	8001ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019ee:	f000 f8af 	bl	8001b50 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart2,(uint8_t*)rx_buffer,50,100);
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	2232      	movs	r2, #50	; 0x32
 80019f6:	491d      	ldr	r1, [pc, #116]	; (8001a6c <main+0x90>)
 80019f8:	481d      	ldr	r0, [pc, #116]	; (8001a70 <main+0x94>)
 80019fa:	f7ff fd2e 	bl	800145a <HAL_UART_Receive>

	  if( rx_buffer[0]==0x65 && rx_buffer[1]==0xFF && rx_buffer[2]==0xFF && rx_buffer[3]==0xFF) {
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <main+0x90>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b65      	cmp	r3, #101	; 0x65
 8001a04:	d1f5      	bne.n	80019f2 <main+0x16>
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <main+0x90>)
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d1f1      	bne.n	80019f2 <main+0x16>
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <main+0x90>)
 8001a10:	789b      	ldrb	r3, [r3, #2]
 8001a12:	2bff      	cmp	r3, #255	; 0xff
 8001a14:	d1ed      	bne.n	80019f2 <main+0x16>
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <main+0x90>)
 8001a18:	78db      	ldrb	r3, [r3, #3]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d1e9      	bne.n	80019f2 <main+0x16>
		  count++;
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <main+0x98>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <main+0x98>)
 8001a26:	6013      	str	r3, [r2, #0]
		for (int i=0;i<strlen(rx_buffer);i++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	e007      	b.n	8001a3e <main+0x62>
			rx_buffer[i]='\0';
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <main+0x90>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<strlen(rx_buffer);i++) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	480b      	ldr	r0, [pc, #44]	; (8001a6c <main+0x90>)
 8001a40:	f7fe fbc2 	bl	80001c8 <strlen>
 8001a44:	4602      	mov	r2, r0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d8f0      	bhi.n	8001a2e <main+0x52>
		}
		if(count%2==1){
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <main+0x98>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	bfb8      	it	lt
 8001a58:	425b      	neglt	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d1c9      	bne.n	80019f2 <main+0x16>
			  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8001a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <main+0x9c>)
 8001a64:	f7ff f849 	bl	8000afa <HAL_GPIO_TogglePin>
	  HAL_UART_Receive(&huart2,(uint8_t*)rx_buffer,50,100);
 8001a68:	e7c3      	b.n	80019f2 <main+0x16>
 8001a6a:	bf00      	nop
 8001a6c:	2000002c 	.word	0x2000002c
 8001a70:	20000098 	.word	0x20000098
 8001a74:	20000094 	.word	0x20000094
 8001a78:	40020c00 	.word	0x40020c00

08001a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b094      	sub	sp, #80	; 0x50
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0320 	add.w	r3, r7, #32
 8001a86:	2230      	movs	r2, #48	; 0x30
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f9cc 	bl	8001e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	4a28      	ldr	r2, [pc, #160]	; (8001b48 <SystemClock_Config+0xcc>)
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <SystemClock_Config+0xcc>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <SystemClock_Config+0xcc>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <SystemClock_Config+0xd0>)
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <SystemClock_Config+0xd0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <SystemClock_Config+0xd0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001adc:	2301      	movs	r3, #1
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aec:	2308      	movs	r3, #8
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001af0:	23a8      	movs	r3, #168	; 0xa8
 8001af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001af8:	2304      	movs	r3, #4
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f815 	bl	8000b30 <HAL_RCC_OscConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b0c:	f000 f88e 	bl	8001c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b10:	230f      	movs	r3, #15
 8001b12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b14:	2302      	movs	r3, #2
 8001b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fa76 	bl	8001020 <HAL_RCC_ClockConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b3a:	f000 f877 	bl	8001c2c <Error_Handler>
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3750      	adds	r7, #80	; 0x50
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40007000 	.word	0x40007000

08001b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <MX_USART2_UART_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b88:	f7ff fc1a 	bl	80013c0 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b92:	f000 f84b 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000098 	.word	0x20000098
 8001ba0:	40004400 	.word	0x40004400

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4a19      	ldr	r2, [pc, #100]	; (8001c24 <MX_GPIO_Init+0x80>)
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_GPIO_Init+0x80>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_GPIO_Init+0x80>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_GPIO_Init+0x80>)
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <MX_GPIO_Init+0x80>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <MX_GPIO_Init+0x80>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <MX_GPIO_Init+0x84>)
 8001bfa:	f7fe ff65 	bl	8000ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bfe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	4619      	mov	r1, r3
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_GPIO_Init+0x84>)
 8001c18:	f7fe fdbc 	bl	8000794 <HAL_GPIO_Init>

}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020c00 	.word	0x40020c00

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <Error_Handler+0x6>

08001c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_UART_MspInit+0x84>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12b      	bne.n	8001cfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <HAL_UART_MspInit+0x88>)
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_UART_MspInit+0x88>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_UART_MspInit+0x88>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_UART_MspInit+0x88>)
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_UART_MspInit+0x88>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_UART_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cde:	230c      	movs	r3, #12
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_UART_MspInit+0x8c>)
 8001cfa:	f7fe fd4b 	bl	8000794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <NMI_Handler+0x4>

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f7fe fc14 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <SystemInit+0x20>)
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <SystemInit+0x20>)
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da8:	4c0b      	ldr	r4, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001db6:	f7ff ffd7 	bl	8001d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f000 f811 	bl	8001de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff fe0d 	bl	80019dc <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dc4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dd0:	08001e78 	.word	0x08001e78
  ldr r2, =_sbss
 8001dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dd8:	200000dc 	.word	0x200000dc

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <__libc_init_array>:
 8001de0:	b570      	push	{r4, r5, r6, lr}
 8001de2:	4e0d      	ldr	r6, [pc, #52]	; (8001e18 <__libc_init_array+0x38>)
 8001de4:	4c0d      	ldr	r4, [pc, #52]	; (8001e1c <__libc_init_array+0x3c>)
 8001de6:	1ba4      	subs	r4, r4, r6
 8001de8:	10a4      	asrs	r4, r4, #2
 8001dea:	2500      	movs	r5, #0
 8001dec:	42a5      	cmp	r5, r4
 8001dee:	d109      	bne.n	8001e04 <__libc_init_array+0x24>
 8001df0:	4e0b      	ldr	r6, [pc, #44]	; (8001e20 <__libc_init_array+0x40>)
 8001df2:	4c0c      	ldr	r4, [pc, #48]	; (8001e24 <__libc_init_array+0x44>)
 8001df4:	f000 f820 	bl	8001e38 <_init>
 8001df8:	1ba4      	subs	r4, r4, r6
 8001dfa:	10a4      	asrs	r4, r4, #2
 8001dfc:	2500      	movs	r5, #0
 8001dfe:	42a5      	cmp	r5, r4
 8001e00:	d105      	bne.n	8001e0e <__libc_init_array+0x2e>
 8001e02:	bd70      	pop	{r4, r5, r6, pc}
 8001e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e08:	4798      	blx	r3
 8001e0a:	3501      	adds	r5, #1
 8001e0c:	e7ee      	b.n	8001dec <__libc_init_array+0xc>
 8001e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e12:	4798      	blx	r3
 8001e14:	3501      	adds	r5, #1
 8001e16:	e7f2      	b.n	8001dfe <__libc_init_array+0x1e>
 8001e18:	08001e70 	.word	0x08001e70
 8001e1c:	08001e70 	.word	0x08001e70
 8001e20:	08001e70 	.word	0x08001e70
 8001e24:	08001e74 	.word	0x08001e74

08001e28 <memset>:
 8001e28:	4402      	add	r2, r0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <memset+0xa>
 8001e30:	4770      	bx	lr
 8001e32:	f803 1b01 	strb.w	r1, [r3], #1
 8001e36:	e7f9      	b.n	8001e2c <memset+0x4>

08001e38 <_init>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	bf00      	nop
 8001e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e3e:	bc08      	pop	{r3}
 8001e40:	469e      	mov	lr, r3
 8001e42:	4770      	bx	lr

08001e44 <_fini>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr
