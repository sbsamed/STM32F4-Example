
0_04_teknofest_pwm_encoder_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08004d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          000002d0  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200004ac  200004ac  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f0c4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ba7  00000000  00000000  0002f2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d78  00000000  00000000  00030e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cd0  00000000  00000000  00031bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000731a  00000000  00000000  000328c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004462  00000000  00000000  00039bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003e03c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003adc  00000000  00000000  0003e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bd8 	.word	0x08004bd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08004bd8 	.word	0x08004bd8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fb8d 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f004 f800 	bl	8004510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fba5 	bl	8000c8a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 fb6d 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000210 	.word	0x20000210

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000210 	.word	0x20000210

080005bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e033      	b.n	800063a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d109      	bne.n	80005ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f003 ffc0 	bl	8004560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	f003 0310 	and.w	r3, r3, #16
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d118      	bne.n	800062c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	f043 0202 	orr.w	r2, r3, #2
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f93c 	bl	800088c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f023 0303 	bic.w	r3, r3, #3
 8000622:	f043 0201 	orr.w	r2, r3, #1
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	641a      	str	r2, [r3, #64]	; 0x40
 800062a:	e001      	b.n	8000630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000644:	b490      	push	{r4, r7}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800064e:	2300      	movs	r3, #0
 8000650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000658:	2b01      	cmp	r3, #1
 800065a:	d101      	bne.n	8000660 <HAL_ADC_ConfigChannel+0x1c>
 800065c:	2302      	movs	r3, #2
 800065e:	e107      	b.n	8000870 <HAL_ADC_ConfigChannel+0x22c>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2201      	movs	r2, #1
 8000664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b09      	cmp	r3, #9
 800066e:	d926      	bls.n	80006be <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68d9      	ldr	r1, [r3, #12]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	b29b      	uxth	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	4603      	mov	r3, r0
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4403      	add	r3, r0
 8000688:	3b1e      	subs	r3, #30
 800068a:	2007      	movs	r0, #7
 800068c:	fa00 f303 	lsl.w	r3, r0, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	400b      	ands	r3, r1
 8000694:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68d9      	ldr	r1, [r3, #12]
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	461c      	mov	r4, r3
 80006ac:	4623      	mov	r3, r4
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4423      	add	r3, r4
 80006b2:	3b1e      	subs	r3, #30
 80006b4:	fa00 f303 	lsl.w	r3, r0, r3
 80006b8:	430b      	orrs	r3, r1
 80006ba:	60d3      	str	r3, [r2, #12]
 80006bc:	e023      	b.n	8000706 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	6919      	ldr	r1, [r3, #16]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	4603      	mov	r3, r0
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4403      	add	r3, r0
 80006d6:	2007      	movs	r0, #7
 80006d8:	fa00 f303 	lsl.w	r3, r0, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	400b      	ands	r3, r1
 80006e0:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6919      	ldr	r1, [r3, #16]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	6898      	ldr	r0, [r3, #8]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	461c      	mov	r4, r3
 80006f8:	4623      	mov	r3, r4
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4423      	add	r3, r4
 80006fe:	fa00 f303 	lsl.w	r3, r0, r3
 8000702:	430b      	orrs	r3, r1
 8000704:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	2b06      	cmp	r3, #6
 800070c:	d824      	bhi.n	8000758 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6819      	ldr	r1, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685a      	ldr	r2, [r3, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	3b05      	subs	r3, #5
 8000724:	221f      	movs	r2, #31
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43db      	mvns	r3, r3
 800072c:	4003      	ands	r3, r0
 800072e:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	461c      	mov	r4, r3
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	3b05      	subs	r3, #5
 800074e:	fa04 f303 	lsl.w	r3, r4, r3
 8000752:	4303      	orrs	r3, r0
 8000754:	634b      	str	r3, [r1, #52]	; 0x34
 8000756:	e04c      	b.n	80007f2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	2b0c      	cmp	r3, #12
 800075e:	d824      	bhi.n	80007aa <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	3b23      	subs	r3, #35	; 0x23
 8000776:	221f      	movs	r2, #31
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	4003      	ands	r3, r0
 8000780:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	461c      	mov	r4, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685a      	ldr	r2, [r3, #4]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	3b23      	subs	r3, #35	; 0x23
 80007a0:	fa04 f303 	lsl.w	r3, r4, r3
 80007a4:	4303      	orrs	r3, r0
 80007a6:	630b      	str	r3, [r1, #48]	; 0x30
 80007a8:	e023      	b.n	80007f2 <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	3b41      	subs	r3, #65	; 0x41
 80007c0:	221f      	movs	r2, #31
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4003      	ands	r3, r0
 80007ca:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	461c      	mov	r4, r3
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	3b41      	subs	r3, #65	; 0x41
 80007ea:	fa04 f303 	lsl.w	r3, r4, r3
 80007ee:	4303      	orrs	r3, r0
 80007f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADC_ConfigChannel+0x238>)
 80007f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <HAL_ADC_ConfigChannel+0x23c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d109      	bne.n	8000814 <HAL_ADC_ConfigChannel+0x1d0>
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b12      	cmp	r3, #18
 8000806:	d105      	bne.n	8000814 <HAL_ADC_ConfigChannel+0x1d0>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a19      	ldr	r2, [pc, #100]	; (8000880 <HAL_ADC_ConfigChannel+0x23c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d123      	bne.n	8000866 <HAL_ADC_ConfigChannel+0x222>
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b10      	cmp	r3, #16
 8000824:	d003      	beq.n	800082e <HAL_ADC_ConfigChannel+0x1ea>
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b11      	cmp	r3, #17
 800082c:	d11b      	bne.n	8000866 <HAL_ADC_ConfigChannel+0x222>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b10      	cmp	r3, #16
 8000840:	d111      	bne.n	8000866 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_ADC_ConfigChannel+0x240>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <HAL_ADC_ConfigChannel+0x244>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	0c9a      	lsrs	r2, r3, #18
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000858:	e002      	b.n	8000860 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	3b01      	subs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d1f9      	bne.n	800085a <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bc90      	pop	{r4, r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40012300 	.word	0x40012300
 8000880:	40012000 	.word	0x40012000
 8000884:	20000008 	.word	0x20000008
 8000888:	431bde83 	.word	0x431bde83

0800088c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000894:	4b79      	ldr	r3, [pc, #484]	; (8000a7c <ADC_Init+0x1f0>)
 8000896:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	431a      	orrs	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	6812      	ldr	r2, [r2, #0]
 80008ba:	6852      	ldr	r2, [r2, #4]
 80008bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	6851      	ldr	r1, [r2, #4]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	6912      	ldr	r2, [r2, #16]
 80008d0:	0212      	lsls	r2, r2, #8
 80008d2:	430a      	orrs	r2, r1
 80008d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	6852      	ldr	r2, [r2, #4]
 80008e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	6851      	ldr	r1, [r2, #4]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6892      	ldr	r2, [r2, #8]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	6892      	ldr	r2, [r2, #8]
 8000902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	6891      	ldr	r1, [r2, #8]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68d2      	ldr	r2, [r2, #12]
 8000916:	430a      	orrs	r2, r1
 8000918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	4a58      	ldr	r2, [pc, #352]	; (8000a80 <ADC_Init+0x1f4>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d022      	beq.n	800096a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6812      	ldr	r2, [r2, #0]
 800092c:	6892      	ldr	r2, [r2, #8]
 800092e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6812      	ldr	r2, [r2, #0]
 800093c:	6891      	ldr	r1, [r2, #8]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000942:	430a      	orrs	r2, r1
 8000944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	6892      	ldr	r2, [r2, #8]
 8000950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	6891      	ldr	r1, [r2, #8]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000964:	430a      	orrs	r2, r1
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	e00f      	b.n	800098a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	6892      	ldr	r2, [r2, #8]
 8000974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	6892      	ldr	r2, [r2, #8]
 8000984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	6892      	ldr	r2, [r2, #8]
 8000994:	f022 0202 	bic.w	r2, r2, #2
 8000998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	6891      	ldr	r1, [r2, #8]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	7e12      	ldrb	r2, [r2, #24]
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d01b      	beq.n	80009f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	6852      	ldr	r2, [r2, #4]
 80009c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	6812      	ldr	r2, [r2, #0]
 80009d0:	6852      	ldr	r2, [r2, #4]
 80009d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6812      	ldr	r2, [r2, #0]
 80009e0:	6851      	ldr	r1, [r2, #4]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009e6:	3a01      	subs	r2, #1
 80009e8:	0352      	lsls	r2, r2, #13
 80009ea:	430a      	orrs	r2, r1
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	e007      	b.n	8000a00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	6852      	ldr	r2, [r2, #4]
 80009fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	6812      	ldr	r2, [r2, #0]
 8000a18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	69d2      	ldr	r2, [r2, #28]
 8000a1e:	3a01      	subs	r2, #1
 8000a20:	0512      	lsls	r2, r2, #20
 8000a22:	430a      	orrs	r2, r1
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	6812      	ldr	r2, [r2, #0]
 8000a2e:	6892      	ldr	r2, [r2, #8]
 8000a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	6891      	ldr	r1, [r2, #8]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8000a46:	0252      	lsls	r2, r2, #9
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	6892      	ldr	r2, [r2, #8]
 8000a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	6891      	ldr	r1, [r2, #8]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	6952      	ldr	r2, [r2, #20]
 8000a6a:	0292      	lsls	r2, r2, #10
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	609a      	str	r2, [r3, #8]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40012300 	.word	0x40012300
 8000a80:	0f000001 	.word	0x0f000001

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	4909      	ldr	r1, [pc, #36]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	095b      	lsrs	r3, r3, #5
 8000b02:	79fa      	ldrb	r2, [r7, #7]
 8000b04:	f002 021f 	and.w	r2, r2, #31
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	490d      	ldr	r1, [pc, #52]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	4909      	ldr	r1, [pc, #36]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f003 030f 	and.w	r3, r3, #15
 8000b56:	3b04      	subs	r3, #4
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	2201      	movs	r2, #1
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	1e5a      	subs	r2, r3, #1
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	401a      	ands	r2, r3
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc6:	1e59      	subs	r1, r3, #1
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	4313      	orrs	r3, r2
         );
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3724      	adds	r7, #36	; 0x24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f7ff ff90 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff2b 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff40 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff90 	bl	8000b78 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5f 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff33 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa2 	bl	8000bdc <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff fc78 	bl	80005a4 <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e099      	b.n	8000df4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	f022 0201 	bic.w	r2, r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ce0:	e00f      	b.n	8000d02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ce2:	f7ff fc5f 	bl	80005a4 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b05      	cmp	r3, #5
 8000cee:	d908      	bls.n	8000d02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e078      	b.n	8000df4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e8      	bne.n	8000ce2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d18:	697a      	ldr	r2, [r7, #20]
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <HAL_DMA_Init+0x158>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d107      	bne.n	8000d6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4313      	orrs	r3, r2
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f023 0307 	bic.w	r3, r3, #7
 8000d82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d117      	bne.n	8000dc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00e      	beq.n	8000dc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 fa7b 	bl	80012a4 <DMA_CheckFifoParam>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d008      	beq.n	8000dc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2240      	movs	r2, #64	; 0x40
 8000db8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e016      	b.n	8000df4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 fa32 	bl	8001238 <DMA_CalcBaseAndBitshift>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ddc:	223f      	movs	r2, #63	; 0x3f
 8000dde:	409a      	lsls	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	f010803f 	.word	0xf010803f

08000e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e0e:	f7ff fbc9 	bl	80005a4 <HAL_GetTick>
 8000e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d008      	beq.n	8000e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e052      	b.n	8000ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	6812      	ldr	r2, [r2, #0]
 8000e3c:	f022 0216 	bic.w	r2, r2, #22
 8000e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	6952      	ldr	r2, [r2, #20]
 8000e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d103      	bne.n	8000e62 <HAL_DMA_Abort+0x62>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	6812      	ldr	r2, [r2, #0]
 8000e6c:	f022 0208 	bic.w	r2, r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e82:	e013      	b.n	8000eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e84:	f7ff fb8e 	bl	80005a4 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d90c      	bls.n	8000eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2220      	movs	r2, #32
 8000e96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e015      	b.n	8000ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1e4      	bne.n	8000e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ebe:	223f      	movs	r2, #63	; 0x3f
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d004      	beq.n	8000efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00c      	b.n	8000f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6812      	ldr	r2, [r2, #0]
 8000f0e:	6812      	ldr	r2, [r2, #0]
 8000f10:	f022 0201 	bic.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f30:	4b92      	ldr	r3, [pc, #584]	; (800117c <HAL_DMA_IRQHandler+0x258>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a92      	ldr	r2, [pc, #584]	; (8001180 <HAL_DMA_IRQHandler+0x25c>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0a9b      	lsrs	r3, r3, #10
 8000f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4e:	2208      	movs	r2, #8
 8000f50:	409a      	lsls	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d01a      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	6812      	ldr	r2, [r2, #0]
 8000f72:	f022 0204 	bic.w	r2, r2, #4
 8000f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	2201      	movs	r2, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d012      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00b      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fbe:	f043 0202 	orr.w	r2, r3, #2
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fca:	2204      	movs	r2, #4
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d012      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00b      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe8:	2204      	movs	r2, #4
 8000fea:	409a      	lsls	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff4:	f043 0204 	orr.w	r2, r3, #4
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001000:	2210      	movs	r2, #16
 8001002:	409a      	lsls	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d043      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d03c      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101e:	2210      	movs	r2, #16
 8001020:	409a      	lsls	r2, r3
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d018      	beq.n	8001066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d108      	bne.n	8001054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d024      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	4798      	blx	r3
 8001052:	e01f      	b.n	8001094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001058:	2b00      	cmp	r3, #0
 800105a:	d01b      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
 8001064:	e016      	b.n	8001094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	f022 0208 	bic.w	r2, r2, #8
 8001082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001098:	2220      	movs	r2, #32
 800109a:	409a      	lsls	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 808e 	beq.w	80011c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 8086 	beq.w	80011c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ba:	2220      	movs	r2, #32
 80010bc:	409a      	lsls	r2, r3
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d136      	bne.n	800113c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	f022 0216 	bic.w	r2, r2, #22
 80010dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	6952      	ldr	r2, [r2, #20]
 80010e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <HAL_DMA_IRQHandler+0x1da>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	f022 0208 	bic.w	r2, r2, #8
 800110c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001112:	223f      	movs	r2, #63	; 0x3f
 8001114:	409a      	lsls	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800112e:	2b00      	cmp	r3, #0
 8001130:	d07d      	beq.n	800122e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	4798      	blx	r3
        }
        return;
 800113a:	e078      	b.n	800122e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d01c      	beq.n	8001184 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d108      	bne.n	800116a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	2b00      	cmp	r3, #0
 800115e:	d030      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4798      	blx	r3
 8001168:	e02b      	b.n	80011c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116e:	2b00      	cmp	r3, #0
 8001170:	d027      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	4798      	blx	r3
 800117a:	e022      	b.n	80011c2 <HAL_DMA_IRQHandler+0x29e>
 800117c:	20000008 	.word	0x20000008
 8001180:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	f022 0210 	bic.w	r2, r2, #16
 80011a0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d032      	beq.n	8001230 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d022      	beq.n	800121c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2205      	movs	r2, #5
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d807      	bhi.n	800120a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f2      	bne.n	80011ee <HAL_DMA_IRQHandler+0x2ca>
 8001208:	e000      	b.n	800120c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800120a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
 800122c:	e000      	b.n	8001230 <HAL_DMA_IRQHandler+0x30c>
        return;
 800122e:	bf00      	nop
    }
  }
}
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop

08001238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3b10      	subs	r3, #16
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <DMA_CalcBaseAndBitshift+0x64>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <DMA_CalcBaseAndBitshift+0x68>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d909      	bls.n	800127a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	1d1a      	adds	r2, r3, #4
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	659a      	str	r2, [r3, #88]	; 0x58
 8001278:	e007      	b.n	800128a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001282:	f023 0303 	bic.w	r3, r3, #3
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	aaaaaaab 	.word	0xaaaaaaab
 80012a0:	08004bf0 	.word	0x08004bf0

080012a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11f      	bne.n	80012fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d855      	bhi.n	8001370 <DMA_CheckFifoParam+0xcc>
 80012c4:	a201      	add	r2, pc, #4	; (adr r2, 80012cc <DMA_CheckFifoParam+0x28>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	080012ef 	.word	0x080012ef
 80012d4:	080012dd 	.word	0x080012dd
 80012d8:	08001371 	.word	0x08001371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d045      	beq.n	8001374 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012ec:	e042      	b.n	8001374 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80012f6:	d13f      	bne.n	8001378 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012fc:	e03c      	b.n	8001378 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001306:	d121      	bne.n	800134c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d836      	bhi.n	800137c <DMA_CheckFifoParam+0xd8>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <DMA_CheckFifoParam+0x70>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001325 	.word	0x08001325
 8001318:	0800132b 	.word	0x0800132b
 800131c:	08001325 	.word	0x08001325
 8001320:	0800133d 	.word	0x0800133d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
      break;
 8001328:	e02f      	b.n	800138a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d024      	beq.n	8001380 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800133a:	e021      	b.n	8001380 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001344:	d11e      	bne.n	8001384 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800134a:	e01b      	b.n	8001384 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d902      	bls.n	8001358 <DMA_CheckFifoParam+0xb4>
 8001352:	2b03      	cmp	r3, #3
 8001354:	d003      	beq.n	800135e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001356:	e018      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
      break;
 800135c:	e015      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00e      	beq.n	8001388 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
      break;
 800136e:	e00b      	b.n	8001388 <DMA_CheckFifoParam+0xe4>
      break;
 8001370:	bf00      	nop
 8001372:	e00a      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      break;
 8001374:	bf00      	nop
 8001376:	e008      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      break;
 8001378:	bf00      	nop
 800137a:	e006      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      break;
 800137c:	bf00      	nop
 800137e:	e004      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      break;
 8001380:	bf00      	nop
 8001382:	e002      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      break;   
 8001384:	bf00      	nop
 8001386:	e000      	b.n	800138a <DMA_CheckFifoParam+0xe6>
      break;
 8001388:	bf00      	nop
    }
  } 
  
  return status; 
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4a5f      	ldr	r2, [pc, #380]	; (80016a0 <HAL_GPIO_Init+0x308>)
 8001524:	4b5e      	ldr	r3, [pc, #376]	; (80016a0 <HAL_GPIO_Init+0x308>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_GPIO_Init+0x308>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <HAL_GPIO_Init+0x310>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a50      	ldr	r2, [pc, #320]	; (80016ac <HAL_GPIO_Init+0x314>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4f      	ldr	r2, [pc, #316]	; (80016b0 <HAL_GPIO_Init+0x318>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4e      	ldr	r2, [pc, #312]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4d      	ldr	r2, [pc, #308]	; (80016b8 <HAL_GPIO_Init+0x320>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4c      	ldr	r2, [pc, #304]	; (80016bc <HAL_GPIO_Init+0x324>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_GPIO_Init+0x328>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4a      	ldr	r2, [pc, #296]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4934      	ldr	r1, [pc, #208]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <HAL_GPIO_Init+0x330>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001602:	4a31      	ldr	r2, [pc, #196]	; (80016c8 <HAL_GPIO_Init+0x330>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001608:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162c:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_GPIO_Init+0x330>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a1c      	ldr	r2, [pc, #112]	; (80016c8 <HAL_GPIO_Init+0x330>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_GPIO_Init+0x330>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40021c00 	.word	0x40021c00
 80016c8:	40013c00 	.word	0x40013c00

080016cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e264      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d075      	beq.n	80017d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ea:	4ba3      	ldr	r3, [pc, #652]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d00c      	beq.n	8001710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d112      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	4b9d      	ldr	r3, [pc, #628]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170e:	d10b      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	4b99      	ldr	r3, [pc, #612]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d05b      	beq.n	80017d4 <HAL_RCC_OscConfig+0x108>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d157      	bne.n	80017d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e23f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x74>
 8001732:	4a91      	ldr	r2, [pc, #580]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	4b90      	ldr	r3, [pc, #576]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4a8b      	ldr	r2, [pc, #556]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	4b8a      	ldr	r3, [pc, #552]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4a88      	ldr	r2, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	4b87      	ldr	r3, [pc, #540]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001764:	4a84      	ldr	r2, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4a81      	ldr	r2, [pc, #516]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001772:	4b81      	ldr	r3, [pc, #516]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7fe ff0e 	bl	80005a4 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178c:	f7fe ff0a 	bl	80005a4 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e204      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b76      	ldr	r3, [pc, #472]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xc0>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7fe fefa 	bl	80005a4 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7fe fef6 	bl	80005a4 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1f0      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	4b6c      	ldr	r3, [pc, #432]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0xe8>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b62      	ldr	r3, [pc, #392]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11c      	bne.n	8001834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fa:	4b5f      	ldr	r3, [pc, #380]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x152>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1c4      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4956      	ldr	r1, [pc, #344]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	e03a      	b.n	80018aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_RCC_OscConfig+0x2b0>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7fe feaf 	bl	80005a4 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184a:	f7fe feab 	bl	80005a4 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1a5      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4943      	ldr	r1, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_OscConfig+0x2b0>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7fe fe8e 	bl	80005a4 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188c:	f7fe fe8a 	bl	80005a4 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e184      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d030      	beq.n	8001918 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_RCC_OscConfig+0x2b4>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7fe fe6e 	bl	80005a4 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018cc:	f7fe fe6a 	bl	80005a4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e164      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x200>
 80018ea:	e015      	b.n	8001918 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_RCC_OscConfig+0x2b4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7fe fe57 	bl	80005a4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7fe fe53 	bl	80005a4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e14d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a0 	beq.w	8001a66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x2b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d121      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_RCC_OscConfig+0x2b8>)
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <HAL_RCC_OscConfig+0x2b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7fe fe19 	bl	80005a4 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e011      	b.n	800199a <HAL_RCC_OscConfig+0x2ce>
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	42470000 	.word	0x42470000
 8001980:	42470e80 	.word	0x42470e80
 8001984:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001988:	f7fe fe0c 	bl	80005a4 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e106      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b85      	ldr	r3, [pc, #532]	; (8001bb0 <HAL_RCC_OscConfig+0x4e4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x2f0>
 80019ae:	4a81      	ldr	r2, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019b0:	4b80      	ldr	r3, [pc, #512]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ba:	e01c      	b.n	80019f6 <HAL_RCC_OscConfig+0x32a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x312>
 80019c4:	4a7b      	ldr	r2, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	4b7b      	ldr	r3, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	4a78      	ldr	r2, [pc, #480]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019d2:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	e00b      	b.n	80019f6 <HAL_RCC_OscConfig+0x32a>
 80019de:	4a75      	ldr	r2, [pc, #468]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019ec:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d015      	beq.n	8001a2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7fe fdd1 	bl	80005a4 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7fe fdcd 	bl	80005a4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0c5      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ee      	beq.n	8001a06 <HAL_RCC_OscConfig+0x33a>
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7fe fdbb 	bl	80005a4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7fe fdb7 	bl	80005a4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0af      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1ee      	bne.n	8001a32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4a56      	ldr	r2, [pc, #344]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 809b 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d05c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d141      	bne.n	8001b08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <HAL_RCC_OscConfig+0x4ec>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7fe fd8b 	bl	80005a4 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7fe fd87 	bl	80005a4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e081      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa4:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab0:	4940      	ldr	r1, [pc, #256]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	019b      	lsls	r3, r3, #6
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x4ec>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7fe fd60 	bl	80005a4 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7fe fd5c 	bl	80005a4 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e056      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x41c>
 8001b06:	e04e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b2b      	ldr	r3, [pc, #172]	; (8001bb8 <HAL_RCC_OscConfig+0x4ec>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7fe fd49 	bl	80005a4 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7fe fd45 	bl	80005a4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e03f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x44a>
 8001b34:	e037      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e032      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_RCC_OscConfig+0x4e8>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d028      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d121      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d11a      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b72:	4013      	ands	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d111      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	42470060 	.word	0x42470060

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0cc      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0207 	and.w	r2, r3, #7
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d20c      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0207 	and.w	r2, r3, #7
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c10:	4a59      	ldr	r2, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c28:	4a53      	ldr	r2, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4950      	ldr	r1, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d044      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d119      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e067      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 0203 	bic.w	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cac:	f7fe fc7a 	bl	80005a4 <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7fe fc76 	bl	80005a4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0207 	and.w	r2, r3, #7
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d90c      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0207 	and.w	r2, r3, #7
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4919      	ldr	r1, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2e:	4912      	ldr	r1, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d42:	f000 f821 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d46:	4601      	mov	r1, r0
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbda 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	08004bf8 	.word	0x08004bf8
 8001d80:	20000008 	.word	0x20000008
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d8c:	b08f      	sub	sp, #60	; 0x3c
 8001d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da0:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d007      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x34>
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d008      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 80b2 	bne.w	8001f1a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db6:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001dba:	e0b1      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc0:	e0ae      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dcc:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d04e      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd8:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	f04f 0400 	mov.w	r4, #0
 8001de2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	ea01 0103 	and.w	r1, r1, r3
 8001dee:	ea02 0204 	and.w	r2, r2, r4
 8001df2:	460b      	mov	r3, r1
 8001df4:	4614      	mov	r4, r2
 8001df6:	0160      	lsls	r0, r4, #5
 8001df8:	6278      	str	r0, [r7, #36]	; 0x24
 8001dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dfc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001e00:	6278      	str	r0, [r7, #36]	; 0x24
 8001e02:	015b      	lsls	r3, r3, #5
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001e0a:	1a5b      	subs	r3, r3, r1
 8001e0c:	eb64 0402 	sbc.w	r4, r4, r2
 8001e10:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001e14:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001e18:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001e1c:	ebb8 0803 	subs.w	r8, r8, r3
 8001e20:	eb69 0904 	sbc.w	r9, r9, r4
 8001e24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001e3c:	eb18 0801 	adds.w	r8, r8, r1
 8001e40:	eb49 0902 	adc.w	r9, r9, r2
 8001e44:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e5c:	4640      	mov	r0, r8
 8001e5e:	4649      	mov	r1, r9
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	f04f 0400 	mov.w	r4, #0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4623      	mov	r3, r4
 8001e6a:	f7fe f9ad 	bl	80001c8 <__aeabi_uldivmod>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	460c      	mov	r4, r1
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
 8001e74:	e043      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	f04f 0400 	mov.w	r4, #0
 8001e80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	ea01 0103 	and.w	r1, r1, r3
 8001e8c:	ea02 0204 	and.w	r2, r2, r4
 8001e90:	460b      	mov	r3, r1
 8001e92:	4614      	mov	r4, r2
 8001e94:	0160      	lsls	r0, r4, #5
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	015b      	lsls	r3, r3, #5
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ea8:	1a5b      	subs	r3, r3, r1
 8001eaa:	eb64 0402 	sbc.w	r4, r4, r2
 8001eae:	01a6      	lsls	r6, r4, #6
 8001eb0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001eb4:	019d      	lsls	r5, r3, #6
 8001eb6:	1aed      	subs	r5, r5, r3
 8001eb8:	eb66 0604 	sbc.w	r6, r6, r4
 8001ebc:	00f3      	lsls	r3, r6, #3
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	00eb      	lsls	r3, r5, #3
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001ed0:	186d      	adds	r5, r5, r1
 8001ed2:	eb46 0602 	adc.w	r6, r6, r2
 8001ed6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001eda:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001ede:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001ee2:	4655      	mov	r5, sl
 8001ee4:	465e      	mov	r6, fp
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	4631      	mov	r1, r6
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	f04f 0400 	mov.w	r4, #0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	f7fe f968 	bl	80001c8 <__aeabi_uldivmod>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	0c1b      	lsrs	r3, r3, #16
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f18:	e002      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	373c      	adds	r7, #60	; 0x3c
 8001f26:	46bd      	mov	sp, r7
 8001f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	00f42400 	.word	0x00f42400
 8001f34:	007a1200 	.word	0x007a1200

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000008 	.word	0x20000008

08001f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f54:	f7ff fff0 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	08004c08 	.word	0x08004c08

08001f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f7c:	f7ff ffdc 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f80:	4601      	mov	r1, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0b5b      	lsrs	r3, r3, #13
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08004c08 	.word	0x08004c08

08001fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e041      	b.n	8002036 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f002 fbbc 	bl	8004744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f000 faec 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d109      	bne.n	8002064 <HAL_TIM_PWM_Start+0x24>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e022      	b.n	80020aa <HAL_TIM_PWM_Start+0x6a>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d109      	bne.n	800207e <HAL_TIM_PWM_Start+0x3e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	e015      	b.n	80020aa <HAL_TIM_PWM_Start+0x6a>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d109      	bne.n	8002098 <HAL_TIM_PWM_Start+0x58>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e008      	b.n	80020aa <HAL_TIM_PWM_Start+0x6a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07c      	b.n	80021ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <HAL_TIM_PWM_Start+0x82>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c0:	e013      	b.n	80020ea <HAL_TIM_PWM_Start+0xaa>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d104      	bne.n	80020d2 <HAL_TIM_PWM_Start+0x92>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	e00b      	b.n	80020ea <HAL_TIM_PWM_Start+0xaa>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_PWM_Start+0xa2>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e0:	e003      	b.n	80020ea <HAL_TIM_PWM_Start+0xaa>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fcb2 	bl	8002a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_TIM_PWM_Start+0x174>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_TIM_PWM_Start+0xcc>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2c      	ldr	r2, [pc, #176]	; (80021b8 <HAL_TIM_PWM_Start+0x178>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <HAL_TIM_PWM_Start+0xd0>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <HAL_TIM_PWM_Start+0xd2>
 8002110:	2300      	movs	r3, #0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <HAL_TIM_PWM_Start+0x174>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d022      	beq.n	8002176 <HAL_TIM_PWM_Start+0x136>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d01d      	beq.n	8002176 <HAL_TIM_PWM_Start+0x136>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <HAL_TIM_PWM_Start+0x17c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d018      	beq.n	8002176 <HAL_TIM_PWM_Start+0x136>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_TIM_PWM_Start+0x180>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_TIM_PWM_Start+0x136>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_TIM_PWM_Start+0x184>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00e      	beq.n	8002176 <HAL_TIM_PWM_Start+0x136>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_TIM_PWM_Start+0x178>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d009      	beq.n	8002176 <HAL_TIM_PWM_Start+0x136>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_TIM_PWM_Start+0x188>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d004      	beq.n	8002176 <HAL_TIM_PWM_Start+0x136>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a16      	ldr	r2, [pc, #88]	; (80021cc <HAL_TIM_PWM_Start+0x18c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d111      	bne.n	800219a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b06      	cmp	r3, #6
 8002186:	d010      	beq.n	80021aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	f042 0201 	orr.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002198:	e007      	b.n	80021aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40010000 	.word	0x40010000
 80021b8:	40010400 	.word	0x40010400
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40014000 	.word	0x40014000
 80021cc:	40001800 	.word	0x40001800

080021d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e097      	b.n	8002314 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f002 fa29 	bl	8004650 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002214:	f023 0307 	bic.w	r3, r3, #7
 8002218:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f000 f9c9 	bl	80025bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002252:	f023 0303 	bic.w	r3, r3, #3
 8002256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	4313      	orrs	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002270:	f023 030c 	bic.w	r3, r3, #12
 8002274:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800227c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	4313      	orrs	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	011a      	lsls	r2, r3, #4
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	031b      	lsls	r3, r3, #12
 80022a0:	4313      	orrs	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80022ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80022b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4313      	orrs	r3, r2
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800232c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002334:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800233c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002344:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d110      	bne.n	800236e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d102      	bne.n	8002358 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002352:	7b7b      	ldrb	r3, [r7, #13]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d001      	beq.n	800235c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e068      	b.n	800242e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800236c:	e031      	b.n	80023d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d110      	bne.n	8002396 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002374:	7bbb      	ldrb	r3, [r7, #14]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d102      	bne.n	8002380 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800237a:	7b3b      	ldrb	r3, [r7, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d001      	beq.n	8002384 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e054      	b.n	800242e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002394:	e01d      	b.n	80023d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800239c:	7bbb      	ldrb	r3, [r7, #14]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d105      	bne.n	80023ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80023a2:	7b7b      	ldrb	r3, [r7, #13]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80023a8:	7b3b      	ldrb	r3, [r7, #12]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d001      	beq.n	80023b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e03d      	b.n	800242e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_TIM_Encoder_Start+0xc2>
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d008      	beq.n	80023ee <HAL_TIM_Encoder_Start+0xd2>
 80023dc:	e00f      	b.n	80023fe <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb38 	bl	8002a5c <TIM_CCxChannelCmd>
      break;
 80023ec:	e016      	b.n	800241c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2201      	movs	r2, #1
 80023f4:	2104      	movs	r1, #4
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fb30 	bl	8002a5c <TIM_CCxChannelCmd>
      break;
 80023fc:	e00e      	b.n	800241c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fb28 	bl	8002a5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	2104      	movs	r1, #4
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fb21 	bl	8002a5c <TIM_CCxChannelCmd>
      break;
 800241a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002452:	2302      	movs	r3, #2
 8002454:	e0ae      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	f200 809f 	bhi.w	80025a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	080024a1 	.word	0x080024a1
 8002470:	080025a5 	.word	0x080025a5
 8002474:	080025a5 	.word	0x080025a5
 8002478:	080025a5 	.word	0x080025a5
 800247c:	080024e1 	.word	0x080024e1
 8002480:	080025a5 	.word	0x080025a5
 8002484:	080025a5 	.word	0x080025a5
 8002488:	080025a5 	.word	0x080025a5
 800248c:	08002523 	.word	0x08002523
 8002490:	080025a5 	.word	0x080025a5
 8002494:	080025a5 	.word	0x080025a5
 8002498:	080025a5 	.word	0x080025a5
 800249c:	08002563 	.word	0x08002563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f928 	bl	80026fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	6992      	ldr	r2, [r2, #24]
 80024b6:	f042 0208 	orr.w	r2, r2, #8
 80024ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	6992      	ldr	r2, [r2, #24]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	6991      	ldr	r1, [r2, #24]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	6912      	ldr	r2, [r2, #16]
 80024da:	430a      	orrs	r2, r1
 80024dc:	619a      	str	r2, [r3, #24]
      break;
 80024de:	e064      	b.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f978 	bl	80027dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	6992      	ldr	r2, [r2, #24]
 80024f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	6992      	ldr	r2, [r2, #24]
 8002506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	6991      	ldr	r1, [r2, #24]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	6912      	ldr	r2, [r2, #16]
 800251a:	0212      	lsls	r2, r2, #8
 800251c:	430a      	orrs	r2, r1
 800251e:	619a      	str	r2, [r3, #24]
      break;
 8002520:	e043      	b.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 f9cd 	bl	80028c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	6812      	ldr	r2, [r2, #0]
 8002536:	69d2      	ldr	r2, [r2, #28]
 8002538:	f042 0208 	orr.w	r2, r2, #8
 800253c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	69d2      	ldr	r2, [r2, #28]
 8002548:	f022 0204 	bic.w	r2, r2, #4
 800254c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	69d1      	ldr	r1, [r2, #28]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	6912      	ldr	r2, [r2, #16]
 800255c:	430a      	orrs	r2, r1
 800255e:	61da      	str	r2, [r3, #28]
      break;
 8002560:	e023      	b.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fa21 	bl	80029b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	69d2      	ldr	r2, [r2, #28]
 8002578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	69d2      	ldr	r2, [r2, #28]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	69d1      	ldr	r1, [r2, #28]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	6912      	ldr	r2, [r2, #16]
 800259c:	0212      	lsls	r2, r2, #8
 800259e:	430a      	orrs	r2, r1
 80025a0:	61da      	str	r2, [r3, #28]
      break;
 80025a2:	e002      	b.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	75fb      	strb	r3, [r7, #23]
      break;
 80025a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a40      	ldr	r2, [pc, #256]	; (80026d0 <TIM_Base_SetConfig+0x114>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d00f      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <TIM_Base_SetConfig+0x118>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00b      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3c      	ldr	r2, [pc, #240]	; (80026d8 <TIM_Base_SetConfig+0x11c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <TIM_Base_SetConfig+0x120>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d003      	beq.n	80025fc <TIM_Base_SetConfig+0x40>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3a      	ldr	r2, [pc, #232]	; (80026e0 <TIM_Base_SetConfig+0x124>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d108      	bne.n	800260e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2f      	ldr	r2, [pc, #188]	; (80026d0 <TIM_Base_SetConfig+0x114>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d02b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d027      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <TIM_Base_SetConfig+0x118>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d023      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <TIM_Base_SetConfig+0x11c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <TIM_Base_SetConfig+0x120>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <TIM_Base_SetConfig+0x124>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d017      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <TIM_Base_SetConfig+0x128>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <TIM_Base_SetConfig+0x12c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00f      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a26      	ldr	r2, [pc, #152]	; (80026ec <TIM_Base_SetConfig+0x130>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00b      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <TIM_Base_SetConfig+0x134>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <TIM_Base_SetConfig+0x138>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_Base_SetConfig+0xb2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <TIM_Base_SetConfig+0x13c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d108      	bne.n	8002680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <TIM_Base_SetConfig+0x114>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d003      	beq.n	80026b4 <TIM_Base_SetConfig+0xf8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <TIM_Base_SetConfig+0x124>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d103      	bne.n	80026bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	615a      	str	r2, [r3, #20]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40000c00 	.word	0x40000c00
 80026e0:	40010400 	.word	0x40010400
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40014400 	.word	0x40014400
 80026ec:	40014800 	.word	0x40014800
 80026f0:	40001800 	.word	0x40001800
 80026f4:	40001c00 	.word	0x40001c00
 80026f8:	40002000 	.word	0x40002000

080026fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	f023 0201 	bic.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f023 0302 	bic.w	r3, r3, #2
 8002744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <TIM_OC1_SetConfig+0xd8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_OC1_SetConfig+0x64>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <TIM_OC1_SetConfig+0xdc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10c      	bne.n	800277a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f023 0308 	bic.w	r3, r3, #8
 8002766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <TIM_OC1_SetConfig+0xd8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_OC1_SetConfig+0x8e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <TIM_OC1_SetConfig+0xdc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	621a      	str	r2, [r3, #32]
}
 80027c8:	bf00      	nop
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40010000 	.word	0x40010000
 80027d8:	40010400 	.word	0x40010400

080027dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	f023 0210 	bic.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0320 	bic.w	r3, r3, #32
 8002826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <TIM_OC2_SetConfig+0xe4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <TIM_OC2_SetConfig+0x68>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <TIM_OC2_SetConfig+0xe8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d10d      	bne.n	8002860 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800285e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <TIM_OC2_SetConfig+0xe4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_OC2_SetConfig+0x94>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <TIM_OC2_SetConfig+0xe8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d113      	bne.n	8002898 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800287e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	621a      	str	r2, [r3, #32]
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40010400 	.word	0x40010400

080028c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a21      	ldr	r2, [pc, #132]	; (80029a8 <TIM_OC3_SetConfig+0xe0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_OC3_SetConfig+0x66>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <TIM_OC3_SetConfig+0xe4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10d      	bne.n	800294a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <TIM_OC3_SetConfig+0xe0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_OC3_SetConfig+0x92>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <TIM_OC3_SetConfig+0xe4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d113      	bne.n	8002982 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	621a      	str	r2, [r3, #32]
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40010400 	.word	0x40010400

080029b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	031b      	lsls	r3, r3, #12
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <TIM_OC4_SetConfig+0xa4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_OC4_SetConfig+0x68>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <TIM_OC4_SetConfig+0xa8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d109      	bne.n	8002a2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	019b      	lsls	r3, r3, #6
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010400 	.word	0x40010400

08002a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	2201      	movs	r2, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1a      	ldr	r2, [r3, #32]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	401a      	ands	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e05a      	b.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a21      	ldr	r2, [pc, #132]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d022      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d01d      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d018      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1a      	ldr	r2, [pc, #104]	; (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10c      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40010400 	.word	0x40010400
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40001800 	.word	0x40001800

08002ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e03f      	b.n	8002c32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f001 fe18 	bl	80047fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fe1b 	bl	8003820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	6912      	ldr	r2, [r2, #16]
 8002bf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	6952      	ldr	r2, [r2, #20]
 8002c04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	68d2      	ldr	r2, [r2, #12]
 8002c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b08a      	sub	sp, #40	; 0x28
 8002c3e:	af02      	add	r7, sp, #8
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d17b      	bne.n	8002d52 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_Transmit+0x2c>
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e074      	b.n	8002d54 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x3e>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e06d      	b.n	8002d54 <HAL_UART_Transmit+0x11a>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8e:	f7fd fc89 	bl	80005a4 <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	88fa      	ldrh	r2, [r7, #6]
 8002c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca8:	d108      	bne.n	8002cbc <HAL_UART_Transmit+0x82>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e003      	b.n	8002cc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ccc:	e029      	b.n	8002d22 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fb99 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e035      	b.n	8002d54 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	8812      	ldrh	r2, [r2, #0]
 8002cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	e007      	b.n	8002d14 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1d0      	bne.n	8002cce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2140      	movs	r1, #64	; 0x40
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fb6a 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e006      	b.n	8002d54 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3720      	adds	r7, #32
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	f040 808c 	bne.w	8002e96 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_Receive+0x2e>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e084      	b.n	8002e98 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Receive+0x40>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e07d      	b.n	8002e98 <HAL_UART_Receive+0x13c>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2222      	movs	r2, #34	; 0x22
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002db8:	f7fd fbf4 	bl	80005a4 <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	d108      	bne.n	8002de6 <HAL_UART_Receive+0x8a>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d104      	bne.n	8002de6 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e003      	b.n	8002dee <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002df6:	e043      	b.n	8002e80 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2120      	movs	r1, #32
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fb04 	bl	8003410 <UART_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e042      	b.n	8002e98 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10c      	bne.n	8002e32 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e01f      	b.n	8002e72 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d007      	beq.n	8002e4c <HAL_UART_Receive+0xf0>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <HAL_UART_Receive+0xfe>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	e008      	b.n	8002e6c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1b6      	bne.n	8002df8 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0ba      	sub	sp, #232	; 0xe8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d009      	beq.n	8002f06 <HAL_UART_IRQHandler+0x66>
 8002ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fbd2 	bl	80036a8 <UART_Receive_IT>
      return;
 8002f04:	e257      	b.n	80033b6 <HAL_UART_IRQHandler+0x516>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80de 	beq.w	80030cc <HAL_UART_IRQHandler+0x22c>
 8002f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80d1 	beq.w	80030cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_UART_IRQHandler+0xae>
 8002f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_UART_IRQHandler+0xd2>
 8002f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_UART_IRQHandler+0xf6>
 8002f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d011      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x126>
 8002fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0208 	orr.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 81ee 	beq.w	80033ac <HAL_UART_IRQHandler+0x50c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_UART_IRQHandler+0x14e>
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fb5d 	bl	80036a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <HAL_UART_IRQHandler+0x17a>
 8003012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d04f      	beq.n	80030ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa66 	bl	80034ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d141      	bne.n	80030b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3314      	adds	r3, #20
 8003056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800305a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800305e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1d9      	bne.n	800302e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	2b00      	cmp	r3, #0
 8003080:	d013      	beq.n	80030aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	4a7d      	ldr	r2, [pc, #500]	; (800327c <HAL_UART_IRQHandler+0x3dc>)
 8003088:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd ff26 	bl	8000ee0 <HAL_DMA_Abort_IT>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030a4:	4610      	mov	r0, r2
 80030a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	e00e      	b.n	80030c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f99a 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	e00a      	b.n	80030c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f996 	bl	80033e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	e006      	b.n	80030c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f992 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030c6:	e171      	b.n	80033ac <HAL_UART_IRQHandler+0x50c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c8:	bf00      	nop
    return;
 80030ca:	e16f      	b.n	80033ac <HAL_UART_IRQHandler+0x50c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	f040 814a 	bne.w	800336a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8143 	beq.w	800336a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 813c 	beq.w	800336a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	f040 80b4 	bne.w	8003280 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((nb_remaining_rx_data > 0U)
 8003124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8141 	beq.w	80033b0 <HAL_UART_IRQHandler+0x510>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003132:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003136:	429a      	cmp	r2, r3
 8003138:	f080 813a 	bcs.w	80033b0 <HAL_UART_IRQHandler+0x510>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8003142:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	f000 8088 	beq.w	8003262 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	330c      	adds	r3, #12
 8003158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003170:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330c      	adds	r3, #12
 800317a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800317e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800318a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1d9      	bne.n	8003152 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3314      	adds	r3, #20
 80031a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e1      	bne.n	800319e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3314      	adds	r3, #20
 80031e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800320c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e3      	bne.n	80031da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003232:	f023 0310 	bic.w	r3, r3, #16
 8003236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	330c      	adds	r3, #12
 8003240:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003244:	65ba      	str	r2, [r7, #88]	; 0x58
 8003246:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800324a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e3      	bne.n	8003220 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd fdcf 	bl	8000e00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800326a:	b29b      	uxth	r3, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8c0 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003278:	e09a      	b.n	80033b0 <HAL_UART_IRQHandler+0x510>
 800327a:	bf00      	nop
 800327c:	080035b3 	.word	0x080035b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
      if ((huart->RxXferCount > 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 808c 	beq.w	80033b4 <HAL_UART_IRQHandler+0x514>
          && (nb_rx_data > 0U))
 800329c:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8087 	beq.w	80033b4 <HAL_UART_IRQHandler+0x514>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ca:	647a      	str	r2, [r7, #68]	; 0x44
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e3      	bne.n	80032a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	623b      	str	r3, [r7, #32]
   return(result);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3314      	adds	r3, #20
 80032fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003302:	633a      	str	r2, [r7, #48]	; 0x30
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e3      	bne.n	80032de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	60fb      	str	r3, [r7, #12]
   return(result);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003348:	61fa      	str	r2, [r7, #28]
 800334a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	617b      	str	r3, [r7, #20]
   return(result);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e3      	bne.n	8003324 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800335c:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8003360:	4619      	mov	r1, r3
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f848 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003368:	e024      	b.n	80033b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_UART_IRQHandler+0x4ea>
 8003376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f929 	bl	80035da <UART_Transmit_IT>
    return;
 8003388:	e015      	b.n	80033b6 <HAL_UART_IRQHandler+0x516>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x516>
 8003396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_UART_IRQHandler+0x516>
  {
    UART_EndTransmit_IT(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f968 	bl	8003678 <UART_EndTransmit_IT>
    return;
 80033a8:	bf00      	nop
 80033aa:	e004      	b.n	80033b6 <HAL_UART_IRQHandler+0x516>
    return;
 80033ac:	bf00      	nop
 80033ae:	e002      	b.n	80033b6 <HAL_UART_IRQHandler+0x516>
      return;
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_UART_IRQHandler+0x516>
      return;
 80033b4:	bf00      	nop
  }
}
 80033b6:	37e8      	adds	r7, #232	; 0xe8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b090      	sub	sp, #64	; 0x40
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003420:	e050      	b.n	80034c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d04c      	beq.n	80034c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800342a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <UART_WaitOnFlagUntilTimeout+0x30>
 8003430:	f7fd f8b8 	bl	80005a4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343c:	429a      	cmp	r2, r3
 800343e:	d941      	bls.n	80034c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003460:	637a      	str	r2, [r7, #52]	; 0x34
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e5      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	613b      	str	r3, [r7, #16]
   return(result);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	63bb      	str	r3, [r7, #56]	; 0x38
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3314      	adds	r3, #20
 8003492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003494:	623a      	str	r2, [r7, #32]
 8003496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	69f9      	ldr	r1, [r7, #28]
 800349a:	6a3a      	ldr	r2, [r7, #32]
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e5      	bne.n	8003474 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e00f      	b.n	80034e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	401a      	ands	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d09f      	beq.n	8003422 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3740      	adds	r7, #64	; 0x40
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b095      	sub	sp, #84	; 0x54
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003514:	643a      	str	r2, [r7, #64]	; 0x40
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800351a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e5      	bne.n	80034f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3314      	adds	r3, #20
 800352e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	61fb      	str	r3, [r7, #28]
   return(result);
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f023 0301 	bic.w	r3, r3, #1
 800353e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003548:	62fa      	str	r2, [r7, #44]	; 0x2c
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e5      	bne.n	8003528 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	2b01      	cmp	r3, #1
 8003562:	d119      	bne.n	8003598 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	60bb      	str	r3, [r7, #8]
   return(result);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f023 0310 	bic.w	r3, r3, #16
 800357a:	647b      	str	r3, [r7, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003584:	61ba      	str	r2, [r7, #24]
 8003586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6979      	ldr	r1, [r7, #20]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	613b      	str	r3, [r7, #16]
   return(result);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e5      	bne.n	8003564 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035a6:	bf00      	nop
 80035a8:	3754      	adds	r7, #84	; 0x54
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ff09 	bl	80033e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035da:	b480      	push	{r7}
 80035dc:	b085      	sub	sp, #20
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b21      	cmp	r3, #33	; 0x21
 80035ec:	d13d      	bne.n	800366a <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f6:	d113      	bne.n	8003620 <UART_Transmit_IT+0x46>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10f      	bne.n	8003620 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003612:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	1c9a      	adds	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]
 800361e:	e008      	b.n	8003632 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	1c58      	adds	r0, r3, #1
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	6208      	str	r0, [r1, #32]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29b      	uxth	r3, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4619      	mov	r1, r3
 8003640:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003654:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	68d2      	ldr	r2, [r2, #12]
 8003660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003664:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe8f 	bl	80033bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b22      	cmp	r3, #34	; 0x22
 80036ba:	f040 80ab 	bne.w	8003814 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c6:	d117      	bne.n	80036f8 <UART_Receive_IT+0x50>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d113      	bne.n	80036f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	1c9a      	adds	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
 80036f6:	e026      	b.n	8003746 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370a:	d007      	beq.n	800371c <UART_Receive_IT+0x74>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <UART_Receive_IT+0x82>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d106      	bne.n	800372a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e008      	b.n	800373c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003736:	b2da      	uxtb	r2, r3
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4619      	mov	r1, r3
 8003754:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003756:	2b00      	cmp	r3, #0
 8003758:	d15a      	bne.n	8003810 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	68d2      	ldr	r2, [r2, #12]
 8003764:	f022 0220 	bic.w	r2, r2, #32
 8003768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	68d2      	ldr	r2, [r2, #12]
 8003774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	6952      	ldr	r2, [r2, #20]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	2b01      	cmp	r3, #1
 8003798:	d135      	bne.n	8003806 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	613b      	str	r3, [r7, #16]
   return(result);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f023 0310 	bic.w	r3, r3, #16
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c0:	623a      	str	r2, [r7, #32]
 80037c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	69f9      	ldr	r1, [r7, #28]
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e5      	bne.n	80037a0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d10a      	bne.n	80037f8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fdfa 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
 8003804:	e002      	b.n	800380c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff fde2 	bl	80033d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e002      	b.n	8003816 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	e000      	b.n	8003816 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
  }
}
 8003816:	4618      	mov	r0, r3
 8003818:	3730      	adds	r7, #48	; 0x30
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	b091      	sub	sp, #68	; 0x44
 8003826:	af00      	add	r7, sp, #0
 8003828:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	431a      	orrs	r2, r3
 800384a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	431a      	orrs	r2, r3
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	4313      	orrs	r3, r2
 8003856:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	6819      	ldr	r1, [r3, #0]
 800385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8003866:	f022 020c 	bic.w	r2, r2, #12
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	4313      	orrs	r3, r2
 800386e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4bba      	ldr	r3, [pc, #744]	; (8003b74 <UART_SetConfig+0x354>)
 800388c:	429a      	cmp	r2, r3
 800388e:	d004      	beq.n	800389a <UART_SetConfig+0x7a>
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4bb8      	ldr	r3, [pc, #736]	; (8003b78 <UART_SetConfig+0x358>)
 8003896:	429a      	cmp	r2, r3
 8003898:	d103      	bne.n	80038a2 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800389a:	f7fe fb6d 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 800389e:	63f8      	str	r0, [r7, #60]	; 0x3c
 80038a0:	e002      	b.n	80038a8 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038a2:	f7fe fb55 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 80038a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b0:	f040 80a7 	bne.w	8003a02 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80038ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038bc:	4619      	mov	r1, r3
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4614      	mov	r4, r2
 80038c6:	18db      	adds	r3, r3, r3
 80038c8:	eb44 0404 	adc.w	r4, r4, r4
 80038cc:	185b      	adds	r3, r3, r1
 80038ce:	eb44 0402 	adc.w	r4, r4, r2
 80038d2:	00e0      	lsls	r0, r4, #3
 80038d4:	6178      	str	r0, [r7, #20]
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80038dc:	6178      	str	r0, [r7, #20]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80038e6:	185d      	adds	r5, r3, r1
 80038e8:	eb44 0602 	adc.w	r6, r4, r2
 80038ec:	4628      	mov	r0, r5
 80038ee:	4631      	mov	r1, r6
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	18db      	adds	r3, r3, r3
 80038fa:	eb44 0404 	adc.w	r4, r4, r4
 80038fe:	461a      	mov	r2, r3
 8003900:	4623      	mov	r3, r4
 8003902:	f7fc fc61 	bl	80001c8 <__aeabi_uldivmod>
 8003906:	4603      	mov	r3, r0
 8003908:	460c      	mov	r4, r1
 800390a:	461a      	mov	r2, r3
 800390c:	4b9b      	ldr	r3, [pc, #620]	; (8003b7c <UART_SetConfig+0x35c>)
 800390e:	fba3 2302 	umull	r2, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	011e      	lsls	r6, r3, #4
 8003916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003918:	4619      	mov	r1, r3
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	460b      	mov	r3, r1
 8003920:	4614      	mov	r4, r2
 8003922:	18db      	adds	r3, r3, r3
 8003924:	eb44 0404 	adc.w	r4, r4, r4
 8003928:	185b      	adds	r3, r3, r1
 800392a:	eb44 0402 	adc.w	r4, r4, r2
 800392e:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003932:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003936:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800393a:	4653      	mov	r3, sl
 800393c:	465c      	mov	r4, fp
 800393e:	eb13 0a01 	adds.w	sl, r3, r1
 8003942:	eb44 0b02 	adc.w	fp, r4, r2
 8003946:	4650      	mov	r0, sl
 8003948:	4659      	mov	r1, fp
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f04f 0400 	mov.w	r4, #0
 8003952:	18db      	adds	r3, r3, r3
 8003954:	eb44 0404 	adc.w	r4, r4, r4
 8003958:	461a      	mov	r2, r3
 800395a:	4623      	mov	r3, r4
 800395c:	f7fc fc34 	bl	80001c8 <__aeabi_uldivmod>
 8003960:	4603      	mov	r3, r0
 8003962:	460c      	mov	r4, r1
 8003964:	461a      	mov	r2, r3
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <UART_SetConfig+0x35c>)
 8003968:	fba3 1302 	umull	r1, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2164      	movs	r1, #100	; 0x64
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	3332      	adds	r3, #50	; 0x32
 800397a:	4a80      	ldr	r2, [pc, #512]	; (8003b7c <UART_SetConfig+0x35c>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003988:	441e      	add	r6, r3
 800398a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398c:	4619      	mov	r1, r3
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	460b      	mov	r3, r1
 8003994:	4614      	mov	r4, r2
 8003996:	18db      	adds	r3, r3, r3
 8003998:	eb44 0404 	adc.w	r4, r4, r4
 800399c:	185b      	adds	r3, r3, r1
 800399e:	eb44 0402 	adc.w	r4, r4, r2
 80039a2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80039a6:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80039aa:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80039ae:	4643      	mov	r3, r8
 80039b0:	464c      	mov	r4, r9
 80039b2:	eb13 0801 	adds.w	r8, r3, r1
 80039b6:	eb44 0902 	adc.w	r9, r4, r2
 80039ba:	4640      	mov	r0, r8
 80039bc:	4649      	mov	r1, r9
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f04f 0400 	mov.w	r4, #0
 80039c6:	18db      	adds	r3, r3, r3
 80039c8:	eb44 0404 	adc.w	r4, r4, r4
 80039cc:	461a      	mov	r2, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	f7fc fbfa 	bl	80001c8 <__aeabi_uldivmod>
 80039d4:	4603      	mov	r3, r0
 80039d6:	460c      	mov	r4, r1
 80039d8:	461a      	mov	r2, r3
 80039da:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <UART_SetConfig+0x35c>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	3332      	adds	r3, #50	; 0x32
 80039ee:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <UART_SetConfig+0x35c>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	4433      	add	r3, r6
 80039fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a00:	e0b3      	b.n	8003b6a <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4614      	mov	r4, r2
 8003a14:	18db      	adds	r3, r3, r3
 8003a16:	eb44 0404 	adc.w	r4, r4, r4
 8003a1a:	185b      	adds	r3, r3, r1
 8003a1c:	eb44 0402 	adc.w	r4, r4, r2
 8003a20:	00e6      	lsls	r6, r4, #3
 8003a22:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003a26:	00dd      	lsls	r5, r3, #3
 8003a28:	462b      	mov	r3, r5
 8003a2a:	4634      	mov	r4, r6
 8003a2c:	185d      	adds	r5, r3, r1
 8003a2e:	eb44 0602 	adc.w	r6, r4, r2
 8003a32:	4628      	mov	r0, r5
 8003a34:	4631      	mov	r1, r6
 8003a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	00a5      	lsls	r5, r4, #2
 8003a40:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003a42:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8003a44:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003a48:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003a4a:	009c      	lsls	r4, r3, #2
 8003a4c:	62bc      	str	r4, [r7, #40]	; 0x28
 8003a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a52:	f7fc fbb9 	bl	80001c8 <__aeabi_uldivmod>
 8003a56:	4603      	mov	r3, r0
 8003a58:	460c      	mov	r4, r1
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <UART_SetConfig+0x35c>)
 8003a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011d      	lsls	r5, r3, #4
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4614      	mov	r4, r2
 8003a72:	18db      	adds	r3, r3, r3
 8003a74:	eb44 0404 	adc.w	r4, r4, r4
 8003a78:	185b      	adds	r3, r3, r1
 8003a7a:	eb44 0402 	adc.w	r4, r4, r2
 8003a7e:	00e0      	lsls	r0, r4, #3
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	00d8      	lsls	r0, r3, #3
 8003a8c:	60b8      	str	r0, [r7, #8]
 8003a8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a92:	eb13 0801 	adds.w	r8, r3, r1
 8003a96:	eb44 0902 	adc.w	r9, r4, r2
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	00a6      	lsls	r6, r4, #2
 8003aa8:	627e      	str	r6, [r7, #36]	; 0x24
 8003aaa:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8003aac:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003ab0:	627e      	str	r6, [r7, #36]	; 0x24
 8003ab2:	009c      	lsls	r4, r3, #2
 8003ab4:	623c      	str	r4, [r7, #32]
 8003ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aba:	f7fc fb85 	bl	80001c8 <__aeabi_uldivmod>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <UART_SetConfig+0x35c>)
 8003ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2164      	movs	r1, #100	; 0x64
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	3332      	adds	r3, #50	; 0x32
 8003ad8:	4a28      	ldr	r2, [pc, #160]	; (8003b7c <UART_SetConfig+0x35c>)
 8003ada:	fba2 1303 	umull	r1, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae4:	441d      	add	r5, r3
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4614      	mov	r4, r2
 8003af2:	18db      	adds	r3, r3, r3
 8003af4:	eb44 0404 	adc.w	r4, r4, r4
 8003af8:	185b      	adds	r3, r3, r1
 8003afa:	eb44 0402 	adc.w	r4, r4, r2
 8003afe:	00e0      	lsls	r0, r4, #3
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	00d8      	lsls	r0, r3, #3
 8003b0c:	6038      	str	r0, [r7, #0]
 8003b0e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003b12:	eb13 0801 	adds.w	r8, r3, r1
 8003b16:	eb44 0902 	adc.w	r9, r4, r2
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f04f 0400 	mov.w	r4, #0
 8003b26:	00a6      	lsls	r6, r4, #2
 8003b28:	61fe      	str	r6, [r7, #28]
 8003b2a:	69fe      	ldr	r6, [r7, #28]
 8003b2c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003b30:	61fe      	str	r6, [r7, #28]
 8003b32:	009c      	lsls	r4, r3, #2
 8003b34:	61bc      	str	r4, [r7, #24]
 8003b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3a:	f7fc fb45 	bl	80001c8 <__aeabi_uldivmod>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	460c      	mov	r4, r1
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <UART_SetConfig+0x35c>)
 8003b46:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2164      	movs	r1, #100	; 0x64
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	; 0x32
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <UART_SetConfig+0x35c>)
 8003b5a:	fba2 1303 	umull	r1, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	442b      	add	r3, r5
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	6093      	str	r3, [r2, #8]
}
 8003b6a:	bf00      	nop
 8003b6c:	3744      	adds	r7, #68	; 0x44
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40011400 	.word	0x40011400
 8003b7c:	51eb851f 	.word	0x51eb851f

08003b80 <map>:
		adcValue= HAL_ADC_GetValue(&hadc1);

	}
	HAL_ADC_Stop(&hadc1);
}
uint32_t map(long A,long B,long C,long D,long E){
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]

	return ((A*E)/C);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	fb02 f203 	mul.w	r2, r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	fb92 f3f3 	sdiv	r3, r2, r3

}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <USART2_IRQHandler>:

//usart2 interrupt
void USART2_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
   char rx_byte[1];

   HAL_UART_Receive(&huart2,&rx_byte[0],1,100);
 8003bae:	4639      	mov	r1, r7
 8003bb0:	2364      	movs	r3, #100	; 0x64
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4818      	ldr	r0, [pc, #96]	; (8003c18 <USART2_IRQHandler+0x70>)
 8003bb6:	f7ff f8d1 	bl	8002d5c <HAL_UART_Receive>

   rx_buffer[size++]=rx_byte[0];
 8003bba:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <USART2_IRQHandler+0x74>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	4916      	ldr	r1, [pc, #88]	; (8003c1c <USART2_IRQHandler+0x74>)
 8003bc2:	600a      	str	r2, [r1, #0]
 8003bc4:	7839      	ldrb	r1, [r7, #0]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <USART2_IRQHandler+0x78>)
 8003bc8:	54d1      	strb	r1, [r2, r3]

   if(rx_byte[0]=='\n'){
 8003bca:	783b      	ldrb	r3, [r7, #0]
 8003bcc:	2b0a      	cmp	r3, #10
 8003bce:	d11b      	bne.n	8003c08 <USART2_IRQHandler+0x60>
	   //come message is send
	   HAL_UART_Transmit(&huart2,&rx_buffer,size,100);
 8003bd0:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <USART2_IRQHandler+0x74>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	2364      	movs	r3, #100	; 0x64
 8003bd8:	4911      	ldr	r1, [pc, #68]	; (8003c20 <USART2_IRQHandler+0x78>)
 8003bda:	480f      	ldr	r0, [pc, #60]	; (8003c18 <USART2_IRQHandler+0x70>)
 8003bdc:	f7ff f82d 	bl	8002c3a <HAL_UART_Transmit>
	   uartMessageDebug(rx_buffer);
 8003be0:	480f      	ldr	r0, [pc, #60]	; (8003c20 <USART2_IRQHandler+0x78>)
 8003be2:	f000 f81f 	bl	8003c24 <uartMessageDebug>
	   //buffer is clear
	  	  for(int a=0;a<50;a++){
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e007      	b.n	8003bfc <USART2_IRQHandler+0x54>
	       	rx_buffer[a]='\0';
 8003bec:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <USART2_IRQHandler+0x78>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
	  	  for(int a=0;a<50;a++){
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b31      	cmp	r3, #49	; 0x31
 8003c00:	ddf4      	ble.n	8003bec <USART2_IRQHandler+0x44>
	       	}
	      size=0;
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <USART2_IRQHandler+0x74>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
   }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c08:	4803      	ldr	r0, [pc, #12]	; (8003c18 <USART2_IRQHandler+0x70>)
 8003c0a:	f7ff f949 	bl	8002ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000460 	.word	0x20000460
 8003c1c:	2000020c 	.word	0x2000020c
 8003c20:	200002b4 	.word	0x200002b4

08003c24 <uartMessageDebug>:
void uartMessageDebug(volatile char *s){
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	6078      	str	r0, [r7, #4]

  if( s[0]=='i' && s[1]=='l' && s[2]=='e' && s[3]=='r'  && s[4]=='i'   ){
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b69      	cmp	r3, #105	; 0x69
 8003c34:	d11a      	bne.n	8003c6c <uartMessageDebug+0x48>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b6c      	cmp	r3, #108	; 0x6c
 8003c40:	d114      	bne.n	8003c6c <uartMessageDebug+0x48>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3302      	adds	r3, #2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b65      	cmp	r3, #101	; 0x65
 8003c4c:	d10e      	bne.n	8003c6c <uartMessageDebug+0x48>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3303      	adds	r3, #3
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b72      	cmp	r3, #114	; 0x72
 8003c58:	d108      	bne.n	8003c6c <uartMessageDebug+0x48>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b69      	cmp	r3, #105	; 0x69
 8003c64:	d102      	bne.n	8003c6c <uartMessageDebug+0x48>

	  forward();
 8003c66:	f000 f8c5 	bl	8003df4 <forward>
  if( s[0]=='i' && s[1]=='l' && s[2]=='e' && s[3]=='r'  && s[4]=='i'   ){
 8003c6a:	e0ba      	b.n	8003de2 <uartMessageDebug+0x1be>
    }
  else if( s[0]=='g' && s[1]=='e' && s[2]=='r' && s[3]=='i'   ){
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b67      	cmp	r3, #103	; 0x67
 8003c74:	d114      	bne.n	8003ca0 <uartMessageDebug+0x7c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b65      	cmp	r3, #101	; 0x65
 8003c80:	d10e      	bne.n	8003ca0 <uartMessageDebug+0x7c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3302      	adds	r3, #2
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b72      	cmp	r3, #114	; 0x72
 8003c8c:	d108      	bne.n	8003ca0 <uartMessageDebug+0x7c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3303      	adds	r3, #3
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b69      	cmp	r3, #105	; 0x69
 8003c98:	d102      	bne.n	8003ca0 <uartMessageDebug+0x7c>

	  back();
 8003c9a:	f000 f8c5 	bl	8003e28 <back>
  else if( s[0]=='g' && s[1]=='e' && s[2]=='r' && s[3]=='i'   ){
 8003c9e:	e0a0      	b.n	8003de2 <uartMessageDebug+0x1be>
    }
  else if( s[0]=='s' && s[1]=='a' && s[2]=='g' ){
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b73      	cmp	r3, #115	; 0x73
 8003ca8:	d10e      	bne.n	8003cc8 <uartMessageDebug+0xa4>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3301      	adds	r3, #1
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b61      	cmp	r3, #97	; 0x61
 8003cb4:	d108      	bne.n	8003cc8 <uartMessageDebug+0xa4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3302      	adds	r3, #2
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b67      	cmp	r3, #103	; 0x67
 8003cc0:	d102      	bne.n	8003cc8 <uartMessageDebug+0xa4>
	  right();
 8003cc2:	f000 f8e5 	bl	8003e90 <right>
  else if( s[0]=='s' && s[1]=='a' && s[2]=='g' ){
 8003cc6:	e08c      	b.n	8003de2 <uartMessageDebug+0x1be>
      }
  else if( s[0]=='s' && s[1]=='o' && s[2]=='l' ){
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b73      	cmp	r3, #115	; 0x73
 8003cd0:	d10e      	bne.n	8003cf0 <uartMessageDebug+0xcc>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b6f      	cmp	r3, #111	; 0x6f
 8003cdc:	d108      	bne.n	8003cf0 <uartMessageDebug+0xcc>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b6c      	cmp	r3, #108	; 0x6c
 8003ce8:	d102      	bne.n	8003cf0 <uartMessageDebug+0xcc>
	  left();
 8003cea:	f000 f8b7 	bl	8003e5c <left>
  else if( s[0]=='s' && s[1]=='o' && s[2]=='l' ){
 8003cee:	e078      	b.n	8003de2 <uartMessageDebug+0x1be>
        }
  else if( s[0]=='d' && s[1]=='u' && s[2]=='r' ){
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d10e      	bne.n	8003d18 <uartMessageDebug+0xf4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b75      	cmp	r3, #117	; 0x75
 8003d04:	d108      	bne.n	8003d18 <uartMessageDebug+0xf4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b72      	cmp	r3, #114	; 0x72
 8003d10:	d102      	bne.n	8003d18 <uartMessageDebug+0xf4>
	  stop();
 8003d12:	f000 f8d7 	bl	8003ec4 <stop>
  else if( s[0]=='d' && s[1]=='u' && s[2]=='r' ){
 8003d16:	e064      	b.n	8003de2 <uartMessageDebug+0x1be>
        }

  else if( s[0]=='h' && s[1]=='i' && s[2]=='z' ){
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b68      	cmp	r3, #104	; 0x68
 8003d20:	d15f      	bne.n	8003de2 <uartMessageDebug+0x1be>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3301      	adds	r3, #1
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b69      	cmp	r3, #105	; 0x69
 8003d2c:	d159      	bne.n	8003de2 <uartMessageDebug+0x1be>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3302      	adds	r3, #2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b7a      	cmp	r3, #122	; 0x7a
 8003d38:	d153      	bne.n	8003de2 <uartMessageDebug+0x1be>
	 short k=3,m=0;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	81fb      	strh	r3, [r7, #14]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	81bb      	strh	r3, [r7, #12]

	 while(1){
		 if( s[k] != '\n'){
 8003d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b0a      	cmp	r3, #10
 8003d50:	d016      	beq.n	8003d80 <uartMessageDebug+0x15c>
		  pwmPulseUart[m]=s[k];
 8003d52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	b2d1      	uxtb	r1, r2
 8003d62:	4a22      	ldr	r2, [pc, #136]	; (8003dec <uartMessageDebug+0x1c8>)
 8003d64:	54d1      	strb	r1, [r2, r3]
		  k++;
 8003d66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	81fb      	strh	r3, [r7, #14]
		  m++;
 8003d72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	81bb      	strh	r3, [r7, #12]
 8003d7e:	e7e0      	b.n	8003d42 <uartMessageDebug+0x11e>
		 }else {
		   pwmPulseUart[m] =s[k];
 8003d80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	440a      	add	r2, r1
 8003d8c:	7812      	ldrb	r2, [r2, #0]
 8003d8e:	b2d1      	uxtb	r1, r2
 8003d90:	4a16      	ldr	r2, [pc, #88]	; (8003dec <uartMessageDebug+0x1c8>)
 8003d92:	54d1      	strb	r1, [r2, r3]
		   k=3;
 8003d94:	2303      	movs	r3, #3
 8003d96:	81fb      	strh	r3, [r7, #14]
		   m=0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	81bb      	strh	r3, [r7, #12]

		   pulseUart=atoi(pwmPulseUart);
 8003d9c:	4813      	ldr	r0, [pc, #76]	; (8003dec <uartMessageDebug+0x1c8>)
 8003d9e:	f000 fe32 	bl	8004a06 <atoi>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <uartMessageDebug+0x1cc>)
 8003da8:	601a      	str	r2, [r3, #0]
		   pulseUart = map(pulseUart,0,100,0,20000);
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <uartMessageDebug+0x1cc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2300      	movs	r3, #0
 8003db8:	2264      	movs	r2, #100	; 0x64
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f7ff fee0 	bl	8003b80 <map>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <uartMessageDebug+0x1cc>)
 8003dc4:	601a      	str	r2, [r3, #0]
		   for(int a=0;a<10;a++){
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	e007      	b.n	8003ddc <uartMessageDebug+0x1b8>
			   pwmPulseUart[a]='\0';
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <uartMessageDebug+0x1c8>)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
		   for(int a=0;a<10;a++){
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b09      	cmp	r3, #9
 8003de0:	ddf4      	ble.n	8003dcc <uartMessageDebug+0x1a8>
		  }

	 }

  }
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000214 	.word	0x20000214
 8003df0:	20000208 	.word	0x20000208

08003df4 <forward>:

void forward(){
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0


	pwmPulse[0]=pulseUart;
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <forward+0x2c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <forward+0x30>)
 8003dfe:	6013      	str	r3, [r2, #0]
	pwmPulse[1]=0;
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <forward+0x30>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	605a      	str	r2, [r3, #4]

	pwmPulse[2]=pulseUart;
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <forward+0x2c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <forward+0x30>)
 8003e0c:	6093      	str	r3, [r2, #8]
	pwmPulse[3]=0;
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <forward+0x30>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]

}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000208 	.word	0x20000208
 8003e24:	200001f8 	.word	0x200001f8

08003e28 <back>:
void back(){
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0

	pwmPulse[0]=0;
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <back+0x2c>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
	pwmPulse[1]=pulseUart;
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <back+0x30>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <back+0x2c>)
 8003e38:	6053      	str	r3, [r2, #4]

	pwmPulse[2]=0;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <back+0x2c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
	pwmPulse[3]=pulseUart;
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <back+0x30>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a03      	ldr	r2, [pc, #12]	; (8003e54 <back+0x2c>)
 8003e46:	60d3      	str	r3, [r2, #12]

}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	200001f8 	.word	0x200001f8
 8003e58:	20000208 	.word	0x20000208

08003e5c <left>:
void left(){
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0


	pwmPulse[0]=pulseUart;
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <left+0x2c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <left+0x30>)
 8003e66:	6013      	str	r3, [r2, #0]
	pwmPulse[1]=0;
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <left+0x30>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	605a      	str	r2, [r3, #4]

	pwmPulse[2]=0;
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <left+0x30>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
	pwmPulse[3]=pulseUart;
 8003e74:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <left+0x2c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <left+0x30>)
 8003e7a:	60d3      	str	r3, [r2, #12]

}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000208 	.word	0x20000208
 8003e8c:	200001f8 	.word	0x200001f8

08003e90 <right>:
void right(){
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0


	pwmPulse[0]=0;
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <right+0x2c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
	pwmPulse[1]=pulseUart;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <right+0x30>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <right+0x2c>)
 8003ea0:	6053      	str	r3, [r2, #4]

	pwmPulse[2]=pulseUart;
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <right+0x30>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <right+0x2c>)
 8003ea8:	6093      	str	r3, [r2, #8]
	pwmPulse[3]=0;
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <right+0x2c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	60da      	str	r2, [r3, #12]

}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200001f8 	.word	0x200001f8
 8003ec0:	20000208 	.word	0x20000208

08003ec4 <stop>:
void stop(){
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

	pwmPulse[0]=0;
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <stop+0x28>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
	pwmPulse[1]=0;
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <stop+0x28>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	605a      	str	r2, [r3, #4]

	pwmPulse[2]=0;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <stop+0x28>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
	pwmPulse[3]=0;
 8003eda:	4b04      	ldr	r3, [pc, #16]	; (8003eec <stop+0x28>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	60da      	str	r2, [r3, #12]

}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	200001f8 	.word	0x200001f8

08003ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ef4:	f7fc faf0 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ef8:	f000 f87e 	bl	8003ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003efc:	f000 face 	bl	800449c <MX_GPIO_Init>
  MX_DMA_Init();
 8003f00:	f000 faac 	bl	800445c <MX_DMA_Init>
  MX_ADC1_Init();
 8003f04:	f000 f8e2 	bl	80040cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8003f08:	f000 f932 	bl	8004170 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003f0c:	f000 f984 	bl	8004218 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003f10:	f000 f9d6 	bl	80042c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003f14:	f000 fa4e 	bl	80043b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003f18:	f000 fa76 	bl	8004408 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */




        HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	482d      	ldr	r0, [pc, #180]	; (8003fd4 <main+0xe4>)
 8003f20:	f7fe f88e 	bl	8002040 <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8003f24:	2104      	movs	r1, #4
 8003f26:	482b      	ldr	r0, [pc, #172]	; (8003fd4 <main+0xe4>)
 8003f28:	f7fe f88a 	bl	8002040 <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8003f2c:	2108      	movs	r1, #8
 8003f2e:	4829      	ldr	r0, [pc, #164]	; (8003fd4 <main+0xe4>)
 8003f30:	f7fe f886 	bl	8002040 <HAL_TIM_PWM_Start>
    	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8003f34:	210c      	movs	r1, #12
 8003f36:	4827      	ldr	r0, [pc, #156]	; (8003fd4 <main+0xe4>)
 8003f38:	f7fe f882 	bl	8002040 <HAL_TIM_PWM_Start>
    	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8003f3c:	213c      	movs	r1, #60	; 0x3c
 8003f3e:	4826      	ldr	r0, [pc, #152]	; (8003fd8 <main+0xe8>)
 8003f40:	f7fe f9ec 	bl	800231c <HAL_TIM_Encoder_Start>
        HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8003f44:	213c      	movs	r1, #60	; 0x3c
 8003f46:	4825      	ldr	r0, [pc, #148]	; (8003fdc <main+0xec>)
 8003f48:	f7fe f9e8 	bl	800231c <HAL_TIM_Encoder_Start>
      __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <main+0xf0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a23      	ldr	r2, [pc, #140]	; (8003fe0 <main+0xf0>)
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	f042 0220 	orr.w	r2, r2, #32
 8003f5a:	60da      	str	r2, [r3, #12]
	      /*READ_ADC();
	 	  pwmPulse1_motor1=map(adcValue,0,4095,0,19999);
	 	  pwmPulse2_motor2=map(adcValue,0,4095,0,19999);*/


	      __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,10000);
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <main+0xe4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f64:	635a      	str	r2, [r3, #52]	; 0x34

	 	 __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_2,10000);
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <main+0xe4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38


	 	 __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pwmPulse[2]);
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <main+0xe4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <main+0xf4>)
 8003f76:	6892      	ldr	r2, [r2, #8]
 8003f78:	63da      	str	r2, [r3, #60]	; 0x3c


	 	 __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pwmPulse[3]);
 8003f7a:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <main+0xe4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <main+0xf4>)
 8003f80:	68d2      	ldr	r2, [r2, #12]
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40


	    rotation_m1= __HAL_TIM_GET_COUNTER(&htim2);
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <main+0xe8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <main+0xf8>)
 8003f8e:	601a      	str	r2, [r3, #0]
	 	position_m1= !(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2));
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <main+0xe8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <main+0xfc>)
 8003fa8:	601a      	str	r2, [r3, #0]
	 	rotation_m2= __HAL_TIM_GET_COUNTER(&htim3);
 8003faa:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <main+0xec>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <main+0x100>)
 8003fb4:	601a      	str	r2, [r3, #0]
	    positon_m2= !(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3));
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <main+0xec>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <main+0x104>)
 8003fce:	601a      	str	r2, [r3, #0]
	      __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,10000);
 8003fd0:	e7c4      	b.n	8003f5c <main+0x6c>
 8003fd2:	bf00      	nop
 8003fd4:	20000220 	.word	0x20000220
 8003fd8:	20000410 	.word	0x20000410
 8003fdc:	2000026c 	.word	0x2000026c
 8003fe0:	20000460 	.word	0x20000460
 8003fe4:	200001f8 	.word	0x200001f8
 8003fe8:	20000268 	.word	0x20000268
 8003fec:	20000458 	.word	0x20000458
 8003ff0:	200004a8 	.word	0x200004a8
 8003ff4:	2000045c 	.word	0x2000045c

08003ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b094      	sub	sp, #80	; 0x50
 8003ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ffe:	f107 0320 	add.w	r3, r7, #32
 8004002:	2230      	movs	r2, #48	; 0x30
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fd26 	bl	8004a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800400c:	f107 030c 	add.w	r3, r7, #12
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	4a28      	ldr	r2, [pc, #160]	; (80040c4 <SystemClock_Config+0xcc>)
 8004022:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <SystemClock_Config+0xcc>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402a:	6413      	str	r3, [r2, #64]	; 0x40
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <SystemClock_Config+0xcc>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004038:	2300      	movs	r3, #0
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <SystemClock_Config+0xd0>)
 800403e:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <SystemClock_Config+0xd0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <SystemClock_Config+0xd0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004054:	2301      	movs	r3, #1
 8004056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800405e:	2302      	movs	r3, #2
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004068:	2304      	movs	r3, #4
 800406a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800406c:	23a8      	movs	r3, #168	; 0xa8
 800406e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004070:	2302      	movs	r3, #2
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004074:	2304      	movs	r3, #4
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004078:	f107 0320 	add.w	r3, r7, #32
 800407c:	4618      	mov	r0, r3
 800407e:	f7fd fb25 	bl	80016cc <HAL_RCC_OscConfig>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004088:	f000 fa3e 	bl	8004508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800408c:	230f      	movs	r3, #15
 800408e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004090:	2302      	movs	r3, #2
 8004092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004098:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800409c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800409e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	2105      	movs	r1, #5
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fd86 	bl	8001bbc <HAL_RCC_ClockConfig>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80040b6:	f000 fa27 	bl	8004508 <Error_Handler>
  }
}
 80040ba:	bf00      	nop
 80040bc:	3750      	adds	r7, #80	; 0x50
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40007000 	.word	0x40007000

080040cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040d2:	463b      	mov	r3, r7
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <MX_ADC1_Init+0x98>)
 80040e0:	4a21      	ldr	r2, [pc, #132]	; (8004168 <MX_ADC1_Init+0x9c>)
 80040e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80040e4:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <MX_ADC1_Init+0x98>)
 80040e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <MX_ADC1_Init+0x98>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <MX_ADC1_Init+0x98>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <MX_ADC1_Init+0x98>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <MX_ADC1_Init+0x98>)
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <MX_ADC1_Init+0x98>)
 8004108:	2200      	movs	r2, #0
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800410c:	4b15      	ldr	r3, [pc, #84]	; (8004164 <MX_ADC1_Init+0x98>)
 800410e:	4a17      	ldr	r2, [pc, #92]	; (800416c <MX_ADC1_Init+0xa0>)
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <MX_ADC1_Init+0x98>)
 8004114:	2200      	movs	r2, #0
 8004116:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <MX_ADC1_Init+0x98>)
 800411a:	2201      	movs	r2, #1
 800411c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800411e:	4b11      	ldr	r3, [pc, #68]	; (8004164 <MX_ADC1_Init+0x98>)
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <MX_ADC1_Init+0x98>)
 8004128:	2201      	movs	r2, #1
 800412a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800412c:	480d      	ldr	r0, [pc, #52]	; (8004164 <MX_ADC1_Init+0x98>)
 800412e:	f7fc fa45 	bl	80005bc <HAL_ADC_Init>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004138:	f000 f9e6 	bl	8004508 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800413c:	2300      	movs	r3, #0
 800413e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004140:	2301      	movs	r3, #1
 8004142:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004148:	463b      	mov	r3, r7
 800414a:	4619      	mov	r1, r3
 800414c:	4805      	ldr	r0, [pc, #20]	; (8004164 <MX_ADC1_Init+0x98>)
 800414e:	f7fc fa79 	bl	8000644 <HAL_ADC_ConfigChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004158:	f000 f9d6 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000031c 	.word	0x2000031c
 8004168:	40012000 	.word	0x40012000
 800416c:	0f000001 	.word	0x0f000001

08004170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08c      	sub	sp, #48	; 0x30
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	2224      	movs	r2, #36	; 0x24
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fc6a 	bl	8004a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <MX_TIM2_Init+0xa4>)
 800418e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <MX_TIM2_Init+0xa4>)
 8004196:	2200      	movs	r2, #0
 8004198:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <MX_TIM2_Init+0xa4>)
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <MX_TIM2_Init+0xa4>)
 80041a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <MX_TIM2_Init+0xa4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <MX_TIM2_Init+0xa4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80041b4:	2303      	movs	r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041c8:	2300      	movs	r3, #0
 80041ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041cc:	2301      	movs	r3, #1
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80041d8:	f107 030c 	add.w	r3, r7, #12
 80041dc:	4619      	mov	r1, r3
 80041de:	480d      	ldr	r0, [pc, #52]	; (8004214 <MX_TIM2_Init+0xa4>)
 80041e0:	f7fd fff6 	bl	80021d0 <HAL_TIM_Encoder_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80041ea:	f000 f98d 	bl	8004508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4806      	ldr	r0, [pc, #24]	; (8004214 <MX_TIM2_Init+0xa4>)
 80041fc:	f7fe fc54 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004206:	f000 f97f 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000410 	.word	0x20000410

08004218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08c      	sub	sp, #48	; 0x30
 800421c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fc16 	bl	8004a58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <MX_TIM3_Init+0xa0>)
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <MX_TIM3_Init+0xa4>)
 8004238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800423a:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <MX_TIM3_Init+0xa0>)
 800423c:	2200      	movs	r2, #0
 800423e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004240:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <MX_TIM3_Init+0xa0>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004246:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <MX_TIM3_Init+0xa0>)
 8004248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <MX_TIM3_Init+0xa0>)
 8004250:	2200      	movs	r2, #0
 8004252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <MX_TIM3_Init+0xa0>)
 8004256:	2200      	movs	r2, #0
 8004258:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800425a:	2303      	movs	r3, #3
 800425c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004262:	2301      	movs	r3, #1
 8004264:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800426a:	230f      	movs	r3, #15
 800426c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800426e:	2300      	movs	r3, #0
 8004270:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004272:	2301      	movs	r3, #1
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004276:	2300      	movs	r3, #0
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800427a:	230f      	movs	r3, #15
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	4619      	mov	r1, r3
 8004284:	480c      	ldr	r0, [pc, #48]	; (80042b8 <MX_TIM3_Init+0xa0>)
 8004286:	f7fd ffa3 	bl	80021d0 <HAL_TIM_Encoder_Init>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004290:	f000 f93a 	bl	8004508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004298:	2300      	movs	r3, #0
 800429a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800429c:	1d3b      	adds	r3, r7, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4805      	ldr	r0, [pc, #20]	; (80042b8 <MX_TIM3_Init+0xa0>)
 80042a2:	f7fe fc01 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80042ac:	f000 f92c 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042b0:	bf00      	nop
 80042b2:	3730      	adds	r7, #48	; 0x30
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	2000026c 	.word	0x2000026c
 80042bc:	40000400 	.word	0x40000400

080042c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c6:	f107 0320 	add.w	r3, r7, #32
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	611a      	str	r2, [r3, #16]
 80042de:	615a      	str	r2, [r3, #20]
 80042e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042e2:	4b32      	ldr	r3, [pc, #200]	; (80043ac <MX_TIM4_Init+0xec>)
 80042e4:	4a32      	ldr	r2, [pc, #200]	; (80043b0 <MX_TIM4_Init+0xf0>)
 80042e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80042e8:	4b30      	ldr	r3, [pc, #192]	; (80043ac <MX_TIM4_Init+0xec>)
 80042ea:	2207      	movs	r2, #7
 80042ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <MX_TIM4_Init+0xec>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <MX_TIM4_Init+0xec>)
 80042f6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80042fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <MX_TIM4_Init+0xec>)
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004302:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <MX_TIM4_Init+0xec>)
 8004304:	2200      	movs	r2, #0
 8004306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004308:	4828      	ldr	r0, [pc, #160]	; (80043ac <MX_TIM4_Init+0xec>)
 800430a:	f7fd fe49 	bl	8001fa0 <HAL_TIM_PWM_Init>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004314:	f000 f8f8 	bl	8004508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004320:	f107 0320 	add.w	r3, r7, #32
 8004324:	4619      	mov	r1, r3
 8004326:	4821      	ldr	r0, [pc, #132]	; (80043ac <MX_TIM4_Init+0xec>)
 8004328:	f7fe fbbe 	bl	8002aa8 <HAL_TIMEx_MasterConfigSynchronization>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004332:	f000 f8e9 	bl	8004508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004336:	2360      	movs	r3, #96	; 0x60
 8004338:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800433e:	2300      	movs	r3, #0
 8004340:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004346:	1d3b      	adds	r3, r7, #4
 8004348:	2200      	movs	r2, #0
 800434a:	4619      	mov	r1, r3
 800434c:	4817      	ldr	r0, [pc, #92]	; (80043ac <MX_TIM4_Init+0xec>)
 800434e:	f7fe f873 	bl	8002438 <HAL_TIM_PWM_ConfigChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004358:	f000 f8d6 	bl	8004508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	2204      	movs	r2, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4812      	ldr	r0, [pc, #72]	; (80043ac <MX_TIM4_Init+0xec>)
 8004364:	f7fe f868 	bl	8002438 <HAL_TIM_PWM_ConfigChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800436e:	f000 f8cb 	bl	8004508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	2208      	movs	r2, #8
 8004376:	4619      	mov	r1, r3
 8004378:	480c      	ldr	r0, [pc, #48]	; (80043ac <MX_TIM4_Init+0xec>)
 800437a:	f7fe f85d 	bl	8002438 <HAL_TIM_PWM_ConfigChannel>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004384:	f000 f8c0 	bl	8004508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	220c      	movs	r2, #12
 800438c:	4619      	mov	r1, r3
 800438e:	4807      	ldr	r0, [pc, #28]	; (80043ac <MX_TIM4_Init+0xec>)
 8004390:	f7fe f852 	bl	8002438 <HAL_TIM_PWM_ConfigChannel>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800439a:	f000 f8b5 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800439e:	4803      	ldr	r0, [pc, #12]	; (80043ac <MX_TIM4_Init+0xec>)
 80043a0:	f000 f9f2 	bl	8004788 <HAL_TIM_MspPostInit>

}
 80043a4:	bf00      	nop
 80043a6:	3728      	adds	r7, #40	; 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000220 	.word	0x20000220
 80043b0:	40000800 	.word	0x40000800

080043b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <MX_USART1_UART_Init+0x50>)
 80043bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043da:	220c      	movs	r2, #12
 80043dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ea:	4805      	ldr	r0, [pc, #20]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ec:	f7fe fbd8 	bl	8002ba0 <HAL_UART_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043f6:	f000 f887 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000368 	.word	0x20000368
 8004404:	40011000 	.word	0x40011000

08004408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <MX_USART2_UART_Init+0x50>)
 8004410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004414:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800442e:	220c      	movs	r2, #12
 8004430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800443e:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004440:	f7fe fbae 	bl	8002ba0 <HAL_UART_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800444a:	f000 f85d 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000460 	.word	0x20000460
 8004458:	40004400 	.word	0x40004400

0800445c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <MX_DMA_Init+0x3c>)
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <MX_DMA_Init+0x3c>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <MX_DMA_Init+0x3c>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	2100      	movs	r1, #0
 8004482:	2038      	movs	r0, #56	; 0x38
 8004484:	f7fc fbd7 	bl	8000c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004488:	2038      	movs	r0, #56	; 0x38
 800448a:	f7fc fbf0 	bl	8000c6e <HAL_NVIC_EnableIRQ>

}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800

0800449c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	4a17      	ldr	r2, [pc, #92]	; (8004504 <MX_GPIO_Init+0x68>)
 80044a8:	4b16      	ldr	r3, [pc, #88]	; (8004504 <MX_GPIO_Init+0x68>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <MX_GPIO_Init+0x68>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	4a10      	ldr	r2, [pc, #64]	; (8004504 <MX_GPIO_Init+0x68>)
 80044c4:	4b0f      	ldr	r3, [pc, #60]	; (8004504 <MX_GPIO_Init+0x68>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6313      	str	r3, [r2, #48]	; 0x30
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <MX_GPIO_Init+0x68>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <MX_GPIO_Init+0x68>)
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <MX_GPIO_Init+0x68>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	f043 0308 	orr.w	r3, r3, #8
 80044e8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ea:	4b06      	ldr	r3, [pc, #24]	; (8004504 <MX_GPIO_Init+0x68>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]

}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40023800 	.word	0x40023800

08004508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800450c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800450e:	e7fe      	b.n	800450e <Error_Handler+0x6>

08004510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <HAL_MspInit+0x4c>)
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <HAL_MspInit+0x4c>)
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004524:	6453      	str	r3, [r2, #68]	; 0x44
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_MspInit+0x4c>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_MspInit+0x4c>)
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_MspInit+0x4c>)
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_MspInit+0x4c>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40023800 	.word	0x40023800

08004560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2f      	ldr	r2, [pc, #188]	; (800463c <HAL_ADC_MspInit+0xdc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d157      	bne.n	8004632 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4a2e      	ldr	r2, [pc, #184]	; (8004640 <HAL_ADC_MspInit+0xe0>)
 8004588:	4b2d      	ldr	r3, [pc, #180]	; (8004640 <HAL_ADC_MspInit+0xe0>)
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	6453      	str	r3, [r2, #68]	; 0x44
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_ADC_MspInit+0xe0>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4a27      	ldr	r2, [pc, #156]	; (8004640 <HAL_ADC_MspInit+0xe0>)
 80045a4:	4b26      	ldr	r3, [pc, #152]	; (8004640 <HAL_ADC_MspInit+0xe0>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <HAL_ADC_MspInit+0xe0>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045ba:	2301      	movs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045be:	2303      	movs	r3, #3
 80045c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c6:	f107 0314 	add.w	r3, r7, #20
 80045ca:	4619      	mov	r1, r3
 80045cc:	481d      	ldr	r0, [pc, #116]	; (8004644 <HAL_ADC_MspInit+0xe4>)
 80045ce:	f7fc fee3 	bl	8001398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_ADC_MspInit+0xec>)
 80045d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045e4:	4b18      	ldr	r3, [pc, #96]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045ea:	4b17      	ldr	r3, [pc, #92]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 80045ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 80045f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 80045fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004600:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 8004604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004608:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 800460c:	2200      	movs	r2, #0
 800460e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 8004612:	2200      	movs	r2, #0
 8004614:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004616:	480c      	ldr	r0, [pc, #48]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 8004618:	f7fc fb44 	bl	8000ca4 <HAL_DMA_Init>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004622:	f7ff ff71 	bl	8004508 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a07      	ldr	r2, [pc, #28]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
 800462c:	4a06      	ldr	r2, [pc, #24]	; (8004648 <HAL_ADC_MspInit+0xe8>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004632:	bf00      	nop
 8004634:	3728      	adds	r7, #40	; 0x28
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40012000 	.word	0x40012000
 8004640:	40023800 	.word	0x40023800
 8004644:	40020000 	.word	0x40020000
 8004648:	200003b0 	.word	0x200003b0
 800464c:	40026410 	.word	0x40026410

08004650 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08c      	sub	sp, #48	; 0x30
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004658:	f107 031c 	add.w	r3, r7, #28
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	609a      	str	r2, [r3, #8]
 8004664:	60da      	str	r2, [r3, #12]
 8004666:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d12c      	bne.n	80046cc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	4a30      	ldr	r2, [pc, #192]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004678:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6413      	str	r3, [r2, #64]	; 0x40
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	4a29      	ldr	r2, [pc, #164]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004694:	4b28      	ldr	r3, [pc, #160]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b26      	ldr	r3, [pc, #152]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80046aa:	2322      	movs	r3, #34	; 0x22
 80046ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	2302      	movs	r3, #2
 80046b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b6:	2300      	movs	r3, #0
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046ba:	2301      	movs	r3, #1
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046be:	f107 031c 	add.w	r3, r7, #28
 80046c2:	4619      	mov	r1, r3
 80046c4:	481d      	ldr	r0, [pc, #116]	; (800473c <HAL_TIM_Encoder_MspInit+0xec>)
 80046c6:	f7fc fe67 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046ca:	e030      	b.n	800472e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_TIM_Encoder_MspInit+0xf0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d12b      	bne.n	800472e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 80046dc:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f043 0302 	orr.w	r3, r3, #2
 80046e4:	6413      	str	r3, [r2, #64]	; 0x40
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	4a10      	ldr	r2, [pc, #64]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800470e:	23c0      	movs	r3, #192	; 0xc0
 8004710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004712:	2302      	movs	r3, #2
 8004714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471a:	2300      	movs	r3, #0
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800471e:	2302      	movs	r3, #2
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004722:	f107 031c 	add.w	r3, r7, #28
 8004726:	4619      	mov	r1, r3
 8004728:	4804      	ldr	r0, [pc, #16]	; (800473c <HAL_TIM_Encoder_MspInit+0xec>)
 800472a:	f7fc fe35 	bl	8001398 <HAL_GPIO_Init>
}
 800472e:	bf00      	nop
 8004730:	3730      	adds	r7, #48	; 0x30
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	40020000 	.word	0x40020000
 8004740:	40000400 	.word	0x40000400

08004744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <HAL_TIM_PWM_MspInit+0x3c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_TIM_PWM_MspInit+0x40>)
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_TIM_PWM_MspInit+0x40>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
 8004766:	4b07      	ldr	r3, [pc, #28]	; (8004784 <HAL_TIM_PWM_MspInit+0x40>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40000800 	.word	0x40000800
 8004784:	40023800 	.word	0x40023800

08004788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a12      	ldr	r2, [pc, #72]	; (80047f0 <HAL_TIM_MspPostInit+0x68>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d11e      	bne.n	80047e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <HAL_TIM_MspPostInit+0x6c>)
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_TIM_MspPostInit+0x6c>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f043 0308 	orr.w	r3, r3, #8
 80047b8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <HAL_TIM_MspPostInit+0x6c>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80047c6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80047ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047cc:	2302      	movs	r3, #2
 80047ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80047d8:	2302      	movs	r3, #2
 80047da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	4619      	mov	r1, r3
 80047e2:	4805      	ldr	r0, [pc, #20]	; (80047f8 <HAL_TIM_MspPostInit+0x70>)
 80047e4:	f7fc fdd8 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80047e8:	bf00      	nop
 80047ea:	3720      	adds	r7, #32
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40020c00 	.word	0x40020c00

080047fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08c      	sub	sp, #48	; 0x30
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	609a      	str	r2, [r3, #8]
 8004810:	60da      	str	r2, [r3, #12]
 8004812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a3a      	ldr	r2, [pc, #232]	; (8004904 <HAL_UART_MspInit+0x108>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d135      	bne.n	800488a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	4a39      	ldr	r2, [pc, #228]	; (8004908 <HAL_UART_MspInit+0x10c>)
 8004824:	4b38      	ldr	r3, [pc, #224]	; (8004908 <HAL_UART_MspInit+0x10c>)
 8004826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004828:	f043 0310 	orr.w	r3, r3, #16
 800482c:	6453      	str	r3, [r2, #68]	; 0x44
 800482e:	4b36      	ldr	r3, [pc, #216]	; (8004908 <HAL_UART_MspInit+0x10c>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	4a32      	ldr	r2, [pc, #200]	; (8004908 <HAL_UART_MspInit+0x10c>)
 8004840:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_UART_MspInit+0x10c>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b2f      	ldr	r3, [pc, #188]	; (8004908 <HAL_UART_MspInit+0x10c>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004856:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800485a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485c:	2302      	movs	r3, #2
 800485e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004860:	2300      	movs	r3, #0
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004864:	2303      	movs	r3, #3
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004868:	2307      	movs	r3, #7
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486c:	f107 031c 	add.w	r3, r7, #28
 8004870:	4619      	mov	r1, r3
 8004872:	4826      	ldr	r0, [pc, #152]	; (800490c <HAL_UART_MspInit+0x110>)
 8004874:	f7fc fd90 	bl	8001398 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004878:	2200      	movs	r2, #0
 800487a:	2100      	movs	r1, #0
 800487c:	2025      	movs	r0, #37	; 0x25
 800487e:	f7fc f9da 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004882:	2025      	movs	r0, #37	; 0x25
 8004884:	f7fc f9f3 	bl	8000c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004888:	e038      	b.n	80048fc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a20      	ldr	r2, [pc, #128]	; (8004910 <HAL_UART_MspInit+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d133      	bne.n	80048fc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	4a1b      	ldr	r2, [pc, #108]	; (8004908 <HAL_UART_MspInit+0x10c>)
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <HAL_UART_MspInit+0x10c>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a2:	6413      	str	r3, [r2, #64]	; 0x40
 80048a4:	4b18      	ldr	r3, [pc, #96]	; (8004908 <HAL_UART_MspInit+0x10c>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	4a14      	ldr	r2, [pc, #80]	; (8004908 <HAL_UART_MspInit+0x10c>)
 80048b6:	4b14      	ldr	r3, [pc, #80]	; (8004908 <HAL_UART_MspInit+0x10c>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6313      	str	r3, [r2, #48]	; 0x30
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <HAL_UART_MspInit+0x10c>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048cc:	230c      	movs	r3, #12
 80048ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d8:	2303      	movs	r3, #3
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048dc:	2307      	movs	r3, #7
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e0:	f107 031c 	add.w	r3, r7, #28
 80048e4:	4619      	mov	r1, r3
 80048e6:	4809      	ldr	r0, [pc, #36]	; (800490c <HAL_UART_MspInit+0x110>)
 80048e8:	f7fc fd56 	bl	8001398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80048ec:	2200      	movs	r2, #0
 80048ee:	2101      	movs	r1, #1
 80048f0:	2026      	movs	r0, #38	; 0x26
 80048f2:	f7fc f9a0 	bl	8000c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048f6:	2026      	movs	r0, #38	; 0x26
 80048f8:	f7fc f9b9 	bl	8000c6e <HAL_NVIC_EnableIRQ>
}
 80048fc:	bf00      	nop
 80048fe:	3730      	adds	r7, #48	; 0x30
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40011000 	.word	0x40011000
 8004908:	40023800 	.word	0x40023800
 800490c:	40020000 	.word	0x40020000
 8004910:	40004400 	.word	0x40004400

08004914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004918:	e7fe      	b.n	8004918 <NMI_Handler+0x4>

0800491a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800491e:	e7fe      	b.n	800491e <HardFault_Handler+0x4>

08004920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004924:	e7fe      	b.n	8004924 <MemManage_Handler+0x4>

08004926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004926:	b480      	push	{r7}
 8004928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800492a:	e7fe      	b.n	800492a <BusFault_Handler+0x4>

0800492c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004930:	e7fe      	b.n	8004930 <UsageFault_Handler+0x4>

08004932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004932:	b480      	push	{r7}
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800494e:	b480      	push	{r7}
 8004950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004960:	f7fb fe0c 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004964:	bf00      	nop
 8004966:	bd80      	pop	{r7, pc}

08004968 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <USART1_IRQHandler+0x10>)
 800496e:	f7fe fa97 	bl	8002ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000368 	.word	0x20000368

0800497c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <DMA2_Stream0_IRQHandler+0x10>)
 8004982:	f7fc facf 	bl	8000f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200003b0 	.word	0x200003b0

08004990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004994:	4a06      	ldr	r2, [pc, #24]	; (80049b0 <SystemInit+0x20>)
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <SystemInit+0x20>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000ed00 	.word	0xe000ed00

080049b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80049b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049b8:	480d      	ldr	r0, [pc, #52]	; (80049f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049ba:	490e      	ldr	r1, [pc, #56]	; (80049f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049bc:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049c0:	e002      	b.n	80049c8 <LoopCopyDataInit>

080049c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049c6:	3304      	adds	r3, #4

080049c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049cc:	d3f9      	bcc.n	80049c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049ce:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049d0:	4c0b      	ldr	r4, [pc, #44]	; (8004a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049d4:	e001      	b.n	80049da <LoopFillZerobss>

080049d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049d8:	3204      	adds	r2, #4

080049da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049dc:	d3fb      	bcc.n	80049d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049de:	f7ff ffd7 	bl	8004990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049e2:	f000 f815 	bl	8004a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049e6:	f7ff fa83 	bl	8003ef0 <main>
  bx  lr    
 80049ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80049ec:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80049f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80049f8:	08004d2c 	.word	0x08004d2c
  ldr r2, =_sbss
 80049fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004a00:	200004ac 	.word	0x200004ac

08004a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a04:	e7fe      	b.n	8004a04 <ADC_IRQHandler>

08004a06 <atoi>:
 8004a06:	220a      	movs	r2, #10
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f000 b8ad 	b.w	8004b68 <strtol>
	...

08004a10 <__libc_init_array>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	4e0d      	ldr	r6, [pc, #52]	; (8004a48 <__libc_init_array+0x38>)
 8004a14:	4c0d      	ldr	r4, [pc, #52]	; (8004a4c <__libc_init_array+0x3c>)
 8004a16:	1ba4      	subs	r4, r4, r6
 8004a18:	10a4      	asrs	r4, r4, #2
 8004a1a:	2500      	movs	r5, #0
 8004a1c:	42a5      	cmp	r5, r4
 8004a1e:	d109      	bne.n	8004a34 <__libc_init_array+0x24>
 8004a20:	4e0b      	ldr	r6, [pc, #44]	; (8004a50 <__libc_init_array+0x40>)
 8004a22:	4c0c      	ldr	r4, [pc, #48]	; (8004a54 <__libc_init_array+0x44>)
 8004a24:	f000 f8d8 	bl	8004bd8 <_init>
 8004a28:	1ba4      	subs	r4, r4, r6
 8004a2a:	10a4      	asrs	r4, r4, #2
 8004a2c:	2500      	movs	r5, #0
 8004a2e:	42a5      	cmp	r5, r4
 8004a30:	d105      	bne.n	8004a3e <__libc_init_array+0x2e>
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a38:	4798      	blx	r3
 8004a3a:	3501      	adds	r5, #1
 8004a3c:	e7ee      	b.n	8004a1c <__libc_init_array+0xc>
 8004a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a42:	4798      	blx	r3
 8004a44:	3501      	adds	r5, #1
 8004a46:	e7f2      	b.n	8004a2e <__libc_init_array+0x1e>
 8004a48:	08004d24 	.word	0x08004d24
 8004a4c:	08004d24 	.word	0x08004d24
 8004a50:	08004d24 	.word	0x08004d24
 8004a54:	08004d28 	.word	0x08004d28

08004a58 <memset>:
 8004a58:	4402      	add	r2, r0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memset+0xa>
 8004a60:	4770      	bx	lr
 8004a62:	f803 1b01 	strb.w	r1, [r3], #1
 8004a66:	e7f9      	b.n	8004a5c <memset+0x4>

08004a68 <_strtol_l.isra.0>:
 8004a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6c:	4680      	mov	r8, r0
 8004a6e:	4689      	mov	r9, r1
 8004a70:	4692      	mov	sl, r2
 8004a72:	461f      	mov	r7, r3
 8004a74:	468b      	mov	fp, r1
 8004a76:	465d      	mov	r5, fp
 8004a78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a7e:	f000 f889 	bl	8004b94 <__locale_ctype_ptr_l>
 8004a82:	4420      	add	r0, r4
 8004a84:	7846      	ldrb	r6, [r0, #1]
 8004a86:	f016 0608 	ands.w	r6, r6, #8
 8004a8a:	d10b      	bne.n	8004aa4 <_strtol_l.isra.0+0x3c>
 8004a8c:	2c2d      	cmp	r4, #45	; 0x2d
 8004a8e:	d10b      	bne.n	8004aa8 <_strtol_l.isra.0+0x40>
 8004a90:	782c      	ldrb	r4, [r5, #0]
 8004a92:	2601      	movs	r6, #1
 8004a94:	f10b 0502 	add.w	r5, fp, #2
 8004a98:	b167      	cbz	r7, 8004ab4 <_strtol_l.isra.0+0x4c>
 8004a9a:	2f10      	cmp	r7, #16
 8004a9c:	d114      	bne.n	8004ac8 <_strtol_l.isra.0+0x60>
 8004a9e:	2c30      	cmp	r4, #48	; 0x30
 8004aa0:	d00a      	beq.n	8004ab8 <_strtol_l.isra.0+0x50>
 8004aa2:	e011      	b.n	8004ac8 <_strtol_l.isra.0+0x60>
 8004aa4:	46ab      	mov	fp, r5
 8004aa6:	e7e6      	b.n	8004a76 <_strtol_l.isra.0+0xe>
 8004aa8:	2c2b      	cmp	r4, #43	; 0x2b
 8004aaa:	bf04      	itt	eq
 8004aac:	782c      	ldrbeq	r4, [r5, #0]
 8004aae:	f10b 0502 	addeq.w	r5, fp, #2
 8004ab2:	e7f1      	b.n	8004a98 <_strtol_l.isra.0+0x30>
 8004ab4:	2c30      	cmp	r4, #48	; 0x30
 8004ab6:	d127      	bne.n	8004b08 <_strtol_l.isra.0+0xa0>
 8004ab8:	782b      	ldrb	r3, [r5, #0]
 8004aba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004abe:	2b58      	cmp	r3, #88	; 0x58
 8004ac0:	d14b      	bne.n	8004b5a <_strtol_l.isra.0+0xf2>
 8004ac2:	786c      	ldrb	r4, [r5, #1]
 8004ac4:	2710      	movs	r7, #16
 8004ac6:	3502      	adds	r5, #2
 8004ac8:	2e00      	cmp	r6, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004ad0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	fbb1 fef7 	udiv	lr, r1, r7
 8004ada:	4610      	mov	r0, r2
 8004adc:	fb07 1c1e 	mls	ip, r7, lr, r1
 8004ae0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004ae4:	2b09      	cmp	r3, #9
 8004ae6:	d811      	bhi.n	8004b0c <_strtol_l.isra.0+0xa4>
 8004ae8:	461c      	mov	r4, r3
 8004aea:	42a7      	cmp	r7, r4
 8004aec:	dd1d      	ble.n	8004b2a <_strtol_l.isra.0+0xc2>
 8004aee:	1c53      	adds	r3, r2, #1
 8004af0:	d007      	beq.n	8004b02 <_strtol_l.isra.0+0x9a>
 8004af2:	4586      	cmp	lr, r0
 8004af4:	d316      	bcc.n	8004b24 <_strtol_l.isra.0+0xbc>
 8004af6:	d101      	bne.n	8004afc <_strtol_l.isra.0+0x94>
 8004af8:	45a4      	cmp	ip, r4
 8004afa:	db13      	blt.n	8004b24 <_strtol_l.isra.0+0xbc>
 8004afc:	fb00 4007 	mla	r0, r0, r7, r4
 8004b00:	2201      	movs	r2, #1
 8004b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b06:	e7eb      	b.n	8004ae0 <_strtol_l.isra.0+0x78>
 8004b08:	270a      	movs	r7, #10
 8004b0a:	e7dd      	b.n	8004ac8 <_strtol_l.isra.0+0x60>
 8004b0c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004b10:	2b19      	cmp	r3, #25
 8004b12:	d801      	bhi.n	8004b18 <_strtol_l.isra.0+0xb0>
 8004b14:	3c37      	subs	r4, #55	; 0x37
 8004b16:	e7e8      	b.n	8004aea <_strtol_l.isra.0+0x82>
 8004b18:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004b1c:	2b19      	cmp	r3, #25
 8004b1e:	d804      	bhi.n	8004b2a <_strtol_l.isra.0+0xc2>
 8004b20:	3c57      	subs	r4, #87	; 0x57
 8004b22:	e7e2      	b.n	8004aea <_strtol_l.isra.0+0x82>
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295
 8004b28:	e7eb      	b.n	8004b02 <_strtol_l.isra.0+0x9a>
 8004b2a:	1c53      	adds	r3, r2, #1
 8004b2c:	d108      	bne.n	8004b40 <_strtol_l.isra.0+0xd8>
 8004b2e:	2322      	movs	r3, #34	; 0x22
 8004b30:	f8c8 3000 	str.w	r3, [r8]
 8004b34:	4608      	mov	r0, r1
 8004b36:	f1ba 0f00 	cmp.w	sl, #0
 8004b3a:	d107      	bne.n	8004b4c <_strtol_l.isra.0+0xe4>
 8004b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b40:	b106      	cbz	r6, 8004b44 <_strtol_l.isra.0+0xdc>
 8004b42:	4240      	negs	r0, r0
 8004b44:	f1ba 0f00 	cmp.w	sl, #0
 8004b48:	d00c      	beq.n	8004b64 <_strtol_l.isra.0+0xfc>
 8004b4a:	b122      	cbz	r2, 8004b56 <_strtol_l.isra.0+0xee>
 8004b4c:	3d01      	subs	r5, #1
 8004b4e:	f8ca 5000 	str.w	r5, [sl]
 8004b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	464d      	mov	r5, r9
 8004b58:	e7f9      	b.n	8004b4e <_strtol_l.isra.0+0xe6>
 8004b5a:	2430      	movs	r4, #48	; 0x30
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	d1b3      	bne.n	8004ac8 <_strtol_l.isra.0+0x60>
 8004b60:	2708      	movs	r7, #8
 8004b62:	e7b1      	b.n	8004ac8 <_strtol_l.isra.0+0x60>
 8004b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b68 <strtol>:
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <strtol+0x24>)
 8004b6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b6c:	681c      	ldr	r4, [r3, #0]
 8004b6e:	4d08      	ldr	r5, [pc, #32]	; (8004b90 <strtol+0x28>)
 8004b70:	6a23      	ldr	r3, [r4, #32]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf08      	it	eq
 8004b76:	462b      	moveq	r3, r5
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	4601      	mov	r1, r0
 8004b80:	4620      	mov	r0, r4
 8004b82:	f7ff ff71 	bl	8004a68 <_strtol_l.isra.0>
 8004b86:	b003      	add	sp, #12
 8004b88:	bd30      	pop	{r4, r5, pc}
 8004b8a:	bf00      	nop
 8004b8c:	2000000c 	.word	0x2000000c
 8004b90:	20000070 	.word	0x20000070

08004b94 <__locale_ctype_ptr_l>:
 8004b94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004b98:	4770      	bx	lr

08004b9a <__ascii_mbtowc>:
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	b901      	cbnz	r1, 8004ba0 <__ascii_mbtowc+0x6>
 8004b9e:	a901      	add	r1, sp, #4
 8004ba0:	b142      	cbz	r2, 8004bb4 <__ascii_mbtowc+0x1a>
 8004ba2:	b14b      	cbz	r3, 8004bb8 <__ascii_mbtowc+0x1e>
 8004ba4:	7813      	ldrb	r3, [r2, #0]
 8004ba6:	600b      	str	r3, [r1, #0]
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	1c10      	adds	r0, r2, #0
 8004bac:	bf18      	it	ne
 8004bae:	2001      	movne	r0, #1
 8004bb0:	b002      	add	sp, #8
 8004bb2:	4770      	bx	lr
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	e7fb      	b.n	8004bb0 <__ascii_mbtowc+0x16>
 8004bb8:	f06f 0001 	mvn.w	r0, #1
 8004bbc:	e7f8      	b.n	8004bb0 <__ascii_mbtowc+0x16>

08004bbe <__ascii_wctomb>:
 8004bbe:	b149      	cbz	r1, 8004bd4 <__ascii_wctomb+0x16>
 8004bc0:	2aff      	cmp	r2, #255	; 0xff
 8004bc2:	bf85      	ittet	hi
 8004bc4:	238a      	movhi	r3, #138	; 0x8a
 8004bc6:	6003      	strhi	r3, [r0, #0]
 8004bc8:	700a      	strbls	r2, [r1, #0]
 8004bca:	f04f 30ff 	movhi.w	r0, #4294967295
 8004bce:	bf98      	it	ls
 8004bd0:	2001      	movls	r0, #1
 8004bd2:	4770      	bx	lr
 8004bd4:	4608      	mov	r0, r1
 8004bd6:	4770      	bx	lr

08004bd8 <_init>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr

08004be4 <_fini>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr
