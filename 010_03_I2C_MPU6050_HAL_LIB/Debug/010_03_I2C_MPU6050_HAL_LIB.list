
010_03_I2C_MPU6050_HAL_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003e60  08003e60  00013e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  20000000  08003ed0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
  8 .bss          000000e4  20000108  20000108  00020108  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200001ec  200001ec  00020108  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 11 .debug_info   00008443  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014c9  00000000  00000000  00028577  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000720  00000000  00000000  00029a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000680  00000000  00000000  0002a160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003bd4  00000000  00000000  0002a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000299b  00000000  00000000  0002e3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00030d4f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001f60  00000000  00000000  00030dcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e48 	.word	0x08003e48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	08003e48 	.word	0x08003e48

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_uldivmod>:
 8000a98:	b953      	cbnz	r3, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9a:	b94a      	cbnz	r2, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	2800      	cmpeq	r0, #0
 8000aa2:	bf1c      	itt	ne
 8000aa4:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa8:	f04f 30ff 	movne.w	r0, #4294967295
 8000aac:	f000 b97a 	b.w	8000da4 <__aeabi_idiv0>
 8000ab0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab8:	f000 f806 	bl	8000ac8 <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4770      	bx	lr

08000ac8 <__udivmoddi4>:
 8000ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000acc:	468c      	mov	ip, r1
 8000ace:	460d      	mov	r5, r1
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	9e08      	ldr	r6, [sp, #32]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d151      	bne.n	8000b7c <__udivmoddi4+0xb4>
 8000ad8:	428a      	cmp	r2, r1
 8000ada:	4617      	mov	r7, r2
 8000adc:	d96d      	bls.n	8000bba <__udivmoddi4+0xf2>
 8000ade:	fab2 fe82 	clz	lr, r2
 8000ae2:	f1be 0f00 	cmp.w	lr, #0
 8000ae6:	d00b      	beq.n	8000b00 <__udivmoddi4+0x38>
 8000ae8:	f1ce 0c20 	rsb	ip, lr, #32
 8000aec:	fa01 f50e 	lsl.w	r5, r1, lr
 8000af0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000af4:	fa02 f70e 	lsl.w	r7, r2, lr
 8000af8:	ea4c 0c05 	orr.w	ip, ip, r5
 8000afc:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b00:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b04:	0c25      	lsrs	r5, r4, #16
 8000b06:	fbbc f8fa 	udiv	r8, ip, sl
 8000b0a:	fa1f f987 	uxth.w	r9, r7
 8000b0e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b12:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b16:	fb08 f309 	mul.w	r3, r8, r9
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d90a      	bls.n	8000b34 <__udivmoddi4+0x6c>
 8000b1e:	19ed      	adds	r5, r5, r7
 8000b20:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b24:	f080 8123 	bcs.w	8000d6e <__udivmoddi4+0x2a6>
 8000b28:	42ab      	cmp	r3, r5
 8000b2a:	f240 8120 	bls.w	8000d6e <__udivmoddi4+0x2a6>
 8000b2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b32:	443d      	add	r5, r7
 8000b34:	1aed      	subs	r5, r5, r3
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b3c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b44:	fb00 f909 	mul.w	r9, r0, r9
 8000b48:	45a1      	cmp	r9, r4
 8000b4a:	d909      	bls.n	8000b60 <__udivmoddi4+0x98>
 8000b4c:	19e4      	adds	r4, r4, r7
 8000b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b52:	f080 810a 	bcs.w	8000d6a <__udivmoddi4+0x2a2>
 8000b56:	45a1      	cmp	r9, r4
 8000b58:	f240 8107 	bls.w	8000d6a <__udivmoddi4+0x2a2>
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	443c      	add	r4, r7
 8000b60:	eba4 0409 	sub.w	r4, r4, r9
 8000b64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d061      	beq.n	8000c32 <__udivmoddi4+0x16a>
 8000b6e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b72:	2300      	movs	r3, #0
 8000b74:	6034      	str	r4, [r6, #0]
 8000b76:	6073      	str	r3, [r6, #4]
 8000b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0xc8>
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d054      	beq.n	8000c2e <__udivmoddi4+0x166>
 8000b84:	2100      	movs	r1, #0
 8000b86:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b90:	fab3 f183 	clz	r1, r3
 8000b94:	2900      	cmp	r1, #0
 8000b96:	f040 808e 	bne.w	8000cb6 <__udivmoddi4+0x1ee>
 8000b9a:	42ab      	cmp	r3, r5
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xdc>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	f200 80fa 	bhi.w	8000d98 <__udivmoddi4+0x2d0>
 8000ba4:	1a84      	subs	r4, r0, r2
 8000ba6:	eb65 0503 	sbc.w	r5, r5, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	46ac      	mov	ip, r5
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d03f      	beq.n	8000c32 <__udivmoddi4+0x16a>
 8000bb2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	b912      	cbnz	r2, 8000bc2 <__udivmoddi4+0xfa>
 8000bbc:	2701      	movs	r7, #1
 8000bbe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000bc2:	fab7 fe87 	clz	lr, r7
 8000bc6:	f1be 0f00 	cmp.w	lr, #0
 8000bca:	d134      	bne.n	8000c36 <__udivmoddi4+0x16e>
 8000bcc:	1beb      	subs	r3, r5, r7
 8000bce:	0c3a      	lsrs	r2, r7, #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bda:	0c25      	lsrs	r5, r4, #16
 8000bdc:	fb02 3318 	mls	r3, r2, r8, r3
 8000be0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000be4:	fb0c f308 	mul.w	r3, ip, r8
 8000be8:	42ab      	cmp	r3, r5
 8000bea:	d907      	bls.n	8000bfc <__udivmoddi4+0x134>
 8000bec:	19ed      	adds	r5, r5, r7
 8000bee:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bf2:	d202      	bcs.n	8000bfa <__udivmoddi4+0x132>
 8000bf4:	42ab      	cmp	r3, r5
 8000bf6:	f200 80d1 	bhi.w	8000d9c <__udivmoddi4+0x2d4>
 8000bfa:	4680      	mov	r8, r0
 8000bfc:	1aed      	subs	r5, r5, r3
 8000bfe:	b2a3      	uxth	r3, r4
 8000c00:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c04:	fb02 5510 	mls	r5, r2, r0, r5
 8000c08:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c0c:	fb0c fc00 	mul.w	ip, ip, r0
 8000c10:	45a4      	cmp	ip, r4
 8000c12:	d907      	bls.n	8000c24 <__udivmoddi4+0x15c>
 8000c14:	19e4      	adds	r4, r4, r7
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x15a>
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	f200 80b8 	bhi.w	8000d92 <__udivmoddi4+0x2ca>
 8000c22:	4618      	mov	r0, r3
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2c:	e79d      	b.n	8000b6a <__udivmoddi4+0xa2>
 8000c2e:	4631      	mov	r1, r6
 8000c30:	4630      	mov	r0, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	f1ce 0420 	rsb	r4, lr, #32
 8000c3a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c3e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c42:	fa20 f804 	lsr.w	r8, r0, r4
 8000c46:	0c3a      	lsrs	r2, r7, #16
 8000c48:	fa25 f404 	lsr.w	r4, r5, r4
 8000c4c:	ea48 0803 	orr.w	r8, r8, r3
 8000c50:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c54:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c58:	fb02 4411 	mls	r4, r2, r1, r4
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c64:	fb01 f30c 	mul.w	r3, r1, ip
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x1bc>
 8000c70:	19ed      	adds	r5, r5, r7
 8000c72:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c76:	f080 808a 	bcs.w	8000d8e <__udivmoddi4+0x2c6>
 8000c7a:	42ab      	cmp	r3, r5
 8000c7c:	f240 8087 	bls.w	8000d8e <__udivmoddi4+0x2c6>
 8000c80:	3902      	subs	r1, #2
 8000c82:	443d      	add	r5, r7
 8000c84:	1aeb      	subs	r3, r5, r3
 8000c86:	fa1f f588 	uxth.w	r5, r8
 8000c8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c8e:	fb02 3310 	mls	r3, r2, r0, r3
 8000c92:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c96:	fb00 f30c 	mul.w	r3, r0, ip
 8000c9a:	42ab      	cmp	r3, r5
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1e6>
 8000c9e:	19ed      	adds	r5, r5, r7
 8000ca0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ca4:	d26f      	bcs.n	8000d86 <__udivmoddi4+0x2be>
 8000ca6:	42ab      	cmp	r3, r5
 8000ca8:	d96d      	bls.n	8000d86 <__udivmoddi4+0x2be>
 8000caa:	3802      	subs	r0, #2
 8000cac:	443d      	add	r5, r7
 8000cae:	1aeb      	subs	r3, r5, r3
 8000cb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb4:	e78f      	b.n	8000bd6 <__udivmoddi4+0x10e>
 8000cb6:	f1c1 0720 	rsb	r7, r1, #32
 8000cba:	fa22 f807 	lsr.w	r8, r2, r7
 8000cbe:	408b      	lsls	r3, r1
 8000cc0:	fa05 f401 	lsl.w	r4, r5, r1
 8000cc4:	ea48 0303 	orr.w	r3, r8, r3
 8000cc8:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ccc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cd0:	40fd      	lsrs	r5, r7
 8000cd2:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cd6:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cda:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cde:	fb0c 5519 	mls	r5, ip, r9, r5
 8000ce2:	fa1f f883 	uxth.w	r8, r3
 8000ce6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cea:	fb09 f408 	mul.w	r4, r9, r8
 8000cee:	42ac      	cmp	r4, r5
 8000cf0:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf4:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x244>
 8000cfa:	18ed      	adds	r5, r5, r3
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d243      	bcs.n	8000d8a <__udivmoddi4+0x2c2>
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	d941      	bls.n	8000d8a <__udivmoddi4+0x2c2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	441d      	add	r5, r3
 8000d0c:	1b2d      	subs	r5, r5, r4
 8000d0e:	fa1f fe8e 	uxth.w	lr, lr
 8000d12:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d16:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d1a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45a0      	cmp	r8, r4
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x26e>
 8000d26:	18e4      	adds	r4, r4, r3
 8000d28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d2c:	d229      	bcs.n	8000d82 <__udivmoddi4+0x2ba>
 8000d2e:	45a0      	cmp	r8, r4
 8000d30:	d927      	bls.n	8000d82 <__udivmoddi4+0x2ba>
 8000d32:	3802      	subs	r0, #2
 8000d34:	441c      	add	r4, r3
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba4 0408 	sub.w	r4, r4, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	464d      	mov	r5, r9
 8000d48:	d315      	bcc.n	8000d76 <__udivmoddi4+0x2ae>
 8000d4a:	d012      	beq.n	8000d72 <__udivmoddi4+0x2aa>
 8000d4c:	b156      	cbz	r6, 8000d64 <__udivmoddi4+0x29c>
 8000d4e:	ebba 030e 	subs.w	r3, sl, lr
 8000d52:	eb64 0405 	sbc.w	r4, r4, r5
 8000d56:	fa04 f707 	lsl.w	r7, r4, r7
 8000d5a:	40cb      	lsrs	r3, r1
 8000d5c:	431f      	orrs	r7, r3
 8000d5e:	40cc      	lsrs	r4, r1
 8000d60:	6037      	str	r7, [r6, #0]
 8000d62:	6074      	str	r4, [r6, #4]
 8000d64:	2100      	movs	r1, #0
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	e6f8      	b.n	8000b60 <__udivmoddi4+0x98>
 8000d6e:	4690      	mov	r8, r2
 8000d70:	e6e0      	b.n	8000b34 <__udivmoddi4+0x6c>
 8000d72:	45c2      	cmp	sl, r8
 8000d74:	d2ea      	bcs.n	8000d4c <__udivmoddi4+0x284>
 8000d76:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d7a:	eb69 0503 	sbc.w	r5, r9, r3
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7e4      	b.n	8000d4c <__udivmoddi4+0x284>
 8000d82:	4628      	mov	r0, r5
 8000d84:	e7d7      	b.n	8000d36 <__udivmoddi4+0x26e>
 8000d86:	4640      	mov	r0, r8
 8000d88:	e791      	b.n	8000cae <__udivmoddi4+0x1e6>
 8000d8a:	4681      	mov	r9, r0
 8000d8c:	e7be      	b.n	8000d0c <__udivmoddi4+0x244>
 8000d8e:	4601      	mov	r1, r0
 8000d90:	e778      	b.n	8000c84 <__udivmoddi4+0x1bc>
 8000d92:	3802      	subs	r0, #2
 8000d94:	443c      	add	r4, r7
 8000d96:	e745      	b.n	8000c24 <__udivmoddi4+0x15c>
 8000d98:	4608      	mov	r0, r1
 8000d9a:	e708      	b.n	8000bae <__udivmoddi4+0xe6>
 8000d9c:	f1a8 0802 	sub.w	r8, r8, #2
 8000da0:	443d      	add	r5, r7
 8000da2:	e72b      	b.n	8000bfc <__udivmoddi4+0x134>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f92d 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	200f      	movs	r0, #15
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f002 fbdc 	bl	8003598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f937 	bl	800107e <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f90d 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000098 	.word	0x20000098
 8000e44:	20000004 	.word	0x20000004
 8000e48:	20000000 	.word	0x20000000

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	20000124 	.word	0x20000124

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000124 	.word	0x20000124

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff ffee 	bl	8000e74 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <HAL_Delay+0x40>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffde 	bl	8000e74 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3f7      	bcc.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	490d      	ldr	r1, [pc, #52]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	4909      	ldr	r1, [pc, #36]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	1e5a      	subs	r2, r3, #1
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	401a      	ands	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fce:	2101      	movs	r1, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	1e59      	subs	r1, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff90 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff49 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff5e 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff90 	bl	8000f88 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5f 	bl	8000f34 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffb0 	bl	8000fec <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e16b      	b.n	800138c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 815a 	bne.w	8001386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d005      	beq.n	80010ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d130      	bne.n	800114c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b03      	cmp	r3, #3
 8001156:	d017      	beq.n	8001188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d123      	bne.n	80011dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	08da      	lsrs	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3208      	adds	r2, #8
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b4 	beq.w	8001386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <HAL_GPIO_Init+0x308>)
 8001224:	4b5e      	ldr	r3, [pc, #376]	; (80013a0 <HAL_GPIO_Init+0x308>)
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_GPIO_Init+0x308>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123a:	4a5a      	ldr	r2, [pc, #360]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a51      	ldr	r2, [pc, #324]	; (80013a8 <HAL_GPIO_Init+0x310>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02b      	beq.n	80012be <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <HAL_GPIO_Init+0x314>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4f      	ldr	r2, [pc, #316]	; (80013b0 <HAL_GPIO_Init+0x318>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4e      	ldr	r2, [pc, #312]	; (80013b4 <HAL_GPIO_Init+0x31c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4d      	ldr	r2, [pc, #308]	; (80013b8 <HAL_GPIO_Init+0x320>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4c      	ldr	r2, [pc, #304]	; (80013bc <HAL_GPIO_Init+0x324>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4b      	ldr	r2, [pc, #300]	; (80013c0 <HAL_GPIO_Init+0x328>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <HAL_GPIO_Init+0x32c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x20a>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a2:	2308      	movs	r3, #8
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4934      	ldr	r1, [pc, #208]	; (80013a4 <HAL_GPIO_Init+0x30c>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b3a      	ldr	r3, [pc, #232]	; (80013c8 <HAL_GPIO_Init+0x330>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132c:	4a26      	ldr	r2, [pc, #152]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_GPIO_Init+0x330>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <HAL_GPIO_Init+0x330>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae90 	bls.w	80010b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	3724      	adds	r7, #36	; 0x24
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40021c00 	.word	0x40021c00
 80013c8:	40013c00 	.word	0x40013c00

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e11f      	b.n	8001652 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f001 fc42 	bl	8002cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2224      	movs	r2, #36	; 0x24
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001462:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001464:	f001 fb9e 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a7b      	ldr	r2, [pc, #492]	; (800165c <HAL_I2C_Init+0x25c>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d807      	bhi.n	8001484 <HAL_I2C_Init+0x84>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a7a      	ldr	r2, [pc, #488]	; (8001660 <HAL_I2C_Init+0x260>)
 8001478:	4293      	cmp	r3, r2
 800147a:	bf94      	ite	ls
 800147c:	2301      	movls	r3, #1
 800147e:	2300      	movhi	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	e006      	b.n	8001492 <HAL_I2C_Init+0x92>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a77      	ldr	r2, [pc, #476]	; (8001664 <HAL_I2C_Init+0x264>)
 8001488:	4293      	cmp	r3, r2
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e0db      	b.n	8001652 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_I2C_Init+0x268>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9b      	lsrs	r3, r3, #18
 80014a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	6852      	ldr	r2, [r2, #4]
 80014b0:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4863      	ldr	r0, [pc, #396]	; (800165c <HAL_I2C_Init+0x25c>)
 80014ce:	4283      	cmp	r3, r0
 80014d0:	d802      	bhi.n	80014d8 <HAL_I2C_Init+0xd8>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3301      	adds	r3, #1
 80014d6:	e009      	b.n	80014ec <HAL_I2C_Init+0xec>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014de:	fb00 f303 	mul.w	r3, r0, r3
 80014e2:	4862      	ldr	r0, [pc, #392]	; (800166c <HAL_I2C_Init+0x26c>)
 80014e4:	fba0 0303 	umull	r0, r3, r0, r3
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	3301      	adds	r3, #1
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4955      	ldr	r1, [pc, #340]	; (800165c <HAL_I2C_Init+0x25c>)
 8001508:	428b      	cmp	r3, r1
 800150a:	d80d      	bhi.n	8001528 <HAL_I2C_Init+0x128>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e59      	subs	r1, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fbb1 f3f3 	udiv	r3, r1, r3
 800151a:	3301      	adds	r3, #1
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	2b04      	cmp	r3, #4
 8001522:	bf38      	it	cc
 8001524:	2304      	movcc	r3, #4
 8001526:	e04f      	b.n	80015c8 <HAL_I2C_Init+0x1c8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d111      	bne.n	8001554 <HAL_I2C_Init+0x154>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e5c      	subs	r4, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	440b      	add	r3, r1
 800153e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001542:	3301      	adds	r3, #1
 8001544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	e012      	b.n	800157a <HAL_I2C_Init+0x17a>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1e5c      	subs	r4, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	0099      	lsls	r1, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	fbb4 f3f3 	udiv	r3, r4, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Init+0x182>
 800157e:	2301      	movs	r3, #1
 8001580:	e022      	b.n	80015c8 <HAL_I2C_Init+0x1c8>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10e      	bne.n	80015a8 <HAL_I2C_Init+0x1a8>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1e5c      	subs	r4, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6859      	ldr	r1, [r3, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	440b      	add	r3, r1
 8001598:	fbb4 f3f3 	udiv	r3, r4, r3
 800159c:	3301      	adds	r3, #1
 800159e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a6:	e00f      	b.n	80015c8 <HAL_I2C_Init+0x1c8>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e5c      	subs	r4, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	0099      	lsls	r1, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	fbb4 f3f3 	udiv	r3, r4, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	69d0      	ldr	r0, [r2, #28]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6a12      	ldr	r2, [r2, #32]
 80015e2:	4302      	orrs	r2, r0
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	6908      	ldr	r0, [r1, #16]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	68c9      	ldr	r1, [r1, #12]
 8001602:	4301      	orrs	r1, r0
 8001604:	430b      	orrs	r3, r1
 8001606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	68d2      	ldr	r2, [r2, #12]
 8001612:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6950      	ldr	r0, [r2, #20]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6992      	ldr	r2, [r2, #24]
 800161e:	4302      	orrs	r2, r0
 8001620:	430a      	orrs	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	bf00      	nop
 800165c:	000186a0 	.word	0x000186a0
 8001660:	001e847f 	.word	0x001e847f
 8001664:	003d08ff 	.word	0x003d08ff
 8001668:	431bde83 	.word	0x431bde83
 800166c:	10624dd3 	.word	0x10624dd3

08001670 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4603      	mov	r3, r0
 8001680:	817b      	strh	r3, [r7, #10]
 8001682:	460b      	mov	r3, r1
 8001684:	813b      	strh	r3, [r7, #8]
 8001686:	4613      	mov	r3, r2
 8001688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800168a:	f7ff fbf3 	bl	8000e74 <HAL_GetTick>
 800168e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b20      	cmp	r3, #32
 800169a:	f040 80d9 	bne.w	8001850 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2319      	movs	r3, #25
 80016a4:	2201      	movs	r2, #1
 80016a6:	496d      	ldr	r1, [pc, #436]	; (800185c <HAL_I2C_Mem_Write+0x1ec>)
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 fc7d 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016b4:	2302      	movs	r3, #2
 80016b6:	e0cc      	b.n	8001852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Mem_Write+0x56>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e0c5      	b.n	8001852 <HAL_I2C_Mem_Write+0x1e2>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d007      	beq.n	80016ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2221      	movs	r2, #33	; 0x21
 8001700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800171c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001722:	b29a      	uxth	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a4d      	ldr	r2, [pc, #308]	; (8001860 <HAL_I2C_Mem_Write+0x1f0>)
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800172e:	88f8      	ldrh	r0, [r7, #6]
 8001730:	893a      	ldrh	r2, [r7, #8]
 8001732:	8979      	ldrh	r1, [r7, #10]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4603      	mov	r3, r0
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fab6 	bl	8001cb0 <I2C_RequestMemoryWrite>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d052      	beq.n	80017f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e081      	b.n	8001852 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 fcfe 	bl	8002154 <I2C_WaitOnTXEFlagUntilTimeout>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b04      	cmp	r3, #4
 8001764:	d107      	bne.n	8001776 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e06b      	b.n	8001852 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001794:	3b01      	subs	r3, #1
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d11b      	bne.n	80017f0 <HAL_I2C_Mem_Write+0x180>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d017      	beq.n	80017f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1aa      	bne.n	800174e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fcea 	bl	80021d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00d      	beq.n	8001824 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	2b04      	cmp	r3, #4
 800180e:	d107      	bne.n	8001820 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e016      	b.n	8001852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2220      	movs	r2, #32
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
  }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	00100002 	.word	0x00100002
 8001860:	ffff0000 	.word	0xffff0000

08001864 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af02      	add	r7, sp, #8
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	817b      	strh	r3, [r7, #10]
 8001876:	460b      	mov	r3, r1
 8001878:	813b      	strh	r3, [r7, #8]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800187e:	f7ff faf9 	bl	8000e74 <HAL_GetTick>
 8001882:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b20      	cmp	r3, #32
 800188e:	f040 8208 	bne.w	8001ca2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2319      	movs	r3, #25
 8001898:	2201      	movs	r2, #1
 800189a:	497b      	ldr	r1, [pc, #492]	; (8001a88 <HAL_I2C_Mem_Read+0x224>)
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 fb83 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
 80018aa:	e1fb      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Mem_Read+0x56>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e1f4      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d007      	beq.n	80018e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2222      	movs	r2, #34	; 0x22
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800190a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a5b      	ldr	r2, [pc, #364]	; (8001a8c <HAL_I2C_Mem_Read+0x228>)
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001922:	88f8      	ldrh	r0, [r7, #6]
 8001924:	893a      	ldrh	r2, [r7, #8]
 8001926:	8979      	ldrh	r1, [r7, #10]
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	4603      	mov	r3, r0
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 fa50 	bl	8001dd8 <I2C_RequestMemoryRead>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e1b0      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	2b00      	cmp	r3, #0
 8001948:	d113      	bne.n	8001972 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	623b      	str	r3, [r7, #32]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e184      	b.n	8001c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001976:	2b01      	cmp	r3, #1
 8001978:	d11b      	bne.n	80019b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e164      	b.n	8001c7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d11b      	bne.n	80019f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	e144      	b.n	8001c7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a08:	e138      	b.n	8001c7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	f200 80f1 	bhi.w	8001bf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d123      	bne.n	8001a64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fc19 	bl	8002258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e139      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	6912      	ldr	r2, [r2, #16]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a62:	e10b      	b.n	8001c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d14e      	bne.n	8001b0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a72:	2200      	movs	r2, #0
 8001a74:	4906      	ldr	r1, [pc, #24]	; (8001a90 <HAL_I2C_Mem_Read+0x22c>)
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 fa96 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e10e      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
 8001a86:	bf00      	nop
 8001a88:	00100002 	.word	0x00100002
 8001a8c:	ffff0000 	.word	0xffff0000
 8001a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	6912      	ldr	r2, [r2, #16]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	6912      	ldr	r2, [r2, #16]
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b08:	e0b8      	b.n	8001c7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b10:	2200      	movs	r2, #0
 8001b12:	4966      	ldr	r1, [pc, #408]	; (8001cac <HAL_I2C_Mem_Read+0x448>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fa47 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0bf      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	6912      	ldr	r2, [r2, #16]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	494f      	ldr	r1, [pc, #316]	; (8001cac <HAL_I2C_Mem_Read+0x448>)
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fa19 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e091      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	6912      	ldr	r2, [r2, #16]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	6912      	ldr	r2, [r2, #16]
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf4:	e042      	b.n	8001c7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 fb2c 	bl	8002258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e04c      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	6912      	ldr	r2, [r2, #16]
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d118      	bne.n	8001c7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	6912      	ldr	r2, [r2, #16]
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f47f aec2 	bne.w	8001a0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	00010004 	.word	0x00010004

08001cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	817b      	strh	r3, [r7, #10]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	813b      	strh	r3, [r7, #8]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f95e 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d00:	d103      	bne.n	8001d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e05e      	b.n	8001dcc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	897a      	ldrh	r2, [r7, #10]
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	6a3a      	ldr	r2, [r7, #32]
 8001d20:	492c      	ldr	r1, [pc, #176]	; (8001dd4 <I2C_RequestMemoryWrite+0x124>)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f997 	bl	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e04c      	b.n	8001dcc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fa01 	bl	8002154 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00d      	beq.n	8001d74 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d107      	bne.n	8001d70 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e02b      	b.n	8001dcc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	893a      	ldrh	r2, [r7, #8]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	e021      	b.n	8001dca <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	893a      	ldrh	r2, [r7, #8]
 8001d8c:	0a12      	lsrs	r2, r2, #8
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	6a39      	ldr	r1, [r7, #32]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 f9db 	bl	8002154 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00d      	beq.n	8001dc0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d107      	bne.n	8001dbc <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e005      	b.n	8001dcc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	893a      	ldrh	r2, [r7, #8]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	00010002 	.word	0x00010002

08001dd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	4608      	mov	r0, r1
 8001de2:	4611      	mov	r1, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	817b      	strh	r3, [r7, #10]
 8001dea:	460b      	mov	r3, r1
 8001dec:	813b      	strh	r3, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f8c2 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e38:	d103      	bne.n	8001e42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e0a9      	b.n	8001f9a <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	897a      	ldrh	r2, [r7, #10]
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	6a3a      	ldr	r2, [r7, #32]
 8001e58:	4952      	ldr	r1, [pc, #328]	; (8001fa4 <I2C_RequestMemoryRead+0x1cc>)
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f8fb 	bl	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e097      	b.n	8001f9a <I2C_RequestMemoryRead+0x1c2>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e82:	6a39      	ldr	r1, [r7, #32]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f965 	bl	8002154 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e076      	b.n	8001f9a <I2C_RequestMemoryRead+0x1c2>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	893a      	ldrh	r2, [r7, #8]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	611a      	str	r2, [r3, #16]
 8001ebc:	e021      	b.n	8001f02 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	893a      	ldrh	r2, [r7, #8]
 8001ec4:	0a12      	lsrs	r2, r2, #8
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ece:	6a39      	ldr	r1, [r7, #32]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f93f 	bl	8002154 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00d      	beq.n	8001ef8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d107      	bne.n	8001ef4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e050      	b.n	8001f9a <I2C_RequestMemoryRead+0x1c2>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f04:	6a39      	ldr	r1, [r7, #32]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f924 	bl	8002154 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d107      	bne.n	8001f2a <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e035      	b.n	8001f9a <I2C_RequestMemoryRead+0x1c2>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f82c 	bl	8001fa8 <I2C_WaitOnFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <I2C_RequestMemoryRead+0x19a>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f64:	d103      	bne.n	8001f6e <I2C_RequestMemoryRead+0x196>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e013      	b.n	8001f9a <I2C_RequestMemoryRead+0x1c2>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	897a      	ldrh	r2, [r7, #10]
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	4907      	ldr	r1, [pc, #28]	; (8001fa4 <I2C_RequestMemoryRead+0x1cc>)
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f864 	bl	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <I2C_RequestMemoryRead+0x1c0>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <I2C_RequestMemoryRead+0x1c2>
  }

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	00010002 	.word	0x00010002

08001fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb8:	e025      	b.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d021      	beq.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc2:	f7fe ff57 	bl	8000e74 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	1ad2      	subs	r2, r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d802      	bhi.n	8001fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d116      	bne.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e023      	b.n	800204e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	0c1b      	lsrs	r3, r3, #16
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10d      	bne.n	800202c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4013      	ands	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
 800202a:	e00c      	b.n	8002046 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4013      	ands	r3, r2
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	429a      	cmp	r2, r3
 800204a:	d0b6      	beq.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002064:	e051      	b.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002074:	d123      	bne.n	80020be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002084:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800208e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f043 0204 	orr.w	r2, r3, #4
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e046      	b.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d021      	beq.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7fe fed5 	bl	8000e74 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d802      	bhi.n	80020dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d116      	bne.n	800210a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f043 0220 	orr.w	r2, r3, #32
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e020      	b.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10c      	bne.n	800212e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e00b      	b.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	43da      	mvns	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4013      	ands	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d18d      	bne.n	8002066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002160:	e02d      	b.n	80021be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f8ce 	bl	8002304 <I2C_IsAcknowledgeFailed>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e02d      	b.n	80021ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d021      	beq.n	80021be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217a:	f7fe fe7b 	bl	8000e74 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	1ad2      	subs	r2, r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	429a      	cmp	r2, r3
 8002188:	d802      	bhi.n	8002190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d116      	bne.n	80021be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e007      	b.n	80021ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d1ca      	bne.n	8002162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021e2:	e02d      	b.n	8002240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f88d 	bl	8002304 <I2C_IsAcknowledgeFailed>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e02d      	b.n	8002250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d021      	beq.n	8002240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021fc:	f7fe fe3a 	bl	8000e74 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	1ad2      	subs	r2, r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	d802      	bhi.n	8002212 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0220 	orr.w	r2, r3, #32
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e007      	b.n	8002250 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b04      	cmp	r3, #4
 800224c:	d1ca      	bne.n	80021e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002264:	e042      	b.n	80022ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	2b10      	cmp	r3, #16
 8002272:	d119      	bne.n	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0210 	mvn.w	r2, #16
 800227c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e029      	b.n	80022fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a8:	f7fe fde4 	bl	8000e74 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	1ad2      	subs	r2, r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d802      	bhi.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d1b5      	bne.n	8002266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d11b      	bne.n	8002354 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002324:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f043 0204 	orr.w	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e264      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002382:	4ba3      	ldr	r3, [pc, #652]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d00c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4ba0      	ldr	r3, [pc, #640]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	2b08      	cmp	r3, #8
 8002398:	d112      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b9d      	ldr	r3, [pc, #628]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4b99      	ldr	r3, [pc, #612]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05b      	beq.n	800246c <HAL_RCC_OscConfig+0x108>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d157      	bne.n	800246c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e23f      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x74>
 80023ca:	4a91      	ldr	r2, [pc, #580]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	4b90      	ldr	r3, [pc, #576]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4a8b      	ldr	r2, [pc, #556]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	4b8a      	ldr	r3, [pc, #552]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4a88      	ldr	r2, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	4b87      	ldr	r3, [pc, #540]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023fc:	4a84      	ldr	r2, [pc, #528]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	4b84      	ldr	r3, [pc, #528]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4a81      	ldr	r2, [pc, #516]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 800240a:	4b81      	ldr	r3, [pc, #516]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fd2a 	bl	8000e74 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fd26 	bl	8000e74 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e204      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xc0>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fd16 	bl	8000e74 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fd12 	bl	8000e74 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1f0      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0xe8>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247a:	4b65      	ldr	r3, [pc, #404]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b62      	ldr	r3, [pc, #392]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c4      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4956      	ldr	r1, [pc, #344]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	4b55      	ldr	r3, [pc, #340]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b4f      	ldr	r3, [pc, #316]	; (8002614 <HAL_RCC_OscConfig+0x2b0>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe fccb 	bl	8000e74 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe fcc7 	bl	8000e74 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a5      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4943      	ldr	r1, [pc, #268]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002502:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <HAL_RCC_OscConfig+0x2b0>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fcaa 	bl	8000e74 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002524:	f7fe fca6 	bl	8000e74 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e184      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d030      	beq.n	80025b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_RCC_OscConfig+0x2b4>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe fc8a 	bl	8000e74 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe fc86 	bl	8000e74 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e164      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x200>
 8002582:	e015      	b.n	80025b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002584:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_RCC_OscConfig+0x2b4>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe fc73 	bl	8000e74 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002592:	f7fe fc6f 	bl	8000e74 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e14d      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a0 	beq.w	80026fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_OscConfig+0x2b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d121      	bne.n	800263e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_RCC_OscConfig+0x2b8>)
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCC_OscConfig+0x2b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7fe fc35 	bl	8000e74 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e011      	b.n	8002632 <HAL_RCC_OscConfig+0x2ce>
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800
 8002614:	42470000 	.word	0x42470000
 8002618:	42470e80 	.word	0x42470e80
 800261c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002620:	f7fe fc28 	bl	8000e74 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e106      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b85      	ldr	r3, [pc, #532]	; (8002848 <HAL_RCC_OscConfig+0x4e4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x2f0>
 8002646:	4a81      	ldr	r2, [pc, #516]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002648:	4b80      	ldr	r3, [pc, #512]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	e01c      	b.n	800268e <HAL_RCC_OscConfig+0x32a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x312>
 800265c:	4a7b      	ldr	r2, [pc, #492]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800265e:	4b7b      	ldr	r3, [pc, #492]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	4a78      	ldr	r2, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800266a:	4b78      	ldr	r3, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0x32a>
 8002676:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002678:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	4a72      	ldr	r2, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002684:	4b71      	ldr	r3, [pc, #452]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d015      	beq.n	80026c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002696:	f7fe fbed 	bl	8000e74 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fbe9 	bl	8000e74 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0c5      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	4b65      	ldr	r3, [pc, #404]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ee      	beq.n	800269e <HAL_RCC_OscConfig+0x33a>
 80026c0:	e014      	b.n	80026ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fbd7 	bl	8000e74 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7fe fbd3 	bl	8000e74 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0af      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e0:	4b5a      	ldr	r3, [pc, #360]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4a56      	ldr	r2, [pc, #344]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	4b55      	ldr	r3, [pc, #340]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 809b 	beq.w	800283e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d05c      	beq.n	80027ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d141      	bne.n	80027a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe fba7 	bl	8000e74 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fba3 	bl	8000e74 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e081      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	4b43      	ldr	r3, [pc, #268]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002748:	4940      	ldr	r1, [pc, #256]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	019b      	lsls	r3, r3, #6
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002772:	4b37      	ldr	r3, [pc, #220]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fb7c 	bl	8000e74 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fb78 	bl	8000e74 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e056      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x41c>
 800279e:	e04e      	b.n	800283e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe fb65 	bl	8000e74 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fe fb61 	bl	8000e74 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e03f      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x44a>
 80027cc:	e037      	b.n	800283e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e032      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d028      	beq.n	800283a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d121      	bne.n	800283a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d11a      	bne.n	800283a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800280a:	4013      	ands	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002810:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002812:	4293      	cmp	r3, r2
 8002814:	d111      	bne.n	800283a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d107      	bne.n	800283a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40007000 	.word	0x40007000
 800284c:	40023800 	.word	0x40023800
 8002850:	42470060 	.word	0x42470060

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0207 	and.w	r2, r3, #7
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d20c      	bcs.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0207 	and.w	r2, r3, #7
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4a59      	ldr	r2, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4950      	ldr	r1, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4937      	ldr	r1, [pc, #220]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 0203 	bic.w	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fa96 	bl	8000e74 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fa92 	bl	8000e74 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0207 	and.w	r2, r3, #7
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d90c      	bls.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0207 	and.w	r2, r3, #7
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4919      	ldr	r1, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4912      	ldr	r1, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4601      	mov	r1, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5cd3      	ldrb	r3, [r2, r3]
 80029ee:	fa21 f303 	lsr.w	r3, r1, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe f9f6 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08003e60 	.word	0x08003e60
 8002a18:	20000098 	.word	0x20000098
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60fa      	str	r2, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	617a      	str	r2, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002a34:	2200      	movs	r2, #0
 8002a36:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a38:	4a51      	ldr	r2, [pc, #324]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	f002 020c 	and.w	r2, r2, #12
 8002a40:	2a04      	cmp	r2, #4
 8002a42:	d007      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a44:	2a08      	cmp	r2, #8
 8002a46:	d008      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a48:	2a00      	cmp	r2, #0
 8002a4a:	f040 8090 	bne.w	8002b6e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a4e:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a50:	613b      	str	r3, [r7, #16]
       break;
 8002a52:	e08f      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a54:	4b4c      	ldr	r3, [pc, #304]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	e08c      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a5a:	4a49      	ldr	r2, [pc, #292]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a5c:	6852      	ldr	r2, [r2, #4]
 8002a5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002a62:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a64:	4a46      	ldr	r2, [pc, #280]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a66:	6852      	ldr	r2, [r2, #4]
 8002a68:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002a6c:	2a00      	cmp	r2, #0
 8002a6e:	d023      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a70:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	f04f 0400 	mov.w	r4, #0
 8002a7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	ea03 0301 	and.w	r3, r3, r1
 8002a86:	ea04 0402 	and.w	r4, r4, r2
 8002a8a:	4a3f      	ldr	r2, [pc, #252]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a8c:	fb02 f104 	mul.w	r1, r2, r4
 8002a90:	2200      	movs	r2, #0
 8002a92:	fb02 f203 	mul.w	r2, r2, r3
 8002a96:	440a      	add	r2, r1
 8002a98:	493b      	ldr	r1, [pc, #236]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a9a:	fba3 0101 	umull	r0, r1, r3, r1
 8002a9e:	1853      	adds	r3, r2, r1
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f04f 0400 	mov.w	r4, #0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	f7fd fff4 	bl	8000a98 <__aeabi_uldivmod>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e04c      	b.n	8002b52 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4a31      	ldr	r2, [pc, #196]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aba:	6852      	ldr	r2, [r2, #4]
 8002abc:	0992      	lsrs	r2, r2, #6
 8002abe:	4611      	mov	r1, r2
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002ac8:	f04f 0600 	mov.w	r6, #0
 8002acc:	ea05 0501 	and.w	r5, r5, r1
 8002ad0:	ea06 0602 	and.w	r6, r6, r2
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	4632      	mov	r2, r6
 8002ad8:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002adc:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002ae0:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002ae4:	4651      	mov	r1, sl
 8002ae6:	465a      	mov	r2, fp
 8002ae8:	46aa      	mov	sl, r5
 8002aea:	46b3      	mov	fp, r6
 8002aec:	4655      	mov	r5, sl
 8002aee:	465e      	mov	r6, fp
 8002af0:	1b4d      	subs	r5, r1, r5
 8002af2:	eb62 0606 	sbc.w	r6, r2, r6
 8002af6:	4629      	mov	r1, r5
 8002af8:	4632      	mov	r2, r6
 8002afa:	0194      	lsls	r4, r2, #6
 8002afc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b00:	018b      	lsls	r3, r1, #6
 8002b02:	1a5b      	subs	r3, r3, r1
 8002b04:	eb64 0402 	sbc.w	r4, r4, r2
 8002b08:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002b0c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002b10:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002b14:	4643      	mov	r3, r8
 8002b16:	464c      	mov	r4, r9
 8002b18:	4655      	mov	r5, sl
 8002b1a:	465e      	mov	r6, fp
 8002b1c:	18ed      	adds	r5, r5, r3
 8002b1e:	eb46 0604 	adc.w	r6, r6, r4
 8002b22:	462b      	mov	r3, r5
 8002b24:	4634      	mov	r4, r6
 8002b26:	02a2      	lsls	r2, r4, #10
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	029b      	lsls	r3, r3, #10
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f04f 0400 	mov.w	r4, #0
 8002b44:	461a      	mov	r2, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	f7fd ffa6 	bl	8000a98 <__aeabi_uldivmod>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	613b      	str	r3, [r7, #16]
      break;
 8002b6c:	e002      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b70:	613b      	str	r3, [r7, #16]
      break;
 8002b72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b74:	693b      	ldr	r3, [r7, #16]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	017d7840 	.word	0x017d7840

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000098 	.word	0x20000098

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bac:	4601      	mov	r1, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0a9b      	lsrs	r3, r3, #10
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	08003e70 	.word	0x08003e70

08002bcc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <MX_GPIO_Init+0x80>)
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_GPIO_Init+0x80>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <MX_GPIO_Init+0x80>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <MX_GPIO_Init+0x80>)
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <MX_GPIO_Init+0x80>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <MX_GPIO_Init+0x80>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c20:	480b      	ldr	r0, [pc, #44]	; (8002c50 <MX_GPIO_Init+0x84>)
 8002c22:	f7fe fbd3 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4804      	ldr	r0, [pc, #16]	; (8002c50 <MX_GPIO_Init+0x84>)
 8002c40:	f7fe fa2a 	bl	8001098 <HAL_GPIO_Init>

}
 8002c44:	bf00      	nop
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020c00 	.word	0x40020c00

08002c54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <MX_I2C1_Init+0x54>)
 8002c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c60:	4a12      	ldr	r2, [pc, #72]	; (8002cac <MX_I2C1_Init+0x58>)
 8002c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c84:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c90:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <MX_I2C1_Init+0x50>)
 8002c92:	f7fe fbb5 	bl	8001400 <HAL_I2C_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c9c:	f000 f8d8 	bl	8002e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000128 	.word	0x20000128
 8002ca8:	40005400 	.word	0x40005400
 8002cac:	00061a80 	.word	0x00061a80

08002cb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <HAL_I2C_MspInit+0x84>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12b      	bne.n	8002d2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_I2C_MspInit+0x88>)
 8002cd8:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_I2C_MspInit+0x88>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_I2C_MspInit+0x88>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cee:	23c0      	movs	r3, #192	; 0xc0
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cf2:	2312      	movs	r3, #18
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 0314 	add.w	r3, r7, #20
 8002d06:	4619      	mov	r1, r3
 8002d08:	480c      	ldr	r0, [pc, #48]	; (8002d3c <HAL_I2C_MspInit+0x8c>)
 8002d0a:	f7fe f9c5 	bl	8001098 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_I2C_MspInit+0x88>)
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_I2C_MspInit+0x88>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_I2C_MspInit+0x88>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3728      	adds	r7, #40	; 0x28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40005400 	.word	0x40005400
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40020400 	.word	0x40020400

08002d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d44:	f7fe f830 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d48:	f000 f818 	bl	8002d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d4c:	f7ff ff3e 	bl	8002bcc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d50:	f7ff ff80 	bl	8002c54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8002d54:	bf00      	nop
 8002d56:	4807      	ldr	r0, [pc, #28]	; (8002d74 <main+0x34>)
 8002d58:	f000 f87e 	bl	8002e58 <MPU6050_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d0f9      	beq.n	8002d56 <main+0x16>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002d62:	4905      	ldr	r1, [pc, #20]	; (8002d78 <main+0x38>)
 8002d64:	4803      	ldr	r0, [pc, #12]	; (8002d74 <main+0x34>)
 8002d66:	f000 f8cf 	bl	8002f08 <MPU6050_Read_All>
	  HAL_Delay (100);
 8002d6a:	2064      	movs	r0, #100	; 0x64
 8002d6c:	f7fe f88e 	bl	8000e8c <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8002d70:	e7f7      	b.n	8002d62 <main+0x22>
 8002d72:	bf00      	nop
 8002d74:	20000128 	.word	0x20000128
 8002d78:	20000188 	.word	0x20000188

08002d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b094      	sub	sp, #80	; 0x50
 8002d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d82:	f107 0320 	add.w	r3, r7, #32
 8002d86:	2230      	movs	r2, #48	; 0x30
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fcbc 	bl	8003708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	2300      	movs	r3, #0
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <SystemClock_Config+0xcc>)
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <SystemClock_Config+0xcc>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6413      	str	r3, [r2, #64]	; 0x40
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <SystemClock_Config+0xcc>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <SystemClock_Config+0xd0>)
 8002dc2:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <SystemClock_Config+0xd0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <SystemClock_Config+0xd0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002de0:	2310      	movs	r3, #16
 8002de2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de4:	2302      	movs	r3, #2
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002de8:	2300      	movs	r3, #0
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002dec:	2308      	movs	r3, #8
 8002dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002df0:	23a8      	movs	r3, #168	; 0xa8
 8002df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002df4:	2302      	movs	r3, #2
 8002df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dfc:	f107 0320 	add.w	r3, r7, #32
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff faaf 	bl	8002364 <HAL_RCC_OscConfig>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e0c:	f000 f820 	bl	8002e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e10:	230f      	movs	r3, #15
 8002e12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e14:	2302      	movs	r3, #2
 8002e16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2105      	movs	r1, #5
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fd10 	bl	8002854 <HAL_RCC_ClockConfig>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e3a:	f000 f809 	bl	8002e50 <Error_Handler>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	3750      	adds	r7, #80	; 0x50
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40007000 	.word	0x40007000

08002e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e54:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <Error_Handler+0x6>

08002e58 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af04      	add	r7, sp, #16
 8002e5e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002e60:	2364      	movs	r3, #100	; 0x64
 8002e62:	9302      	str	r3, [sp, #8]
 8002e64:	2301      	movs	r3, #1
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	f107 030f 	add.w	r3, r7, #15
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2301      	movs	r3, #1
 8002e70:	2275      	movs	r2, #117	; 0x75
 8002e72:	21d0      	movs	r1, #208	; 0xd0
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7fe fcf5 	bl	8001864 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b68      	cmp	r3, #104	; 0x68
 8002e7e:	d13d      	bne.n	8002efc <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002e84:	2364      	movs	r3, #100	; 0x64
 8002e86:	9302      	str	r3, [sp, #8]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	f107 030e 	add.w	r3, r7, #14
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2301      	movs	r3, #1
 8002e94:	226b      	movs	r2, #107	; 0x6b
 8002e96:	21d0      	movs	r1, #208	; 0xd0
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7fe fbe9 	bl	8001670 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002ea2:	2364      	movs	r3, #100	; 0x64
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	f107 030e 	add.w	r3, r7, #14
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	2219      	movs	r2, #25
 8002eb4:	21d0      	movs	r1, #208	; 0xd0
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fe fbda 	bl	8001670 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ec0:	2364      	movs	r3, #100	; 0x64
 8002ec2:	9302      	str	r3, [sp, #8]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	f107 030e 	add.w	r3, r7, #14
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	221c      	movs	r2, #28
 8002ed2:	21d0      	movs	r1, #208	; 0xd0
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7fe fbcb 	bl	8001670 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002ede:	2364      	movs	r3, #100	; 0x64
 8002ee0:	9302      	str	r3, [sp, #8]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	f107 030e 	add.w	r3, r7, #14
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2301      	movs	r3, #1
 8002eee:	221b      	movs	r2, #27
 8002ef0:	21d0      	movs	r1, #208	; 0xd0
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fbbc 	bl	8001670 <HAL_I2C_Mem_Write>
        return 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e000      	b.n	8002efe <MPU6050_Init+0xa6>
    }
    return 1;
 8002efc:	2301      	movs	r3, #1
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b094      	sub	sp, #80	; 0x50
 8002f0e:	af04      	add	r7, sp, #16
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002f14:	2364      	movs	r3, #100	; 0x64
 8002f16:	9302      	str	r3, [sp, #8]
 8002f18:	230e      	movs	r3, #14
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	f107 0308 	add.w	r3, r7, #8
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2301      	movs	r3, #1
 8002f24:	223b      	movs	r2, #59	; 0x3b
 8002f26:	21d0      	movs	r1, #208	; 0xd0
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7fe fc9b 	bl	8001864 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002f2e:	7a3b      	ldrb	r3, [r7, #8]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	7a7b      	ldrb	r3, [r7, #9]
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b21a      	sxth	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002f40:	7abb      	ldrb	r3, [r7, #10]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	b21a      	sxth	r2, r3
 8002f46:	7afb      	ldrb	r3, [r7, #11]
 8002f48:	b21b      	sxth	r3, r3
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	b21a      	sxth	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002f52:	7b3b      	ldrb	r3, [r7, #12]
 8002f54:	021b      	lsls	r3, r3, #8
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	7b7b      	ldrb	r3, [r7, #13]
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8002f64:	7bbb      	ldrb	r3, [r7, #14]
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	b21a      	sxth	r2, r3
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002f72:	7c3b      	ldrb	r3, [r7, #16]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	7c7b      	ldrb	r3, [r7, #17]
 8002f7a:	b21b      	sxth	r3, r3
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	b21a      	sxth	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8002f84:	7cbb      	ldrb	r3, [r7, #18]
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	b21a      	sxth	r2, r3
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	b21b      	sxth	r3, r3
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	b21a      	sxth	r2, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8002f96:	7d3b      	ldrb	r3, [r7, #20]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	b21a      	sxth	r2, r3
 8002f9c:	7d7b      	ldrb	r3, [r7, #21]
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fa5c 	bl	800046c <__aeabi_i2d>
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	4bbd      	ldr	r3, [pc, #756]	; (80032b0 <MPU6050_Read_All+0x3a8>)
 8002fba:	f7fd fbe7 	bl	800078c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fa4c 	bl	800046c <__aeabi_i2d>
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4bb5      	ldr	r3, [pc, #724]	; (80032b0 <MPU6050_Read_All+0x3a8>)
 8002fda:	f7fd fbd7 	bl	800078c <__aeabi_ddiv>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fa3c 	bl	800046c <__aeabi_i2d>
 8002ff4:	a3a8      	add	r3, pc, #672	; (adr r3, 8003298 <MPU6050_Read_All+0x390>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd fbc7 	bl	800078c <__aeabi_ddiv>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8003008:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003014:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80032b4 <MPU6050_Read_All+0x3ac>
 8003018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800301c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80032b8 <MPU6050_Read_All+0x3b0>
 8003020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa1b 	bl	800046c <__aeabi_i2d>
 8003036:	a39a      	add	r3, pc, #616	; (adr r3, 80032a0 <MPU6050_Read_All+0x398>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fba6 	bl	800078c <__aeabi_ddiv>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003050:	4618      	mov	r0, r3
 8003052:	f7fd fa0b 	bl	800046c <__aeabi_i2d>
 8003056:	a392      	add	r3, pc, #584	; (adr r3, 80032a0 <MPU6050_Read_All+0x398>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd fb96 	bl	800078c <__aeabi_ddiv>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	6839      	ldr	r1, [r7, #0]
 8003066:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd f9fb 	bl	800046c <__aeabi_i2d>
 8003076:	a38a      	add	r3, pc, #552	; (adr r3, 80032a0 <MPU6050_Read_All+0x398>)
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f7fd fb86 	bl	800078c <__aeabi_ddiv>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800308a:	f7fd fef3 	bl	8000e74 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	4b8a      	ldr	r3, [pc, #552]	; (80032bc <MPU6050_Read_All+0x3b4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd f9d8 	bl	800044c <__aeabi_ui2d>
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	4b87      	ldr	r3, [pc, #540]	; (80032c0 <MPU6050_Read_All+0x3b8>)
 80030a2:	f7fd fb73 	bl	800078c <__aeabi_ddiv>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80030ae:	f7fd fee1 	bl	8000e74 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b81      	ldr	r3, [pc, #516]	; (80032bc <MPU6050_Read_All+0x3b4>)
 80030b6:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030be:	461a      	mov	r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c6:	fb03 f202 	mul.w	r2, r3, r2
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d0:	4619      	mov	r1, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d8:	fb03 f301 	mul.w	r3, r3, r1
 80030dc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f9c4 	bl	800046c <__aeabi_i2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	ec43 2b10 	vmov	d0, r2, r3
 80030ec:	f000 fcc6 	bl	8003a7c <sqrt>
 80030f0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003100:	f7fd fc82 	bl	8000a08 <__aeabi_dcmpeq>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11f      	bne.n	800314a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f9ab 	bl	800046c <__aeabi_i2d>
 8003116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800311a:	f7fd fb37 	bl	800078c <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	ec43 2b17 	vmov	d7, r2, r3
 8003126:	eeb0 0a47 	vmov.f32	s0, s14
 800312a:	eef0 0a67 	vmov.f32	s1, s15
 800312e:	f000 faf3 	bl	8003718 <atan>
 8003132:	ec51 0b10 	vmov	r0, r1, d0
 8003136:	a35c      	add	r3, pc, #368	; (adr r3, 80032a8 <MPU6050_Read_All+0x3a0>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f7fd f9fc 	bl	8000538 <__aeabi_dmul>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003148:	e005      	b.n	8003156 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800315c:	425b      	negs	r3, r3
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f984 	bl	800046c <__aeabi_i2d>
 8003164:	4682      	mov	sl, r0
 8003166:	468b      	mov	fp, r1
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f97c 	bl	800046c <__aeabi_i2d>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	ec43 2b11 	vmov	d1, r2, r3
 800317c:	ec4b ab10 	vmov	d0, sl, fp
 8003180:	f000 fc79 	bl	8003a76 <atan2>
 8003184:	ec51 0b10 	vmov	r0, r1, d0
 8003188:	a347      	add	r3, pc, #284	; (adr r3, 80032a8 <MPU6050_Read_All+0x3a0>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd f9d3 	bl	8000538 <__aeabi_dmul>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <MPU6050_Read_All+0x3bc>)
 80031a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031a4:	f7fd fc3a 	bl	8000a1c <__aeabi_dcmplt>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <MPU6050_Read_All+0x2bc>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	4b43      	ldr	r3, [pc, #268]	; (80032c8 <MPU6050_Read_All+0x3c0>)
 80031ba:	f7fd fc4d 	bl	8000a58 <__aeabi_dcmpgt>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d114      	bne.n	80031ee <MPU6050_Read_All+0x2e6>
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <MPU6050_Read_All+0x3c0>)
 80031ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031ce:	f7fd fc43 	bl	8000a58 <__aeabi_dcmpgt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <MPU6050_Read_All+0x2fc>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <MPU6050_Read_All+0x3bc>)
 80031e4:	f7fd fc1a 	bl	8000a1c <__aeabi_dcmplt>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80031ee:	4937      	ldr	r1, [pc, #220]	; (80032cc <MPU6050_Read_All+0x3c4>)
 80031f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80031f8:	6839      	ldr	r1, [r7, #0]
 80031fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003202:	e014      	b.n	800322e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800320a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800320e:	eeb0 1a47 	vmov.f32	s2, s14
 8003212:	eef0 1a67 	vmov.f32	s3, s15
 8003216:	ed97 0b06 	vldr	d0, [r7, #24]
 800321a:	482c      	ldr	r0, [pc, #176]	; (80032cc <MPU6050_Read_All+0x3c4>)
 800321c:	f000 f85a 	bl	80032d4 <Kalman_getAngle>
 8003220:	eeb0 7a40 	vmov.f32	s14, s0
 8003224:	eef0 7a60 	vmov.f32	s15, s1
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003234:	4690      	mov	r8, r2
 8003236:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <MPU6050_Read_All+0x3c0>)
 8003240:	4640      	mov	r0, r8
 8003242:	4649      	mov	r1, r9
 8003244:	f7fd fc08 	bl	8000a58 <__aeabi_dcmpgt>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003254:	4614      	mov	r4, r2
 8003256:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003266:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800326a:	eeb0 1a47 	vmov.f32	s2, s14
 800326e:	eef0 1a67 	vmov.f32	s3, s15
 8003272:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003276:	4816      	ldr	r0, [pc, #88]	; (80032d0 <MPU6050_Read_All+0x3c8>)
 8003278:	f000 f82c 	bl	80032d4 <Kalman_getAngle>
 800327c:	eeb0 7a40 	vmov.f32	s14, s0
 8003280:	eef0 7a60 	vmov.f32	s15, s1
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 800328a:	bf00      	nop
 800328c:	3740      	adds	r7, #64	; 0x40
 800328e:	46bd      	mov	sp, r7
 8003290:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003294:	f3af 8000 	nop.w
 8003298:	00000000 	.word	0x00000000
 800329c:	40cc2900 	.word	0x40cc2900
 80032a0:	00000000 	.word	0x00000000
 80032a4:	40606000 	.word	0x40606000
 80032a8:	1a63c1f8 	.word	0x1a63c1f8
 80032ac:	404ca5dc 	.word	0x404ca5dc
 80032b0:	40d00000 	.word	0x40d00000
 80032b4:	43aa0000 	.word	0x43aa0000
 80032b8:	42121eb8 	.word	0x42121eb8
 80032bc:	200001e8 	.word	0x200001e8
 80032c0:	408f4000 	.word	0x408f4000
 80032c4:	c0568000 	.word	0xc0568000
 80032c8:	40568000 	.word	0x40568000
 80032cc:	20000050 	.word	0x20000050
 80032d0:	20000008 	.word	0x20000008

080032d4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80032d4:	b5b0      	push	{r4, r5, r7, lr}
 80032d6:	b096      	sub	sp, #88	; 0x58
 80032d8:	af00      	add	r7, sp, #0
 80032da:	61f8      	str	r0, [r7, #28]
 80032dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80032e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80032e4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4623      	mov	r3, r4
 80032f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032f6:	f7fc ff6b 	bl	80001d0 <__aeabi_dsub>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800330c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003310:	f7fd f912 	bl	8000538 <__aeabi_dmul>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4620      	mov	r0, r4
 800331a:	4629      	mov	r1, r5
 800331c:	f7fc ff5a 	bl	80001d4 <__adddf3>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800333a:	f7fd f8fd 	bl	8000538 <__aeabi_dmul>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4610      	mov	r0, r2
 8003344:	4619      	mov	r1, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800334c:	f7fc ff40 	bl	80001d0 <__aeabi_dsub>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800335e:	f7fc ff37 	bl	80001d0 <__aeabi_dsub>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	f7fc ff30 	bl	80001d4 <__adddf3>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003380:	f7fd f8da 	bl	8000538 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff22 	bl	80001d4 <__adddf3>
 8003390:	4603      	mov	r3, r0
 8003392:	460c      	mov	r4, r1
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033aa:	f7fd f8c5 	bl	8000538 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fc ff0b 	bl	80001d0 <__aeabi_dsub>
 80033ba:	4603      	mov	r3, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80033d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d4:	f7fd f8b0 	bl	8000538 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4620      	mov	r0, r4
 80033de:	4629      	mov	r1, r5
 80033e0:	f7fc fef6 	bl	80001d0 <__aeabi_dsub>
 80033e4:	4603      	mov	r3, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	f7fd f89b 	bl	8000538 <__aeabi_dmul>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f7fc fee3 	bl	80001d4 <__adddf3>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003424:	461a      	mov	r2, r3
 8003426:	4623      	mov	r3, r4
 8003428:	f7fc fed4 	bl	80001d4 <__adddf3>
 800342c:	4603      	mov	r3, r0
 800342e:	460c      	mov	r4, r1
 8003430:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800343a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800343e:	f7fd f9a5 	bl	800078c <__aeabi_ddiv>
 8003442:	4603      	mov	r3, r0
 8003444:	460c      	mov	r4, r1
 8003446:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003454:	f7fd f99a 	bl	800078c <__aeabi_ddiv>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003466:	461a      	mov	r2, r3
 8003468:	4623      	mov	r3, r4
 800346a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800346e:	f7fc feaf 	bl	80001d0 <__aeabi_dsub>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003480:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003484:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003488:	f7fd f856 	bl	8000538 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4620      	mov	r0, r4
 8003492:	4629      	mov	r1, r5
 8003494:	f7fc fe9e 	bl	80001d4 <__adddf3>
 8003498:	4603      	mov	r3, r0
 800349a:	460c      	mov	r4, r1
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80034a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034b0:	f7fd f842 	bl	8000538 <__aeabi_dmul>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7fc fe8a 	bl	80001d4 <__adddf3>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80034d0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80034da:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80034e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80034e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034ec:	f7fd f824 	bl	8000538 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4620      	mov	r0, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	f7fc fe6a 	bl	80001d0 <__aeabi_dsub>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800350c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003510:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003514:	f7fd f810 	bl	8000538 <__aeabi_dmul>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f7fc fe56 	bl	80001d0 <__aeabi_dsub>
 8003524:	4603      	mov	r3, r0
 8003526:	460c      	mov	r4, r1
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003534:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800353c:	f7fc fffc 	bl	8000538 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4620      	mov	r0, r4
 8003546:	4629      	mov	r1, r5
 8003548:	f7fc fe42 	bl	80001d0 <__aeabi_dsub>
 800354c:	4603      	mov	r3, r0
 800354e:	460c      	mov	r4, r1
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800355c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003560:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003564:	f7fc ffe8 	bl	8000538 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fe2e 	bl	80001d0 <__aeabi_dsub>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003584:	ec44 3b17 	vmov	d7, r3, r4
};
 8003588:	eeb0 0a47 	vmov.f32	s0, s14
 800358c:	eef0 0a67 	vmov.f32	s1, s15
 8003590:	3758      	adds	r7, #88	; 0x58
 8003592:	46bd      	mov	sp, r7
 8003594:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	4a10      	ldr	r2, [pc, #64]	; (80035e4 <HAL_MspInit+0x4c>)
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <HAL_MspInit+0x4c>)
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ac:	6453      	str	r3, [r2, #68]	; 0x44
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <HAL_MspInit+0x4c>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b6:	607b      	str	r3, [r7, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_MspInit+0x4c>)
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_MspInit+0x4c>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_MspInit+0x4c>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800

080035e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <NMI_Handler+0x4>

080035ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <HardFault_Handler+0x4>

080035f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <MemManage_Handler+0x4>

080035fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035fe:	e7fe      	b.n	80035fe <BusFault_Handler+0x4>

08003600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003604:	e7fe      	b.n	8003604 <UsageFault_Handler+0x4>

08003606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003634:	f7fd fc0a 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}

0800363c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003640:	4a06      	ldr	r2, [pc, #24]	; (800365c <SystemInit+0x20>)
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <SystemInit+0x20>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800364c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003698 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003664:	480d      	ldr	r0, [pc, #52]	; (800369c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003666:	490e      	ldr	r1, [pc, #56]	; (80036a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800366c:	e002      	b.n	8003674 <LoopCopyDataInit>

0800366e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800366e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003672:	3304      	adds	r3, #4

08003674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003678:	d3f9      	bcc.n	800366e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800367c:	4c0b      	ldr	r4, [pc, #44]	; (80036ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800367e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003680:	e001      	b.n	8003686 <LoopFillZerobss>

08003682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003684:	3204      	adds	r2, #4

08003686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003688:	d3fb      	bcc.n	8003682 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800368a:	f7ff ffd7 	bl	800363c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800368e:	f000 f817 	bl	80036c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003692:	f7ff fb55 	bl	8002d40 <main>
  bx  lr    
 8003696:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003698:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800369c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80036a4:	08003ed0 	.word	0x08003ed0
  ldr r2, =_sbss
 80036a8:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80036ac:	200001ec 	.word	0x200001ec

080036b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <ADC_IRQHandler>
	...

080036b4 <__errno>:
 80036b4:	4b01      	ldr	r3, [pc, #4]	; (80036bc <__errno+0x8>)
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	2000009c 	.word	0x2000009c

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	4e0d      	ldr	r6, [pc, #52]	; (80036f8 <__libc_init_array+0x38>)
 80036c4:	4c0d      	ldr	r4, [pc, #52]	; (80036fc <__libc_init_array+0x3c>)
 80036c6:	1ba4      	subs	r4, r4, r6
 80036c8:	10a4      	asrs	r4, r4, #2
 80036ca:	2500      	movs	r5, #0
 80036cc:	42a5      	cmp	r5, r4
 80036ce:	d109      	bne.n	80036e4 <__libc_init_array+0x24>
 80036d0:	4e0b      	ldr	r6, [pc, #44]	; (8003700 <__libc_init_array+0x40>)
 80036d2:	4c0c      	ldr	r4, [pc, #48]	; (8003704 <__libc_init_array+0x44>)
 80036d4:	f000 fbb8 	bl	8003e48 <_init>
 80036d8:	1ba4      	subs	r4, r4, r6
 80036da:	10a4      	asrs	r4, r4, #2
 80036dc:	2500      	movs	r5, #0
 80036de:	42a5      	cmp	r5, r4
 80036e0:	d105      	bne.n	80036ee <__libc_init_array+0x2e>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036e8:	4798      	blx	r3
 80036ea:	3501      	adds	r5, #1
 80036ec:	e7ee      	b.n	80036cc <__libc_init_array+0xc>
 80036ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036f2:	4798      	blx	r3
 80036f4:	3501      	adds	r5, #1
 80036f6:	e7f2      	b.n	80036de <__libc_init_array+0x1e>
 80036f8:	08003ec8 	.word	0x08003ec8
 80036fc:	08003ec8 	.word	0x08003ec8
 8003700:	08003ec8 	.word	0x08003ec8
 8003704:	08003ecc 	.word	0x08003ecc

08003708 <memset>:
 8003708:	4402      	add	r2, r0
 800370a:	4603      	mov	r3, r0
 800370c:	4293      	cmp	r3, r2
 800370e:	d100      	bne.n	8003712 <memset+0xa>
 8003710:	4770      	bx	lr
 8003712:	f803 1b01 	strb.w	r1, [r3], #1
 8003716:	e7f9      	b.n	800370c <memset+0x4>

08003718 <atan>:
 8003718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	ec55 4b10 	vmov	r4, r5, d0
 8003720:	4bc7      	ldr	r3, [pc, #796]	; (8003a40 <atan+0x328>)
 8003722:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003726:	429e      	cmp	r6, r3
 8003728:	46ab      	mov	fp, r5
 800372a:	dd18      	ble.n	800375e <atan+0x46>
 800372c:	4ac5      	ldr	r2, [pc, #788]	; (8003a44 <atan+0x32c>)
 800372e:	4296      	cmp	r6, r2
 8003730:	dc01      	bgt.n	8003736 <atan+0x1e>
 8003732:	d109      	bne.n	8003748 <atan+0x30>
 8003734:	b144      	cbz	r4, 8003748 <atan+0x30>
 8003736:	4622      	mov	r2, r4
 8003738:	462b      	mov	r3, r5
 800373a:	4620      	mov	r0, r4
 800373c:	4629      	mov	r1, r5
 800373e:	f7fc fd49 	bl	80001d4 <__adddf3>
 8003742:	4604      	mov	r4, r0
 8003744:	460d      	mov	r5, r1
 8003746:	e006      	b.n	8003756 <atan+0x3e>
 8003748:	f1bb 0f00 	cmp.w	fp, #0
 800374c:	f300 813a 	bgt.w	80039c4 <atan+0x2ac>
 8003750:	a59f      	add	r5, pc, #636	; (adr r5, 80039d0 <atan+0x2b8>)
 8003752:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003756:	ec45 4b10 	vmov	d0, r4, r5
 800375a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375e:	4bba      	ldr	r3, [pc, #744]	; (8003a48 <atan+0x330>)
 8003760:	429e      	cmp	r6, r3
 8003762:	dc14      	bgt.n	800378e <atan+0x76>
 8003764:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003768:	429e      	cmp	r6, r3
 800376a:	dc0d      	bgt.n	8003788 <atan+0x70>
 800376c:	a39a      	add	r3, pc, #616	; (adr r3, 80039d8 <atan+0x2c0>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	ee10 0a10 	vmov	r0, s0
 8003776:	4629      	mov	r1, r5
 8003778:	f7fc fd2c 	bl	80001d4 <__adddf3>
 800377c:	2200      	movs	r2, #0
 800377e:	4bb3      	ldr	r3, [pc, #716]	; (8003a4c <atan+0x334>)
 8003780:	f7fd f96a 	bl	8000a58 <__aeabi_dcmpgt>
 8003784:	2800      	cmp	r0, #0
 8003786:	d1e6      	bne.n	8003756 <atan+0x3e>
 8003788:	f04f 3aff 	mov.w	sl, #4294967295
 800378c:	e02b      	b.n	80037e6 <atan+0xce>
 800378e:	f000 f96b 	bl	8003a68 <fabs>
 8003792:	4baf      	ldr	r3, [pc, #700]	; (8003a50 <atan+0x338>)
 8003794:	429e      	cmp	r6, r3
 8003796:	ec55 4b10 	vmov	r4, r5, d0
 800379a:	f300 80bf 	bgt.w	800391c <atan+0x204>
 800379e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80037a2:	429e      	cmp	r6, r3
 80037a4:	f300 80a0 	bgt.w	80038e8 <atan+0x1d0>
 80037a8:	ee10 2a10 	vmov	r2, s0
 80037ac:	ee10 0a10 	vmov	r0, s0
 80037b0:	462b      	mov	r3, r5
 80037b2:	4629      	mov	r1, r5
 80037b4:	f7fc fd0e 	bl	80001d4 <__adddf3>
 80037b8:	2200      	movs	r2, #0
 80037ba:	4ba4      	ldr	r3, [pc, #656]	; (8003a4c <atan+0x334>)
 80037bc:	f7fc fd08 	bl	80001d0 <__aeabi_dsub>
 80037c0:	2200      	movs	r2, #0
 80037c2:	4606      	mov	r6, r0
 80037c4:	460f      	mov	r7, r1
 80037c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037ca:	4620      	mov	r0, r4
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7fc fd01 	bl	80001d4 <__adddf3>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4630      	mov	r0, r6
 80037d8:	4639      	mov	r1, r7
 80037da:	f7fc ffd7 	bl	800078c <__aeabi_ddiv>
 80037de:	f04f 0a00 	mov.w	sl, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	460d      	mov	r5, r1
 80037e6:	4622      	mov	r2, r4
 80037e8:	462b      	mov	r3, r5
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	f7fc fea3 	bl	8000538 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4680      	mov	r8, r0
 80037f8:	4689      	mov	r9, r1
 80037fa:	f7fc fe9d 	bl	8000538 <__aeabi_dmul>
 80037fe:	a378      	add	r3, pc, #480	; (adr r3, 80039e0 <atan+0x2c8>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	4606      	mov	r6, r0
 8003806:	460f      	mov	r7, r1
 8003808:	f7fc fe96 	bl	8000538 <__aeabi_dmul>
 800380c:	a376      	add	r3, pc, #472	; (adr r3, 80039e8 <atan+0x2d0>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc fcdf 	bl	80001d4 <__adddf3>
 8003816:	4632      	mov	r2, r6
 8003818:	463b      	mov	r3, r7
 800381a:	f7fc fe8d 	bl	8000538 <__aeabi_dmul>
 800381e:	a374      	add	r3, pc, #464	; (adr r3, 80039f0 <atan+0x2d8>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc fcd6 	bl	80001d4 <__adddf3>
 8003828:	4632      	mov	r2, r6
 800382a:	463b      	mov	r3, r7
 800382c:	f7fc fe84 	bl	8000538 <__aeabi_dmul>
 8003830:	a371      	add	r3, pc, #452	; (adr r3, 80039f8 <atan+0x2e0>)
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f7fc fccd 	bl	80001d4 <__adddf3>
 800383a:	4632      	mov	r2, r6
 800383c:	463b      	mov	r3, r7
 800383e:	f7fc fe7b 	bl	8000538 <__aeabi_dmul>
 8003842:	a36f      	add	r3, pc, #444	; (adr r3, 8003a00 <atan+0x2e8>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fcc4 	bl	80001d4 <__adddf3>
 800384c:	4632      	mov	r2, r6
 800384e:	463b      	mov	r3, r7
 8003850:	f7fc fe72 	bl	8000538 <__aeabi_dmul>
 8003854:	a36c      	add	r3, pc, #432	; (adr r3, 8003a08 <atan+0x2f0>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f7fc fcbb 	bl	80001d4 <__adddf3>
 800385e:	4642      	mov	r2, r8
 8003860:	464b      	mov	r3, r9
 8003862:	f7fc fe69 	bl	8000538 <__aeabi_dmul>
 8003866:	a36a      	add	r3, pc, #424	; (adr r3, 8003a10 <atan+0x2f8>)
 8003868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386c:	4680      	mov	r8, r0
 800386e:	4689      	mov	r9, r1
 8003870:	4630      	mov	r0, r6
 8003872:	4639      	mov	r1, r7
 8003874:	f7fc fe60 	bl	8000538 <__aeabi_dmul>
 8003878:	a367      	add	r3, pc, #412	; (adr r3, 8003a18 <atan+0x300>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc fca7 	bl	80001d0 <__aeabi_dsub>
 8003882:	4632      	mov	r2, r6
 8003884:	463b      	mov	r3, r7
 8003886:	f7fc fe57 	bl	8000538 <__aeabi_dmul>
 800388a:	a365      	add	r3, pc, #404	; (adr r3, 8003a20 <atan+0x308>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f7fc fc9e 	bl	80001d0 <__aeabi_dsub>
 8003894:	4632      	mov	r2, r6
 8003896:	463b      	mov	r3, r7
 8003898:	f7fc fe4e 	bl	8000538 <__aeabi_dmul>
 800389c:	a362      	add	r3, pc, #392	; (adr r3, 8003a28 <atan+0x310>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc fc95 	bl	80001d0 <__aeabi_dsub>
 80038a6:	4632      	mov	r2, r6
 80038a8:	463b      	mov	r3, r7
 80038aa:	f7fc fe45 	bl	8000538 <__aeabi_dmul>
 80038ae:	a360      	add	r3, pc, #384	; (adr r3, 8003a30 <atan+0x318>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f7fc fc8c 	bl	80001d0 <__aeabi_dsub>
 80038b8:	4632      	mov	r2, r6
 80038ba:	463b      	mov	r3, r7
 80038bc:	f7fc fe3c 	bl	8000538 <__aeabi_dmul>
 80038c0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	d155      	bne.n	8003976 <atan+0x25e>
 80038ca:	4640      	mov	r0, r8
 80038cc:	4649      	mov	r1, r9
 80038ce:	f7fc fc81 	bl	80001d4 <__adddf3>
 80038d2:	4622      	mov	r2, r4
 80038d4:	462b      	mov	r3, r5
 80038d6:	f7fc fe2f 	bl	8000538 <__aeabi_dmul>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4620      	mov	r0, r4
 80038e0:	4629      	mov	r1, r5
 80038e2:	f7fc fc75 	bl	80001d0 <__aeabi_dsub>
 80038e6:	e72c      	b.n	8003742 <atan+0x2a>
 80038e8:	ee10 0a10 	vmov	r0, s0
 80038ec:	2200      	movs	r2, #0
 80038ee:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <atan+0x334>)
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7fc fc6d 	bl	80001d0 <__aeabi_dsub>
 80038f6:	2200      	movs	r2, #0
 80038f8:	4606      	mov	r6, r0
 80038fa:	460f      	mov	r7, r1
 80038fc:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <atan+0x334>)
 80038fe:	4620      	mov	r0, r4
 8003900:	4629      	mov	r1, r5
 8003902:	f7fc fc67 	bl	80001d4 <__adddf3>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4630      	mov	r0, r6
 800390c:	4639      	mov	r1, r7
 800390e:	f7fc ff3d 	bl	800078c <__aeabi_ddiv>
 8003912:	f04f 0a01 	mov.w	sl, #1
 8003916:	4604      	mov	r4, r0
 8003918:	460d      	mov	r5, r1
 800391a:	e764      	b.n	80037e6 <atan+0xce>
 800391c:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <atan+0x33c>)
 800391e:	429e      	cmp	r6, r3
 8003920:	dc1d      	bgt.n	800395e <atan+0x246>
 8003922:	ee10 0a10 	vmov	r0, s0
 8003926:	2200      	movs	r2, #0
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <atan+0x340>)
 800392a:	4629      	mov	r1, r5
 800392c:	f7fc fc50 	bl	80001d0 <__aeabi_dsub>
 8003930:	2200      	movs	r2, #0
 8003932:	4606      	mov	r6, r0
 8003934:	460f      	mov	r7, r1
 8003936:	4b48      	ldr	r3, [pc, #288]	; (8003a58 <atan+0x340>)
 8003938:	4620      	mov	r0, r4
 800393a:	4629      	mov	r1, r5
 800393c:	f7fc fdfc 	bl	8000538 <__aeabi_dmul>
 8003940:	2200      	movs	r2, #0
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <atan+0x334>)
 8003944:	f7fc fc46 	bl	80001d4 <__adddf3>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4630      	mov	r0, r6
 800394e:	4639      	mov	r1, r7
 8003950:	f7fc ff1c 	bl	800078c <__aeabi_ddiv>
 8003954:	f04f 0a02 	mov.w	sl, #2
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
 800395c:	e743      	b.n	80037e6 <atan+0xce>
 800395e:	462b      	mov	r3, r5
 8003960:	ee10 2a10 	vmov	r2, s0
 8003964:	2000      	movs	r0, #0
 8003966:	493d      	ldr	r1, [pc, #244]	; (8003a5c <atan+0x344>)
 8003968:	f7fc ff10 	bl	800078c <__aeabi_ddiv>
 800396c:	f04f 0a03 	mov.w	sl, #3
 8003970:	4604      	mov	r4, r0
 8003972:	460d      	mov	r5, r1
 8003974:	e737      	b.n	80037e6 <atan+0xce>
 8003976:	4640      	mov	r0, r8
 8003978:	4649      	mov	r1, r9
 800397a:	f7fc fc2b 	bl	80001d4 <__adddf3>
 800397e:	4622      	mov	r2, r4
 8003980:	462b      	mov	r3, r5
 8003982:	f7fc fdd9 	bl	8000538 <__aeabi_dmul>
 8003986:	4e36      	ldr	r6, [pc, #216]	; (8003a60 <atan+0x348>)
 8003988:	4b36      	ldr	r3, [pc, #216]	; (8003a64 <atan+0x34c>)
 800398a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800398e:	4456      	add	r6, sl
 8003990:	449a      	add	sl, r3
 8003992:	e9da 2300 	ldrd	r2, r3, [sl]
 8003996:	f7fc fc1b 	bl	80001d0 <__aeabi_dsub>
 800399a:	4622      	mov	r2, r4
 800399c:	462b      	mov	r3, r5
 800399e:	f7fc fc17 	bl	80001d0 <__aeabi_dsub>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80039aa:	f7fc fc11 	bl	80001d0 <__aeabi_dsub>
 80039ae:	f1bb 0f00 	cmp.w	fp, #0
 80039b2:	4604      	mov	r4, r0
 80039b4:	460d      	mov	r5, r1
 80039b6:	f6bf aece 	bge.w	8003756 <atan+0x3e>
 80039ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039be:	4604      	mov	r4, r0
 80039c0:	461d      	mov	r5, r3
 80039c2:	e6c8      	b.n	8003756 <atan+0x3e>
 80039c4:	a51c      	add	r5, pc, #112	; (adr r5, 8003a38 <atan+0x320>)
 80039c6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80039ca:	e6c4      	b.n	8003756 <atan+0x3e>
 80039cc:	f3af 8000 	nop.w
 80039d0:	54442d18 	.word	0x54442d18
 80039d4:	bff921fb 	.word	0xbff921fb
 80039d8:	8800759c 	.word	0x8800759c
 80039dc:	7e37e43c 	.word	0x7e37e43c
 80039e0:	e322da11 	.word	0xe322da11
 80039e4:	3f90ad3a 	.word	0x3f90ad3a
 80039e8:	24760deb 	.word	0x24760deb
 80039ec:	3fa97b4b 	.word	0x3fa97b4b
 80039f0:	a0d03d51 	.word	0xa0d03d51
 80039f4:	3fb10d66 	.word	0x3fb10d66
 80039f8:	c54c206e 	.word	0xc54c206e
 80039fc:	3fb745cd 	.word	0x3fb745cd
 8003a00:	920083ff 	.word	0x920083ff
 8003a04:	3fc24924 	.word	0x3fc24924
 8003a08:	5555550d 	.word	0x5555550d
 8003a0c:	3fd55555 	.word	0x3fd55555
 8003a10:	2c6a6c2f 	.word	0x2c6a6c2f
 8003a14:	bfa2b444 	.word	0xbfa2b444
 8003a18:	52defd9a 	.word	0x52defd9a
 8003a1c:	3fadde2d 	.word	0x3fadde2d
 8003a20:	af749a6d 	.word	0xaf749a6d
 8003a24:	3fb3b0f2 	.word	0x3fb3b0f2
 8003a28:	fe231671 	.word	0xfe231671
 8003a2c:	3fbc71c6 	.word	0x3fbc71c6
 8003a30:	9998ebc4 	.word	0x9998ebc4
 8003a34:	3fc99999 	.word	0x3fc99999
 8003a38:	54442d18 	.word	0x54442d18
 8003a3c:	3ff921fb 	.word	0x3ff921fb
 8003a40:	440fffff 	.word	0x440fffff
 8003a44:	7ff00000 	.word	0x7ff00000
 8003a48:	3fdbffff 	.word	0x3fdbffff
 8003a4c:	3ff00000 	.word	0x3ff00000
 8003a50:	3ff2ffff 	.word	0x3ff2ffff
 8003a54:	40037fff 	.word	0x40037fff
 8003a58:	3ff80000 	.word	0x3ff80000
 8003a5c:	bff00000 	.word	0xbff00000
 8003a60:	08003e78 	.word	0x08003e78
 8003a64:	08003e98 	.word	0x08003e98

08003a68 <fabs>:
 8003a68:	ec53 2b10 	vmov	r2, r3, d0
 8003a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a70:	ec43 2b10 	vmov	d0, r2, r3
 8003a74:	4770      	bx	lr

08003a76 <atan2>:
 8003a76:	f000 b85b 	b.w	8003b30 <__ieee754_atan2>
	...

08003a7c <sqrt>:
 8003a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a80:	ed2d 8b02 	vpush	{d8}
 8003a84:	b08b      	sub	sp, #44	; 0x2c
 8003a86:	ec55 4b10 	vmov	r4, r5, d0
 8003a8a:	f000 f92b 	bl	8003ce4 <__ieee754_sqrt>
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <sqrt+0xac>)
 8003a90:	eeb0 8a40 	vmov.f32	s16, s0
 8003a94:	eef0 8a60 	vmov.f32	s17, s1
 8003a98:	f993 6000 	ldrsb.w	r6, [r3]
 8003a9c:	1c73      	adds	r3, r6, #1
 8003a9e:	d02a      	beq.n	8003af6 <sqrt+0x7a>
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fc ffe0 	bl	8000a6c <__aeabi_dcmpun>
 8003aac:	4607      	mov	r7, r0
 8003aae:	bb10      	cbnz	r0, 8003af6 <sqrt+0x7a>
 8003ab0:	f04f 0800 	mov.w	r8, #0
 8003ab4:	f04f 0900 	mov.w	r9, #0
 8003ab8:	4642      	mov	r2, r8
 8003aba:	464b      	mov	r3, r9
 8003abc:	4620      	mov	r0, r4
 8003abe:	4629      	mov	r1, r5
 8003ac0:	f7fc ffac 	bl	8000a1c <__aeabi_dcmplt>
 8003ac4:	b1b8      	cbz	r0, 8003af6 <sqrt+0x7a>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <sqrt+0xb0>)
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	9708      	str	r7, [sp, #32]
 8003ad0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003ad4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003ad8:	b9b6      	cbnz	r6, 8003b08 <sqrt+0x8c>
 8003ada:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003ade:	4668      	mov	r0, sp
 8003ae0:	f000 f9b0 	bl	8003e44 <matherr>
 8003ae4:	b1d0      	cbz	r0, 8003b1c <sqrt+0xa0>
 8003ae6:	9b08      	ldr	r3, [sp, #32]
 8003ae8:	b11b      	cbz	r3, 8003af2 <sqrt+0x76>
 8003aea:	f7ff fde3 	bl	80036b4 <__errno>
 8003aee:	9b08      	ldr	r3, [sp, #32]
 8003af0:	6003      	str	r3, [r0, #0]
 8003af2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8003af6:	eeb0 0a48 	vmov.f32	s0, s16
 8003afa:	eef0 0a68 	vmov.f32	s1, s17
 8003afe:	b00b      	add	sp, #44	; 0x2c
 8003b00:	ecbd 8b02 	vpop	{d8}
 8003b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b08:	4642      	mov	r2, r8
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	4640      	mov	r0, r8
 8003b0e:	4649      	mov	r1, r9
 8003b10:	f7fc fe3c 	bl	800078c <__aeabi_ddiv>
 8003b14:	2e02      	cmp	r6, #2
 8003b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b1a:	d1e0      	bne.n	8003ade <sqrt+0x62>
 8003b1c:	f7ff fdca 	bl	80036b4 <__errno>
 8003b20:	2321      	movs	r3, #33	; 0x21
 8003b22:	6003      	str	r3, [r0, #0]
 8003b24:	e7df      	b.n	8003ae6 <sqrt+0x6a>
 8003b26:	bf00      	nop
 8003b28:	20000100 	.word	0x20000100
 8003b2c:	08003eb8 	.word	0x08003eb8

08003b30 <__ieee754_atan2>:
 8003b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b34:	ec57 6b11 	vmov	r6, r7, d1
 8003b38:	4273      	negs	r3, r6
 8003b3a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8003b3e:	4333      	orrs	r3, r6
 8003b40:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8003ce0 <__ieee754_atan2+0x1b0>
 8003b44:	ec51 0b10 	vmov	r0, r1, d0
 8003b48:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003b4c:	4563      	cmp	r3, ip
 8003b4e:	ee11 8a10 	vmov	r8, s2
 8003b52:	ee10 9a10 	vmov	r9, s0
 8003b56:	468e      	mov	lr, r1
 8003b58:	d807      	bhi.n	8003b6a <__ieee754_atan2+0x3a>
 8003b5a:	4244      	negs	r4, r0
 8003b5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003b60:	4304      	orrs	r4, r0
 8003b62:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8003b66:	4564      	cmp	r4, ip
 8003b68:	d907      	bls.n	8003b7a <__ieee754_atan2+0x4a>
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	f7fc fb31 	bl	80001d4 <__adddf3>
 8003b72:	ec41 0b10 	vmov	d0, r0, r1
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8003b7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003b82:	4334      	orrs	r4, r6
 8003b84:	d103      	bne.n	8003b8e <__ieee754_atan2+0x5e>
 8003b86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b8a:	f7ff bdc5 	b.w	8003718 <atan>
 8003b8e:	17bc      	asrs	r4, r7, #30
 8003b90:	f004 0402 	and.w	r4, r4, #2
 8003b94:	ea59 0903 	orrs.w	r9, r9, r3
 8003b98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8003b9c:	d107      	bne.n	8003bae <__ieee754_atan2+0x7e>
 8003b9e:	2c02      	cmp	r4, #2
 8003ba0:	d030      	beq.n	8003c04 <__ieee754_atan2+0xd4>
 8003ba2:	2c03      	cmp	r4, #3
 8003ba4:	d1e5      	bne.n	8003b72 <__ieee754_atan2+0x42>
 8003ba6:	a13c      	add	r1, pc, #240	; (adr r1, 8003c98 <__ieee754_atan2+0x168>)
 8003ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bac:	e7e1      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003bae:	ea58 0802 	orrs.w	r8, r8, r2
 8003bb2:	d106      	bne.n	8003bc2 <__ieee754_atan2+0x92>
 8003bb4:	f1be 0f00 	cmp.w	lr, #0
 8003bb8:	da6a      	bge.n	8003c90 <__ieee754_atan2+0x160>
 8003bba:	a139      	add	r1, pc, #228	; (adr r1, 8003ca0 <__ieee754_atan2+0x170>)
 8003bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc0:	e7d7      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003bc2:	4562      	cmp	r2, ip
 8003bc4:	d122      	bne.n	8003c0c <__ieee754_atan2+0xdc>
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d111      	bne.n	8003bee <__ieee754_atan2+0xbe>
 8003bca:	2c02      	cmp	r4, #2
 8003bcc:	d007      	beq.n	8003bde <__ieee754_atan2+0xae>
 8003bce:	2c03      	cmp	r4, #3
 8003bd0:	d009      	beq.n	8003be6 <__ieee754_atan2+0xb6>
 8003bd2:	2c01      	cmp	r4, #1
 8003bd4:	d156      	bne.n	8003c84 <__ieee754_atan2+0x154>
 8003bd6:	a134      	add	r1, pc, #208	; (adr r1, 8003ca8 <__ieee754_atan2+0x178>)
 8003bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bdc:	e7c9      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003bde:	a134      	add	r1, pc, #208	; (adr r1, 8003cb0 <__ieee754_atan2+0x180>)
 8003be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003be4:	e7c5      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003be6:	a134      	add	r1, pc, #208	; (adr r1, 8003cb8 <__ieee754_atan2+0x188>)
 8003be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bec:	e7c1      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003bee:	2c02      	cmp	r4, #2
 8003bf0:	d008      	beq.n	8003c04 <__ieee754_atan2+0xd4>
 8003bf2:	2c03      	cmp	r4, #3
 8003bf4:	d0d7      	beq.n	8003ba6 <__ieee754_atan2+0x76>
 8003bf6:	2c01      	cmp	r4, #1
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	d146      	bne.n	8003c8c <__ieee754_atan2+0x15c>
 8003bfe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c02:	e7b6      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003c04:	a12e      	add	r1, pc, #184	; (adr r1, 8003cc0 <__ieee754_atan2+0x190>)
 8003c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c0a:	e7b2      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003c0c:	4563      	cmp	r3, ip
 8003c0e:	d0d1      	beq.n	8003bb4 <__ieee754_atan2+0x84>
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	151b      	asrs	r3, r3, #20
 8003c14:	2b3c      	cmp	r3, #60	; 0x3c
 8003c16:	dc1e      	bgt.n	8003c56 <__ieee754_atan2+0x126>
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	da01      	bge.n	8003c20 <__ieee754_atan2+0xf0>
 8003c1c:	333c      	adds	r3, #60	; 0x3c
 8003c1e:	db1e      	blt.n	8003c5e <__ieee754_atan2+0x12e>
 8003c20:	4632      	mov	r2, r6
 8003c22:	463b      	mov	r3, r7
 8003c24:	f7fc fdb2 	bl	800078c <__aeabi_ddiv>
 8003c28:	ec41 0b10 	vmov	d0, r0, r1
 8003c2c:	f7ff ff1c 	bl	8003a68 <fabs>
 8003c30:	f7ff fd72 	bl	8003718 <atan>
 8003c34:	ec51 0b10 	vmov	r0, r1, d0
 8003c38:	2c01      	cmp	r4, #1
 8003c3a:	d013      	beq.n	8003c64 <__ieee754_atan2+0x134>
 8003c3c:	2c02      	cmp	r4, #2
 8003c3e:	d014      	beq.n	8003c6a <__ieee754_atan2+0x13a>
 8003c40:	2c00      	cmp	r4, #0
 8003c42:	d096      	beq.n	8003b72 <__ieee754_atan2+0x42>
 8003c44:	a320      	add	r3, pc, #128	; (adr r3, 8003cc8 <__ieee754_atan2+0x198>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f7fc fac1 	bl	80001d0 <__aeabi_dsub>
 8003c4e:	a31c      	add	r3, pc, #112	; (adr r3, 8003cc0 <__ieee754_atan2+0x190>)
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	e013      	b.n	8003c7e <__ieee754_atan2+0x14e>
 8003c56:	a11e      	add	r1, pc, #120	; (adr r1, 8003cd0 <__ieee754_atan2+0x1a0>)
 8003c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c5c:	e7ec      	b.n	8003c38 <__ieee754_atan2+0x108>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	2100      	movs	r1, #0
 8003c62:	e7e9      	b.n	8003c38 <__ieee754_atan2+0x108>
 8003c64:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003c68:	e783      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003c6a:	a317      	add	r3, pc, #92	; (adr r3, 8003cc8 <__ieee754_atan2+0x198>)
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f7fc faae 	bl	80001d0 <__aeabi_dsub>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	a111      	add	r1, pc, #68	; (adr r1, 8003cc0 <__ieee754_atan2+0x190>)
 8003c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c7e:	f7fc faa7 	bl	80001d0 <__aeabi_dsub>
 8003c82:	e776      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003c84:	a114      	add	r1, pc, #80	; (adr r1, 8003cd8 <__ieee754_atan2+0x1a8>)
 8003c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c8a:	e772      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	e770      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003c90:	a10f      	add	r1, pc, #60	; (adr r1, 8003cd0 <__ieee754_atan2+0x1a0>)
 8003c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c96:	e76c      	b.n	8003b72 <__ieee754_atan2+0x42>
 8003c98:	54442d18 	.word	0x54442d18
 8003c9c:	c00921fb 	.word	0xc00921fb
 8003ca0:	54442d18 	.word	0x54442d18
 8003ca4:	bff921fb 	.word	0xbff921fb
 8003ca8:	54442d18 	.word	0x54442d18
 8003cac:	bfe921fb 	.word	0xbfe921fb
 8003cb0:	7f3321d2 	.word	0x7f3321d2
 8003cb4:	4002d97c 	.word	0x4002d97c
 8003cb8:	7f3321d2 	.word	0x7f3321d2
 8003cbc:	c002d97c 	.word	0xc002d97c
 8003cc0:	54442d18 	.word	0x54442d18
 8003cc4:	400921fb 	.word	0x400921fb
 8003cc8:	33145c07 	.word	0x33145c07
 8003ccc:	3ca1a626 	.word	0x3ca1a626
 8003cd0:	54442d18 	.word	0x54442d18
 8003cd4:	3ff921fb 	.word	0x3ff921fb
 8003cd8:	54442d18 	.word	0x54442d18
 8003cdc:	3fe921fb 	.word	0x3fe921fb
 8003ce0:	7ff00000 	.word	0x7ff00000

08003ce4 <__ieee754_sqrt>:
 8003ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce8:	ec55 4b10 	vmov	r4, r5, d0
 8003cec:	4e54      	ldr	r6, [pc, #336]	; (8003e40 <__ieee754_sqrt+0x15c>)
 8003cee:	43ae      	bics	r6, r5
 8003cf0:	ee10 0a10 	vmov	r0, s0
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	462a      	mov	r2, r5
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	d113      	bne.n	8003d24 <__ieee754_sqrt+0x40>
 8003cfc:	ee10 2a10 	vmov	r2, s0
 8003d00:	462b      	mov	r3, r5
 8003d02:	ee10 0a10 	vmov	r0, s0
 8003d06:	4629      	mov	r1, r5
 8003d08:	f7fc fc16 	bl	8000538 <__aeabi_dmul>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fa5e 	bl	80001d4 <__adddf3>
 8003d18:	4604      	mov	r4, r0
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	ec45 4b10 	vmov	d0, r4, r5
 8003d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	dc10      	bgt.n	8003d4a <__ieee754_sqrt+0x66>
 8003d28:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003d2c:	4330      	orrs	r0, r6
 8003d2e:	d0f5      	beq.n	8003d1c <__ieee754_sqrt+0x38>
 8003d30:	b15d      	cbz	r5, 8003d4a <__ieee754_sqrt+0x66>
 8003d32:	ee10 2a10 	vmov	r2, s0
 8003d36:	462b      	mov	r3, r5
 8003d38:	4620      	mov	r0, r4
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	f7fc fa48 	bl	80001d0 <__aeabi_dsub>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	f7fc fd22 	bl	800078c <__aeabi_ddiv>
 8003d48:	e7e6      	b.n	8003d18 <__ieee754_sqrt+0x34>
 8003d4a:	151b      	asrs	r3, r3, #20
 8003d4c:	d10c      	bne.n	8003d68 <__ieee754_sqrt+0x84>
 8003d4e:	2a00      	cmp	r2, #0
 8003d50:	d06d      	beq.n	8003e2e <__ieee754_sqrt+0x14a>
 8003d52:	2000      	movs	r0, #0
 8003d54:	02d6      	lsls	r6, r2, #11
 8003d56:	d56e      	bpl.n	8003e36 <__ieee754_sqrt+0x152>
 8003d58:	1e44      	subs	r4, r0, #1
 8003d5a:	1b1b      	subs	r3, r3, r4
 8003d5c:	f1c0 0420 	rsb	r4, r0, #32
 8003d60:	fa21 f404 	lsr.w	r4, r1, r4
 8003d64:	4322      	orrs	r2, r4
 8003d66:	4081      	lsls	r1, r0
 8003d68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003d6c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8003d70:	07dd      	lsls	r5, r3, #31
 8003d72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d76:	bf42      	ittt	mi
 8003d78:	0052      	lslmi	r2, r2, #1
 8003d7a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8003d7e:	0049      	lslmi	r1, r1, #1
 8003d80:	1058      	asrs	r0, r3, #1
 8003d82:	2500      	movs	r5, #0
 8003d84:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8003d88:	441a      	add	r2, r3
 8003d8a:	0049      	lsls	r1, r1, #1
 8003d8c:	2316      	movs	r3, #22
 8003d8e:	462c      	mov	r4, r5
 8003d90:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8003d94:	19a7      	adds	r7, r4, r6
 8003d96:	4297      	cmp	r7, r2
 8003d98:	bfde      	ittt	le
 8003d9a:	1bd2      	suble	r2, r2, r7
 8003d9c:	19bc      	addle	r4, r7, r6
 8003d9e:	19ad      	addle	r5, r5, r6
 8003da0:	0052      	lsls	r2, r2, #1
 8003da2:	3b01      	subs	r3, #1
 8003da4:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8003da8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003dac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003db0:	d1f0      	bne.n	8003d94 <__ieee754_sqrt+0xb0>
 8003db2:	f04f 0e20 	mov.w	lr, #32
 8003db6:	469c      	mov	ip, r3
 8003db8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003dbc:	42a2      	cmp	r2, r4
 8003dbe:	eb06 070c 	add.w	r7, r6, ip
 8003dc2:	dc02      	bgt.n	8003dca <__ieee754_sqrt+0xe6>
 8003dc4:	d112      	bne.n	8003dec <__ieee754_sqrt+0x108>
 8003dc6:	428f      	cmp	r7, r1
 8003dc8:	d810      	bhi.n	8003dec <__ieee754_sqrt+0x108>
 8003dca:	2f00      	cmp	r7, #0
 8003dcc:	eb07 0c06 	add.w	ip, r7, r6
 8003dd0:	da34      	bge.n	8003e3c <__ieee754_sqrt+0x158>
 8003dd2:	f1bc 0f00 	cmp.w	ip, #0
 8003dd6:	db31      	blt.n	8003e3c <__ieee754_sqrt+0x158>
 8003dd8:	f104 0801 	add.w	r8, r4, #1
 8003ddc:	1b12      	subs	r2, r2, r4
 8003dde:	428f      	cmp	r7, r1
 8003de0:	bf88      	it	hi
 8003de2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003de6:	1bc9      	subs	r1, r1, r7
 8003de8:	4433      	add	r3, r6
 8003dea:	4644      	mov	r4, r8
 8003dec:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8003df0:	f1be 0e01 	subs.w	lr, lr, #1
 8003df4:	443a      	add	r2, r7
 8003df6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8003dfa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8003dfe:	d1dd      	bne.n	8003dbc <__ieee754_sqrt+0xd8>
 8003e00:	430a      	orrs	r2, r1
 8003e02:	d006      	beq.n	8003e12 <__ieee754_sqrt+0x12e>
 8003e04:	1c5c      	adds	r4, r3, #1
 8003e06:	bf13      	iteet	ne
 8003e08:	3301      	addne	r3, #1
 8003e0a:	3501      	addeq	r5, #1
 8003e0c:	4673      	moveq	r3, lr
 8003e0e:	f023 0301 	bicne.w	r3, r3, #1
 8003e12:	106a      	asrs	r2, r5, #1
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	07e9      	lsls	r1, r5, #31
 8003e18:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003e1c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003e20:	bf48      	it	mi
 8003e22:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003e26:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8003e2a:	461c      	mov	r4, r3
 8003e2c:	e776      	b.n	8003d1c <__ieee754_sqrt+0x38>
 8003e2e:	0aca      	lsrs	r2, r1, #11
 8003e30:	3b15      	subs	r3, #21
 8003e32:	0549      	lsls	r1, r1, #21
 8003e34:	e78b      	b.n	8003d4e <__ieee754_sqrt+0x6a>
 8003e36:	0052      	lsls	r2, r2, #1
 8003e38:	3001      	adds	r0, #1
 8003e3a:	e78b      	b.n	8003d54 <__ieee754_sqrt+0x70>
 8003e3c:	46a0      	mov	r8, r4
 8003e3e:	e7cd      	b.n	8003ddc <__ieee754_sqrt+0xf8>
 8003e40:	7ff00000 	.word	0x7ff00000

08003e44 <matherr>:
 8003e44:	2000      	movs	r0, #0
 8003e46:	4770      	bx	lr

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
