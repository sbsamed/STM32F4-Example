
012_01_DMA_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002764  08002764  00012764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800278c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000dc  200000dc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00005fa4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000012de  00000000  00000000  00025fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000590  00000000  00000000  000272c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000004e8  00000000  00000000  00027850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000028eb  00000000  00000000  00027d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000202a  00000000  00000000  0002a623  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002c64d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000151c  00000000  00000000  0002c6cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800274c 	.word	0x0800274c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800274c 	.word	0x0800274c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_value,2);
 80004dc:	2202      	movs	r2, #2
 80004de:	4907      	ldr	r1, [pc, #28]	; (80004fc <main+0x24>)
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <main+0x28>)
 80004e2:	f000 fabf 	bl	8000a64 <HAL_ADC_Start_DMA>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa07 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f80b 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8f1 	bl	80006d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f2:	f000 f8cf 	bl	8000694 <MX_DMA_Init>
  MX_ADC1_Init();
 80004f6:	f000 f86f 	bl	80005d8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <main+0x22>
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000030 	.word	0x20000030

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 f912 	bl	800273c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <SystemClock_Config+0xcc>)
 800052e:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <SystemClock_Config+0xcc>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <SystemClock_Config+0xd0>)
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xd0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000574:	2304      	movs	r3, #4
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000578:	23a8      	movs	r3, #168	; 0xa8
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000580:	2304      	movs	r3, #4
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fc53 	bl	8001e34 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000594:	f000 f8c6 	bl	8000724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2302      	movs	r3, #2
 800059e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2105      	movs	r1, #5
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 feb4 	bl	8002324 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c2:	f000 f8af 	bl	8000724 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3750      	adds	r7, #80	; 0x50
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MX_ADC1_Init+0xb0>)
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <MX_ADC1_Init+0xb4>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_ADC1_Init+0xb0>)
 80005f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f8:	4b23      	ldr	r3, [pc, #140]	; (8000688 <MX_ADC1_Init+0xb0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_ADC1_Init+0xb0>)
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_ADC1_Init+0xb0>)
 8000606:	2201      	movs	r2, #1
 8000608:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0xb0>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0xb0>)
 8000614:	2200      	movs	r2, #0
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_ADC1_Init+0xb0>)
 800061a:	4a1d      	ldr	r2, [pc, #116]	; (8000690 <MX_ADC1_Init+0xb8>)
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0xb0>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_ADC1_Init+0xb0>)
 8000626:	2202      	movs	r2, #2
 8000628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_ADC1_Init+0xb0>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_ADC1_Init+0xb0>)
 8000634:	2201      	movs	r2, #1
 8000636:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <MX_ADC1_Init+0xb0>)
 800063a:	f000 f9cf 	bl	80009dc <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000644:	f000 f86e 	bl	8000724 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800064c:	2301      	movs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <MX_ADC1_Init+0xb0>)
 800065a:	f000 fb31 	bl	8000cc0 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000664:	f000 f85e 	bl	8000724 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0xb0>)
 8000672:	f000 fb25 	bl	8000cc0 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800067c:	f000 f852 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000030 	.word	0x20000030
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <MX_DMA_Init+0x3c>)
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_DMA_Init+0x3c>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_DMA_Init+0x3c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2038      	movs	r0, #56	; 0x38
 80006bc:	f000 fe7b 	bl	80013b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006c0:	2038      	movs	r0, #56	; 0x38
 80006c2:	f000 fe94 	bl	80013ee <HAL_NVIC_EnableIRQ>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <MX_GPIO_Init+0x4c>)
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_GPIO_Init+0x4c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_GPIO_Init+0x4c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4a09      	ldr	r2, [pc, #36]	; (8000720 <MX_GPIO_Init+0x4c>)
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_GPIO_Init+0x4c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_GPIO_Init+0x4c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072a:	e7fe      	b.n	800072a <Error_Handler+0x6>

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4a10      	ldr	r2, [pc, #64]	; (8000778 <HAL_MspInit+0x4c>)
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x4c>)
 800073a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000740:	6453      	str	r3, [r2, #68]	; 0x44
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <HAL_MspInit+0x4c>)
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <HAL_MspInit+0x4c>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <HAL_ADC_MspInit+0xdc>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d157      	bne.n	800084e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4a2e      	ldr	r2, [pc, #184]	; (800085c <HAL_ADC_MspInit+0xe0>)
 80007a4:	4b2d      	ldr	r3, [pc, #180]	; (800085c <HAL_ADC_MspInit+0xe0>)
 80007a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <HAL_ADC_MspInit+0xe0>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4a27      	ldr	r2, [pc, #156]	; (800085c <HAL_ADC_MspInit+0xe0>)
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <HAL_ADC_MspInit+0xe0>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <HAL_ADC_MspInit+0xe0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007da:	2303      	movs	r3, #3
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	481d      	ldr	r0, [pc, #116]	; (8000860 <HAL_ADC_MspInit+0xe4>)
 80007ea:	f001 f989 	bl	8001b00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_ADC_MspInit+0xec>)
 80007f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000814:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000818:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000824:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000834:	f000 fdf6 	bl	8001424 <HAL_DMA_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800083e:	f7ff ff71 	bl	8000724 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 8000846:	639a      	str	r2, [r3, #56]	; 0x38
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_ADC_MspInit+0xe8>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	; 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40012000 	.word	0x40012000
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	20000078 	.word	0x20000078
 8000868:	40026410 	.word	0x40026410

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f870 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <DMA2_Stream0_IRQHandler+0x10>)
 80008c6:	f000 feb3 	bl	8001630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000078 	.word	0x20000078

080008d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_Init+0x40>)
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_Init+0x40>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_Init+0x40>)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_Init+0x40>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_Init+0x40>)
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_Init+0x40>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 fd3d 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fefe 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fd55 	bl	800140a <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 fd1d 	bl	80013b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000000 	.word	0x20000000
 8000994:	20000008 	.word	0x20000008
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	200000d8 	.word	0x200000d8

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200000d8 	.word	0x200000d8

080009dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e033      	b.n	8000a5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d109      	bne.n	8000a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff febe 	bl	800077c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d118      	bne.n	8000a4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a22:	f023 0302 	bic.w	r3, r3, #2
 8000a26:	f043 0202 	orr.w	r2, r3, #2
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 fa6a 	bl	8000f08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	f043 0201 	orr.w	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	641a      	str	r2, [r3, #64]	; 0x40
 8000a4a:	e001      	b.n	8000a50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d101      	bne.n	8000a82 <HAL_ADC_Start_DMA+0x1e>
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e0e9      	b.n	8000c56 <HAL_ADC_Start_DMA+0x1f2>
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2201      	movs	r2, #1
 8000a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d018      	beq.n	8000aca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68fa      	ldr	r2, [r7, #12]
 8000a9e:	6812      	ldr	r2, [r2, #0]
 8000aa0:	6892      	ldr	r2, [r2, #8]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000aa8:	4b6d      	ldr	r3, [pc, #436]	; (8000c60 <HAL_ADC_Start_DMA+0x1fc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a6d      	ldr	r2, [pc, #436]	; (8000c64 <HAL_ADC_Start_DMA+0x200>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	0c9a      	lsrs	r2, r3, #18
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000abc:	e002      	b.n	8000ac4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f9      	bne.n	8000abe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad8:	d107      	bne.n	8000aea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	6892      	ldr	r2, [r2, #8]
 8000ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ae8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	f040 80a1 	bne.w	8000c3c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b02:	f023 0301 	bic.w	r3, r3, #1
 8000b06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d007      	beq.n	8000b2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b38:	d106      	bne.n	8000b48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f023 0206 	bic.w	r2, r3, #6
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	645a      	str	r2, [r3, #68]	; 0x44
 8000b46:	e002      	b.n	8000b4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b56:	4b44      	ldr	r3, [pc, #272]	; (8000c68 <HAL_ADC_Start_DMA+0x204>)
 8000b58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5e:	4a43      	ldr	r2, [pc, #268]	; (8000c6c <HAL_ADC_Start_DMA+0x208>)
 8000b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b66:	4a42      	ldr	r2, [pc, #264]	; (8000c70 <HAL_ADC_Start_DMA+0x20c>)
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b6e:	4a41      	ldr	r2, [pc, #260]	; (8000c74 <HAL_ADC_Start_DMA+0x210>)
 8000b70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000b7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	6852      	ldr	r2, [r2, #4]
 8000b86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	6812      	ldr	r2, [r2, #0]
 8000b94:	6892      	ldr	r2, [r2, #8]
 8000b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	334c      	adds	r3, #76	; 0x4c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f000 fce8 	bl	8001580 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 031f 	and.w	r3, r3, #31
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d12a      	bne.n	8000c12 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <HAL_ADC_Start_DMA+0x214>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d015      	beq.n	8000bf2 <HAL_ADC_Start_DMA+0x18e>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a2c      	ldr	r2, [pc, #176]	; (8000c7c <HAL_ADC_Start_DMA+0x218>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d105      	bne.n	8000bdc <HAL_ADC_Start_DMA+0x178>
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_ADC_Start_DMA+0x204>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 031f 	and.w	r3, r3, #31
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <HAL_ADC_Start_DMA+0x21c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d136      	bne.n	8000c54 <HAL_ADC_Start_DMA+0x1f0>
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_ADC_Start_DMA+0x204>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 031f 	and.w	r3, r3, #31
 8000bee:	2b0f      	cmp	r3, #15
 8000bf0:	d830      	bhi.n	8000c54 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d129      	bne.n	8000c54 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	6812      	ldr	r2, [r2, #0]
 8000c08:	6892      	ldr	r2, [r2, #8]
 8000c0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	e020      	b.n	8000c54 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_ADC_Start_DMA+0x214>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d11b      	bne.n	8000c54 <HAL_ADC_Start_DMA+0x1f0>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d114      	bne.n	8000c54 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	6892      	ldr	r2, [r2, #8]
 8000c34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	e00b      	b.n	8000c54 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f043 0210 	orr.w	r2, r3, #16
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	f043 0201 	orr.w	r2, r3, #1
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000000 	.word	0x20000000
 8000c64:	431bde83 	.word	0x431bde83
 8000c68:	40012300 	.word	0x40012300
 8000c6c:	08001101 	.word	0x08001101
 8000c70:	080011bb 	.word	0x080011bb
 8000c74:	080011d7 	.word	0x080011d7
 8000c78:	40012000 	.word	0x40012000
 8000c7c:	40012100 	.word	0x40012100
 8000c80:	40012200 	.word	0x40012200

08000c84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cc0:	b490      	push	{r4, r7}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d101      	bne.n	8000cdc <HAL_ADC_ConfigChannel+0x1c>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e107      	b.n	8000eec <HAL_ADC_ConfigChannel+0x22c>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b09      	cmp	r3, #9
 8000cea:	d926      	bls.n	8000d3a <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68d9      	ldr	r1, [r3, #12]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	4603      	mov	r3, r0
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4403      	add	r3, r0
 8000d04:	3b1e      	subs	r3, #30
 8000d06:	2007      	movs	r0, #7
 8000d08:	fa00 f303 	lsl.w	r3, r0, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	400b      	ands	r3, r1
 8000d10:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68d9      	ldr	r1, [r3, #12]
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	6898      	ldr	r0, [r3, #8]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	461c      	mov	r4, r3
 8000d28:	4623      	mov	r3, r4
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4423      	add	r3, r4
 8000d2e:	3b1e      	subs	r3, #30
 8000d30:	fa00 f303 	lsl.w	r3, r0, r3
 8000d34:	430b      	orrs	r3, r1
 8000d36:	60d3      	str	r3, [r2, #12]
 8000d38:	e023      	b.n	8000d82 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6919      	ldr	r1, [r3, #16]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4403      	add	r3, r0
 8000d52:	2007      	movs	r0, #7
 8000d54:	fa00 f303 	lsl.w	r3, r0, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6919      	ldr	r1, [r3, #16]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	6898      	ldr	r0, [r3, #8]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	461c      	mov	r4, r3
 8000d74:	4623      	mov	r3, r4
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4423      	add	r3, r4
 8000d7a:	fa00 f303 	lsl.w	r3, r0, r3
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d824      	bhi.n	8000dd4 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b05      	subs	r3, #5
 8000da0:	221f      	movs	r2, #31
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4003      	ands	r3, r0
 8000daa:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6819      	ldr	r1, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	461c      	mov	r4, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	3b05      	subs	r3, #5
 8000dca:	fa04 f303 	lsl.w	r3, r4, r3
 8000dce:	4303      	orrs	r3, r0
 8000dd0:	634b      	str	r3, [r1, #52]	; 0x34
 8000dd2:	e04c      	b.n	8000e6e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b0c      	cmp	r3, #12
 8000dda:	d824      	bhi.n	8000e26 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	3b23      	subs	r3, #35	; 0x23
 8000df2:	221f      	movs	r2, #31
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4003      	ands	r3, r0
 8000dfc:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	461c      	mov	r4, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	3b23      	subs	r3, #35	; 0x23
 8000e1c:	fa04 f303 	lsl.w	r3, r4, r3
 8000e20:	4303      	orrs	r3, r0
 8000e22:	630b      	str	r3, [r1, #48]	; 0x30
 8000e24:	e023      	b.n	8000e6e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	3b41      	subs	r3, #65	; 0x41
 8000e3c:	221f      	movs	r2, #31
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4003      	ands	r3, r0
 8000e46:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	461c      	mov	r4, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	3b41      	subs	r3, #65	; 0x41
 8000e66:	fa04 f303 	lsl.w	r3, r4, r3
 8000e6a:	4303      	orrs	r3, r0
 8000e6c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <HAL_ADC_ConfigChannel+0x238>)
 8000e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_ADC_ConfigChannel+0x23c>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d109      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1d0>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b12      	cmp	r3, #18
 8000e82:	d105      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1d0>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	; (8000efc <HAL_ADC_ConfigChannel+0x23c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d123      	bne.n	8000ee2 <HAL_ADC_ConfigChannel+0x222>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d003      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x1ea>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b11      	cmp	r3, #17
 8000ea8:	d11b      	bne.n	8000ee2 <HAL_ADC_ConfigChannel+0x222>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d111      	bne.n	8000ee2 <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <HAL_ADC_ConfigChannel+0x240>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <HAL_ADC_ConfigChannel+0x244>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	0c9a      	lsrs	r2, r3, #18
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ed4:	e002      	b.n	8000edc <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f9      	bne.n	8000ed6 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc90      	pop	{r4, r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40012300 	.word	0x40012300
 8000efc:	40012000 	.word	0x40012000
 8000f00:	20000000 	.word	0x20000000
 8000f04:	431bde83 	.word	0x431bde83

08000f08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f10:	4b79      	ldr	r3, [pc, #484]	; (80010f8 <ADC_Init+0x1f0>)
 8000f12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	6852      	ldr	r2, [r2, #4]
 8000f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	6851      	ldr	r1, [r2, #4]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6912      	ldr	r2, [r2, #16]
 8000f4c:	0212      	lsls	r2, r2, #8
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	6852      	ldr	r2, [r2, #4]
 8000f5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	6851      	ldr	r1, [r2, #4]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6892      	ldr	r2, [r2, #8]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	6892      	ldr	r2, [r2, #8]
 8000f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	6891      	ldr	r1, [r2, #8]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68d2      	ldr	r2, [r2, #12]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <ADC_Init+0x1f4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d022      	beq.n	8000fe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6812      	ldr	r2, [r2, #0]
 8000fa8:	6892      	ldr	r2, [r2, #8]
 8000faa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	6891      	ldr	r1, [r2, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	6892      	ldr	r2, [r2, #8]
 8000fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	6812      	ldr	r2, [r2, #0]
 8000fda:	6891      	ldr	r1, [r2, #8]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	e00f      	b.n	8001006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	6892      	ldr	r2, [r2, #8]
 8000ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6812      	ldr	r2, [r2, #0]
 8000ffe:	6892      	ldr	r2, [r2, #8]
 8001000:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001004:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	6892      	ldr	r2, [r2, #8]
 8001010:	f022 0202 	bic.w	r2, r2, #2
 8001014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	6891      	ldr	r1, [r2, #8]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	7e12      	ldrb	r2, [r2, #24]
 8001024:	0052      	lsls	r2, r2, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01b      	beq.n	800106c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	6852      	ldr	r2, [r2, #4]
 800103e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001042:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	6852      	ldr	r2, [r2, #4]
 800104e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	6851      	ldr	r1, [r2, #4]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001062:	3a01      	subs	r2, #1
 8001064:	0352      	lsls	r2, r2, #13
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	e007      	b.n	800107c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	6852      	ldr	r2, [r2, #4]
 8001076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800107a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001086:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	69d2      	ldr	r2, [r2, #28]
 800109a:	3a01      	subs	r2, #1
 800109c:	0512      	lsls	r2, r2, #20
 800109e:	430a      	orrs	r2, r1
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	6892      	ldr	r2, [r2, #8]
 80010ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	6891      	ldr	r1, [r2, #8]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80010c2:	0252      	lsls	r2, r2, #9
 80010c4:	430a      	orrs	r2, r1
 80010c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	6892      	ldr	r2, [r2, #8]
 80010d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	6891      	ldr	r1, [r2, #8]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6952      	ldr	r2, [r2, #20]
 80010e6:	0292      	lsls	r2, r2, #10
 80010e8:	430a      	orrs	r2, r1
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40012300 	.word	0x40012300
 80010fc:	0f000001 	.word	0x0f000001

08001100 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001116:	2b00      	cmp	r3, #0
 8001118:	d13c      	bne.n	8001194 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d12b      	bne.n	800118c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001138:	2b00      	cmp	r3, #0
 800113a:	d127      	bne.n	800118c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001154:	2b00      	cmp	r3, #0
 8001156:	d119      	bne.n	800118c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	6852      	ldr	r2, [r2, #4]
 8001162:	f022 0220 	bic.w	r2, r2, #32
 8001166:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fd79 	bl	8000c84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001192:	e00e      	b.n	80011b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f7ff fd83 	bl	8000cac <HAL_ADC_ErrorCallback>
}
 80011a6:	e004      	b.n	80011b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	4798      	blx	r3
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff fd65 	bl	8000c98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f043 0204 	orr.w	r2, r3, #4
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fd58 	bl	8000cac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	4909      	ldr	r1, [pc, #36]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	f002 021f 	and.w	r2, r2, #31
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	490d      	ldr	r1, [pc, #52]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	4909      	ldr	r1, [pc, #36]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	2201      	movs	r2, #1
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	401a      	ands	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133e:	2101      	movs	r1, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	1e59      	subs	r1, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff90 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff2b 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff40 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff90 	bl	80012f8 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5f 	bl	80012a4 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff fac8 	bl	80009c4 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e099      	b.n	8001574 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001460:	e00f      	b.n	8001482 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001462:	f7ff faaf 	bl	80009c4 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b05      	cmp	r3, #5
 800146e:	d908      	bls.n	8001482 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2220      	movs	r2, #32
 8001474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2203      	movs	r2, #3
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e078      	b.n	8001574 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e8      	bne.n	8001462 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <HAL_DMA_Init+0x158>)
 800149c:	4013      	ands	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d107      	bne.n	80014ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4313      	orrs	r3, r2
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f023 0307 	bic.w	r3, r3, #7
 8001502:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	4313      	orrs	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	2b04      	cmp	r3, #4
 8001514:	d117      	bne.n	8001546 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4313      	orrs	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00e      	beq.n	8001546 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fa6f 	bl	8001a0c <DMA_CheckFifoParam>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001542:	2301      	movs	r3, #1
 8001544:	e016      	b.n	8001574 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fa26 	bl	80019a0 <DMA_CalcBaseAndBitshift>
 8001554:	4603      	mov	r3, r0
 8001556:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	223f      	movs	r2, #63	; 0x3f
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	f010803f 	.word	0xf010803f

08001580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_DMA_Start_IT+0x26>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e040      	b.n	8001628 <HAL_DMA_Start_IT+0xa8>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d12f      	bne.n	800161a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2200      	movs	r2, #0
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f9b8 	bl	8001944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	223f      	movs	r2, #63	; 0x3f
 80015da:	409a      	lsls	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	f042 0216 	orr.w	r2, r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	f042 0208 	orr.w	r2, r2, #8
 8001606:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e005      	b.n	8001626 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001622:	2302      	movs	r3, #2
 8001624:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001626:	7dfb      	ldrb	r3, [r7, #23]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_DMA_IRQHandler+0x258>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a92      	ldr	r2, [pc, #584]	; (800188c <HAL_DMA_IRQHandler+0x25c>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0a9b      	lsrs	r3, r3, #10
 8001648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	2208      	movs	r2, #8
 800165c:	409a      	lsls	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d01a      	beq.n	800169c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	2208      	movs	r2, #8
 800168a:	409a      	lsls	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	f043 0201 	orr.w	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2201      	movs	r2, #1
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d012      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00b      	beq.n	80016d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2201      	movs	r2, #1
 80016c0:	409a      	lsls	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	f043 0202 	orr.w	r2, r3, #2
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	2204      	movs	r2, #4
 80016d8:	409a      	lsls	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d012      	beq.n	8001708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00b      	beq.n	8001708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	2204      	movs	r2, #4
 80016f6:	409a      	lsls	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	f043 0204 	orr.w	r2, r3, #4
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	2210      	movs	r2, #16
 800170e:	409a      	lsls	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d043      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03c      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	2210      	movs	r2, #16
 800172c:	409a      	lsls	r2, r3
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d018      	beq.n	8001772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d108      	bne.n	8001760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b00      	cmp	r3, #0
 8001754:	d024      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
 800175e:	e01f      	b.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01b      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4798      	blx	r3
 8001770:	e016      	b.n	80017a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	f022 0208 	bic.w	r2, r2, #8
 800178e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	2220      	movs	r2, #32
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 808e 	beq.w	80018ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8086 	beq.w	80018ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	2220      	movs	r2, #32
 80017c8:	409a      	lsls	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d136      	bne.n	8001848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	f022 0216 	bic.w	r2, r2, #22
 80017e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	6952      	ldr	r2, [r2, #20]
 80017f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <HAL_DMA_IRQHandler+0x1da>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	f022 0208 	bic.w	r2, r2, #8
 8001818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	223f      	movs	r2, #63	; 0x3f
 8001820:	409a      	lsls	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183a:	2b00      	cmp	r3, #0
 800183c:	d07d      	beq.n	800193a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
        }
        return;
 8001846:	e078      	b.n	800193a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d01c      	beq.n	8001890 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d108      	bne.n	8001876 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	2b00      	cmp	r3, #0
 800186a:	d030      	beq.n	80018ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
 8001874:	e02b      	b.n	80018ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d027      	beq.n	80018ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
 8001886:	e022      	b.n	80018ce <HAL_DMA_IRQHandler+0x29e>
 8001888:	20000000 	.word	0x20000000
 800188c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	f022 0210 	bic.w	r2, r2, #16
 80018ac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d032      	beq.n	800193c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d022      	beq.n	8001928 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2205      	movs	r2, #5
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	f022 0201 	bic.w	r2, r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3301      	adds	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	4293      	cmp	r3, r2
 8001904:	d807      	bhi.n	8001916 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f2      	bne.n	80018fa <HAL_DMA_IRQHandler+0x2ca>
 8001914:	e000      	b.n	8001918 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001916:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
 8001938:	e000      	b.n	800193c <HAL_DMA_IRQHandler+0x30c>
        return;
 800193a:	bf00      	nop
    }
  }
}
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop

08001944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
 8001950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b40      	cmp	r3, #64	; 0x40
 8001970:	d108      	bne.n	8001984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001982:	e007      	b.n	8001994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3b10      	subs	r3, #16
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <DMA_CalcBaseAndBitshift+0x64>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019ba:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <DMA_CalcBaseAndBitshift+0x68>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d909      	bls.n	80019e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	1d1a      	adds	r2, r3, #4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	659a      	str	r2, [r3, #88]	; 0x58
 80019e0:	e007      	b.n	80019f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	aaaaaaab 	.word	0xaaaaaaab
 8001a08:	08002774 	.word	0x08002774

08001a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d11f      	bne.n	8001a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d855      	bhi.n	8001ad8 <DMA_CheckFifoParam+0xcc>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <DMA_CheckFifoParam+0x28>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a57 	.word	0x08001a57
 8001a3c:	08001a45 	.word	0x08001a45
 8001a40:	08001ad9 	.word	0x08001ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d045      	beq.n	8001adc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a54:	e042      	b.n	8001adc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a5e:	d13f      	bne.n	8001ae0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a64:	e03c      	b.n	8001ae0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6e:	d121      	bne.n	8001ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d836      	bhi.n	8001ae4 <DMA_CheckFifoParam+0xd8>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <DMA_CheckFifoParam+0x70>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a93 	.word	0x08001a93
 8001a84:	08001a8d 	.word	0x08001a8d
 8001a88:	08001aa5 	.word	0x08001aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a90:	e02f      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d024      	beq.n	8001ae8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa2:	e021      	b.n	8001ae8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aac:	d11e      	bne.n	8001aec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ab2:	e01b      	b.n	8001aec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d902      	bls.n	8001ac0 <DMA_CheckFifoParam+0xb4>
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d003      	beq.n	8001ac6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001abe:	e018      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac4:	e015      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00e      	beq.n	8001af0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad6:	e00b      	b.n	8001af0 <DMA_CheckFifoParam+0xe4>
      break;
 8001ad8:	bf00      	nop
 8001ada:	e00a      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001adc:	bf00      	nop
 8001ade:	e008      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae0:	bf00      	nop
 8001ae2:	e006      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae4:	bf00      	nop
 8001ae6:	e004      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae8:	bf00      	nop
 8001aea:	e002      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001aec:	bf00      	nop
 8001aee:	e000      	b.n	8001af2 <DMA_CheckFifoParam+0xe6>
      break;
 8001af0:	bf00      	nop
    }
  } 
  
  return status; 
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e16b      	b.n	8001df4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 815a 	bne.w	8001dee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d005      	beq.n	8001b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d130      	bne.n	8001bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d017      	beq.n	8001bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80b4 	beq.w	8001dee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4a5f      	ldr	r2, [pc, #380]	; (8001e08 <HAL_GPIO_Init+0x308>)
 8001c8c:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HAL_GPIO_Init+0x308>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b5c      	ldr	r3, [pc, #368]	; (8001e08 <HAL_GPIO_Init+0x308>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	4a5a      	ldr	r2, [pc, #360]	; (8001e0c <HAL_GPIO_Init+0x30c>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x310>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02b      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a50      	ldr	r2, [pc, #320]	; (8001e14 <HAL_GPIO_Init+0x314>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x222>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4f      	ldr	r2, [pc, #316]	; (8001e18 <HAL_GPIO_Init+0x318>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x21e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_GPIO_Init+0x31c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x21a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <HAL_GPIO_Init+0x320>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x216>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4c      	ldr	r2, [pc, #304]	; (8001e24 <HAL_GPIO_Init+0x324>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x212>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_GPIO_Init+0x328>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x20e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x32c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x20a>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00e      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	e00c      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e00a      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d12:	2305      	movs	r3, #5
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d38:	4934      	ldr	r1, [pc, #208]	; (8001e0c <HAL_GPIO_Init+0x30c>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d46:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6a:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f ae90 	bls.w	8001b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3724      	adds	r7, #36	; 0x24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40021c00 	.word	0x40021c00
 8001e30:	40013c00 	.word	0x40013c00

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e264      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d075      	beq.n	8001f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e52:	4ba3      	ldr	r3, [pc, #652]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d00c      	beq.n	8001e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5e:	4ba0      	ldr	r3, [pc, #640]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d112      	bne.n	8001e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6a:	4b9d      	ldr	r3, [pc, #628]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e76:	d10b      	bne.n	8001e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	4b99      	ldr	r3, [pc, #612]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d05b      	beq.n	8001f3c <HAL_RCC_OscConfig+0x108>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d157      	bne.n	8001f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e23f      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x74>
 8001e9a:	4a91      	ldr	r2, [pc, #580]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	4b90      	ldr	r3, [pc, #576]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e01d      	b.n	8001ee4 <HAL_RCC_OscConfig+0xb0>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x98>
 8001eb2:	4a8b      	ldr	r2, [pc, #556]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	4b8a      	ldr	r3, [pc, #552]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4a88      	ldr	r2, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	4b87      	ldr	r3, [pc, #540]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xb0>
 8001ecc:	4a84      	ldr	r2, [pc, #528]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	4b84      	ldr	r3, [pc, #528]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4a81      	ldr	r2, [pc, #516]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	4b81      	ldr	r3, [pc, #516]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fd6a 	bl	80009c4 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fd66 	bl	80009c4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e204      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xc0>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7fe fd56 	bl	80009c4 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fd52 	bl	80009c4 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1f0      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	4b6c      	ldr	r3, [pc, #432]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0xe8>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f62:	4b5f      	ldr	r3, [pc, #380]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x152>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e1c4      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4956      	ldr	r1, [pc, #344]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	4b55      	ldr	r3, [pc, #340]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	e03a      	b.n	8002012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <HAL_RCC_OscConfig+0x2b0>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fd0b 	bl	80009c4 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7fe fd07 	bl	80009c4 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1a5      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4943      	ldr	r1, [pc, #268]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
 8001fe4:	e015      	b.n	8002012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <HAL_RCC_OscConfig+0x2b0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7fe fcea 	bl	80009c4 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fce6 	bl	80009c4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e184      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d030      	beq.n	8002080 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d016      	beq.n	8002054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCC_OscConfig+0x2b4>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7fe fcca 	bl	80009c4 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002034:	f7fe fcc6 	bl	80009c4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e164      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x200>
 8002052:	e015      	b.n	8002080 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_OscConfig+0x2b4>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7fe fcb3 	bl	80009c4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002062:	f7fe fcaf 	bl	80009c4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e14d      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a0 	beq.w	80021ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_OscConfig+0x2b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d121      	bne.n	800210e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_RCC_OscConfig+0x2b8>)
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCC_OscConfig+0x2b8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe fc75 	bl	80009c4 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e011      	b.n	8002102 <HAL_RCC_OscConfig+0x2ce>
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	42470000 	.word	0x42470000
 80020e8:	42470e80 	.word	0x42470e80
 80020ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7fe fc68 	bl	80009c4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e106      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCC_OscConfig+0x4e4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x2f0>
 8002116:	4a81      	ldr	r2, [pc, #516]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002118:	4b80      	ldr	r3, [pc, #512]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
 8002122:	e01c      	b.n	800215e <HAL_RCC_OscConfig+0x32a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d10c      	bne.n	8002146 <HAL_RCC_OscConfig+0x312>
 800212c:	4a7b      	ldr	r2, [pc, #492]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 800212e:	4b7b      	ldr	r3, [pc, #492]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	4a78      	ldr	r2, [pc, #480]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
 8002144:	e00b      	b.n	800215e <HAL_RCC_OscConfig+0x32a>
 8002146:	4a75      	ldr	r2, [pc, #468]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002148:	4b74      	ldr	r3, [pc, #464]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	4a72      	ldr	r2, [pc, #456]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002154:	4b71      	ldr	r3, [pc, #452]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d015      	beq.n	8002192 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002166:	f7fe fc2d 	bl	80009c4 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7fe fc29 	bl	80009c4 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0c5      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ee      	beq.n	800216e <HAL_RCC_OscConfig+0x33a>
 8002190:	e014      	b.n	80021bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7fe fc17 	bl	80009c4 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7fe fc13 	bl	80009c4 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0af      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b0:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ee      	bne.n	800219a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 809b 	beq.w	800230e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021d8:	4b50      	ldr	r3, [pc, #320]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d05c      	beq.n	800229e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d141      	bne.n	8002270 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_RCC_OscConfig+0x4ec>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fbe7 	bl	80009c4 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe fbe3 	bl	80009c4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e081      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220c:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002218:	4940      	ldr	r1, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	3b01      	subs	r3, #1
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <HAL_RCC_OscConfig+0x4ec>)
 8002244:	2201      	movs	r2, #1
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7fe fbbc 	bl	80009c4 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fbb8 	bl	80009c4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e056      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x41c>
 800226e:	e04e      	b.n	800230e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x4ec>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe fba5 	bl	80009c4 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe fba1 	bl	80009c4 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e03f      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f0      	bne.n	800227e <HAL_RCC_OscConfig+0x44a>
 800229c:	e037      	b.n	800230e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e032      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_OscConfig+0x4e8>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d028      	beq.n	800230a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d121      	bne.n	800230a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d11a      	bne.n	800230a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022da:	4013      	ands	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d111      	bne.n	800230a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	3b01      	subs	r3, #1
 80022f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d107      	bne.n	800230a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40007000 	.word	0x40007000
 800231c:	40023800 	.word	0x40023800
 8002320:	42470060 	.word	0x42470060

08002324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0cc      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_ClockConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0207 	and.w	r2, r3, #7
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20c      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b65      	ldr	r3, [pc, #404]	; (80024dc <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b63      	ldr	r3, [pc, #396]	; (80024dc <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0207 	and.w	r2, r3, #7
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002378:	4a59      	ldr	r2, [pc, #356]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002390:	4a53      	ldr	r2, [pc, #332]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4b53      	ldr	r3, [pc, #332]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800239a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4950      	ldr	r1, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d044      	beq.n	8002444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d119      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e07f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d003      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e06f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b3b      	ldr	r3, [pc, #236]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e067      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4937      	ldr	r1, [pc, #220]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 0203 	bic.w	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002414:	f7fe fad6 	bl	80009c4 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7fe fad2 	bl	80009c4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e04f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b25      	ldr	r3, [pc, #148]	; (80024dc <HAL_RCC_ClockConfig+0x1b8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0207 	and.w	r2, r3, #7
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d90c      	bls.n	800246c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <HAL_RCC_ClockConfig+0x1b8>)
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_RCC_ClockConfig+0x1b8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0207 	and.w	r2, r3, #7
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e032      	b.n	80024d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4919      	ldr	r1, [pc, #100]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002496:	4912      	ldr	r1, [pc, #72]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024aa:	f000 f821 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 80024ae:	4601      	mov	r1, r0
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	fa21 f303 	lsr.w	r3, r1, r3
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fa36 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00
 80024e0:	40023800 	.word	0x40023800
 80024e4:	08002764 	.word	0x08002764
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	b08f      	sub	sp, #60	; 0x3c
 80024f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fc:	2300      	movs	r3, #0
 80024fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d007      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x34>
 8002514:	2b08      	cmp	r3, #8
 8002516:	d008      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x3a>
 8002518:	2b00      	cmp	r3, #0
 800251a:	f040 80b2 	bne.w	8002682 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800251e:	4b5e      	ldr	r3, [pc, #376]	; (8002698 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002522:	e0b1      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4b5d      	ldr	r3, [pc, #372]	; (800269c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002528:	e0ae      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800252a:	4b5a      	ldr	r3, [pc, #360]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002534:	4b57      	ldr	r3, [pc, #348]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d04e      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002540:	4b54      	ldr	r3, [pc, #336]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	f04f 0400 	mov.w	r4, #0
 800254a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	ea01 0103 	and.w	r1, r1, r3
 8002556:	ea02 0204 	and.w	r2, r2, r4
 800255a:	460b      	mov	r3, r1
 800255c:	4614      	mov	r4, r2
 800255e:	0160      	lsls	r0, r4, #5
 8002560:	6278      	str	r0, [r7, #36]	; 0x24
 8002562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002564:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002568:	6278      	str	r0, [r7, #36]	; 0x24
 800256a:	015b      	lsls	r3, r3, #5
 800256c:	623b      	str	r3, [r7, #32]
 800256e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002572:	1a5b      	subs	r3, r3, r1
 8002574:	eb64 0402 	sbc.w	r4, r4, r2
 8002578:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800257c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002580:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002584:	ebb8 0803 	subs.w	r8, r8, r3
 8002588:	eb69 0904 	sbc.w	r9, r9, r4
 800258c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80025a4:	eb18 0801 	adds.w	r8, r8, r1
 80025a8:	eb49 0902 	adc.w	r9, r9, r2
 80025ac:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80025c4:	4640      	mov	r0, r8
 80025c6:	4649      	mov	r1, r9
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	f04f 0400 	mov.w	r4, #0
 80025ce:	461a      	mov	r2, r3
 80025d0:	4623      	mov	r3, r4
 80025d2:	f7fd fdf9 	bl	80001c8 <__aeabi_uldivmod>
 80025d6:	4603      	mov	r3, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
 80025dc:	e043      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	f04f 0400 	mov.w	r4, #0
 80025e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	ea01 0103 	and.w	r1, r1, r3
 80025f4:	ea02 0204 	and.w	r2, r2, r4
 80025f8:	460b      	mov	r3, r1
 80025fa:	4614      	mov	r4, r2
 80025fc:	0160      	lsls	r0, r4, #5
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	015b      	lsls	r3, r3, #5
 800260a:	60bb      	str	r3, [r7, #8]
 800260c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002610:	1a5b      	subs	r3, r3, r1
 8002612:	eb64 0402 	sbc.w	r4, r4, r2
 8002616:	01a6      	lsls	r6, r4, #6
 8002618:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800261c:	019d      	lsls	r5, r3, #6
 800261e:	1aed      	subs	r5, r5, r3
 8002620:	eb66 0604 	sbc.w	r6, r6, r4
 8002624:	00f3      	lsls	r3, r6, #3
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	00eb      	lsls	r3, r5, #3
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002638:	186d      	adds	r5, r5, r1
 800263a:	eb46 0602 	adc.w	r6, r6, r2
 800263e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002642:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002646:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800264a:	4655      	mov	r5, sl
 800264c:	465e      	mov	r6, fp
 800264e:	4628      	mov	r0, r5
 8002650:	4631      	mov	r1, r6
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	461a      	mov	r2, r3
 800265a:	4623      	mov	r3, r4
 800265c:	f7fd fdb4 	bl	80001c8 <__aeabi_uldivmod>
 8002660:	4603      	mov	r3, r0
 8002662:	460c      	mov	r4, r1
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	3301      	adds	r3, #1
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002680:	e002      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800268a:	4618      	mov	r0, r3
 800268c:	373c      	adds	r7, #60	; 0x3c
 800268e:	46bd      	mov	sp, r7
 8002690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200

080026a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a4:	480d      	ldr	r0, [pc, #52]	; (80026dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026a6:	490e      	ldr	r1, [pc, #56]	; (80026e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026bc:	4c0b      	ldr	r4, [pc, #44]	; (80026ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ca:	f7fe f903 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f000 f811 	bl	80026f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d2:	f7fd ff01 	bl	80004d8 <main>
  bx  lr    
 80026d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026d8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80026e4:	0800278c 	.word	0x0800278c
  ldr r2, =_sbss
 80026e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80026ec:	200000dc 	.word	0x200000dc

080026f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC_IRQHandler>
	...

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4e0d      	ldr	r6, [pc, #52]	; (800272c <__libc_init_array+0x38>)
 80026f8:	4c0d      	ldr	r4, [pc, #52]	; (8002730 <__libc_init_array+0x3c>)
 80026fa:	1ba4      	subs	r4, r4, r6
 80026fc:	10a4      	asrs	r4, r4, #2
 80026fe:	2500      	movs	r5, #0
 8002700:	42a5      	cmp	r5, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	4e0b      	ldr	r6, [pc, #44]	; (8002734 <__libc_init_array+0x40>)
 8002706:	4c0c      	ldr	r4, [pc, #48]	; (8002738 <__libc_init_array+0x44>)
 8002708:	f000 f820 	bl	800274c <_init>
 800270c:	1ba4      	subs	r4, r4, r6
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	2500      	movs	r5, #0
 8002712:	42a5      	cmp	r5, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800271c:	4798      	blx	r3
 800271e:	3501      	adds	r5, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002726:	4798      	blx	r3
 8002728:	3501      	adds	r5, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	08002784 	.word	0x08002784
 8002730:	08002784 	.word	0x08002784
 8002734:	08002784 	.word	0x08002784
 8002738:	08002788 	.word	0x08002788

0800273c <memset>:
 800273c:	4402      	add	r2, r0
 800273e:	4603      	mov	r3, r0
 8002740:	4293      	cmp	r3, r2
 8002742:	d100      	bne.n	8002746 <memset+0xa>
 8002744:	4770      	bx	lr
 8002746:	f803 1b01 	strb.w	r1, [r3], #1
 800274a:	e7f9      	b.n	8002740 <memset+0x4>

0800274c <_init>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr

08002758 <_fini>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr
