
0_08_teknofest_pid_qtr_usart_pwm_motor_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08002ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000100  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002dc  200002dc  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c174  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000160c  00000000  00000000  0002c380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b90  00000000  00000000  0002d990  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b08  00000000  00000000  0002e520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006400  00000000  00000000  0002f028  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000387b  00000000  00000000  00035428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00038ca3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000032b8  00000000  00000000  00038d20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002ea4 	.word	0x08002ea4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08002ea4 	.word	0x08002ea4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t map(long A,long B,long C,long D,long E){
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]

	return ((A*E)/C);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	69ba      	ldr	r2, [r7, #24]
 80004ea:	fb02 f203 	mul.w	r2, r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	fb92 f3f3 	sdiv	r3, r2, r3

}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <uartMessageDebug>:

void uartMessageDebug(){
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
	if( rx_buffer[0]=='p' && rx_buffer[1]=='i' && rx_buffer[2]=='d'  && rx_buffer[3]==',' ){
 8000506:	4b70      	ldr	r3, [pc, #448]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b70      	cmp	r3, #112	; 0x70
 800050c:	f040 80ab 	bne.w	8000666 <uartMessageDebug+0x166>
 8000510:	4b6d      	ldr	r3, [pc, #436]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000512:	785b      	ldrb	r3, [r3, #1]
 8000514:	2b69      	cmp	r3, #105	; 0x69
 8000516:	f040 80a6 	bne.w	8000666 <uartMessageDebug+0x166>
 800051a:	4b6b      	ldr	r3, [pc, #428]	; (80006c8 <uartMessageDebug+0x1c8>)
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	2b64      	cmp	r3, #100	; 0x64
 8000520:	f040 80a1 	bne.w	8000666 <uartMessageDebug+0x166>
 8000524:	4b68      	ldr	r3, [pc, #416]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	2b2c      	cmp	r3, #44	; 0x2c
 800052a:	f040 809c 	bne.w	8000666 <uartMessageDebug+0x166>
		forward();
 800052e:	f000 f8d5 	bl	80006dc <forward>
		 int temp=0;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
		 short k=4,mSol=0,mSag=0;
 8000536:	2304      	movs	r3, #4
 8000538:	817b      	strh	r3, [r7, #10]
 800053a:	2300      	movs	r3, #0
 800053c:	813b      	strh	r3, [r7, #8]
 800053e:	2300      	movs	r3, #0
 8000540:	80fb      	strh	r3, [r7, #6]
		 while(1){
			 if( rx_buffer[k] != '\n'){
 8000542:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000546:	4a60      	ldr	r2, [pc, #384]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000548:	5cd3      	ldrb	r3, [r2, r3]
 800054a:	2b0a      	cmp	r3, #10
 800054c:	d034      	beq.n	80005b8 <uartMessageDebug+0xb8>
				 if(rx_buffer[k] == ','){
 800054e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000552:	4a5d      	ldr	r2, [pc, #372]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000554:	5cd3      	ldrb	r3, [r2, r3]
 8000556:	2b2c      	cmp	r3, #44	; 0x2c
 8000558:	d107      	bne.n	800056a <uartMessageDebug+0x6a>
					 temp = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
					 k++;
 800055e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000562:	b29b      	uxth	r3, r3
 8000564:	3301      	adds	r3, #1
 8000566:	b29b      	uxth	r3, r3
 8000568:	817b      	strh	r3, [r7, #10]
				 }
				 if(temp==1){
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10e      	bne.n	800058e <uartMessageDebug+0x8e>
					 pwmPulseUartCharSol[mSol]=rx_buffer[k];   //sol
 8000570:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000574:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000578:	4953      	ldr	r1, [pc, #332]	; (80006c8 <uartMessageDebug+0x1c8>)
 800057a:	5c89      	ldrb	r1, [r1, r2]
 800057c:	4a53      	ldr	r2, [pc, #332]	; (80006cc <uartMessageDebug+0x1cc>)
 800057e:	54d1      	strb	r1, [r2, r3]
					 mSol++;
 8000580:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000584:	b29b      	uxth	r3, r3
 8000586:	3301      	adds	r3, #1
 8000588:	b29b      	uxth	r3, r3
 800058a:	813b      	strh	r3, [r7, #8]
 800058c:	e00d      	b.n	80005aa <uartMessageDebug+0xaa>
				 }else{
					 pwmPulseUartCharSag[mSag]=rx_buffer[k];  //sag
 800058e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000592:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000596:	494c      	ldr	r1, [pc, #304]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000598:	5c89      	ldrb	r1, [r1, r2]
 800059a:	4a4d      	ldr	r2, [pc, #308]	; (80006d0 <uartMessageDebug+0x1d0>)
 800059c:	54d1      	strb	r1, [r2, r3]
					 mSag++;
 800059e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	3301      	adds	r3, #1
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	80fb      	strh	r3, [r7, #6]
				 }
			       k++;
 80005aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	3301      	adds	r3, #1
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	e7c4      	b.n	8000542 <uartMessageDebug+0x42>
			 }else {
				pwmPulseUartCharSol[mSol] =rx_buffer[k];
 80005b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005bc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80005c0:	4941      	ldr	r1, [pc, #260]	; (80006c8 <uartMessageDebug+0x1c8>)
 80005c2:	5c89      	ldrb	r1, [r1, r2]
 80005c4:	4a41      	ldr	r2, [pc, #260]	; (80006cc <uartMessageDebug+0x1cc>)
 80005c6:	54d1      	strb	r1, [r2, r3]
				pwmPulseUartCharSag[mSag] =rx_buffer[k];
 80005c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80005d0:	493d      	ldr	r1, [pc, #244]	; (80006c8 <uartMessageDebug+0x1c8>)
 80005d2:	5c89      	ldrb	r1, [r1, r2]
 80005d4:	4a3e      	ldr	r2, [pc, #248]	; (80006d0 <uartMessageDebug+0x1d0>)
 80005d6:	54d1      	strb	r1, [r2, r3]

			   pulseUartSol=atoi(pwmPulseUartCharSol);
 80005d8:	483c      	ldr	r0, [pc, #240]	; (80006cc <uartMessageDebug+0x1cc>)
 80005da:	f002 fb7a 	bl	8002cd2 <atoi>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <uartMessageDebug+0x1d4>)
 80005e4:	601a      	str	r2, [r3, #0]
			   pulseUartSag=atoi(pwmPulseUartCharSag);
 80005e6:	483a      	ldr	r0, [pc, #232]	; (80006d0 <uartMessageDebug+0x1d0>)
 80005e8:	f002 fb73 	bl	8002cd2 <atoi>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <uartMessageDebug+0x1d8>)
 80005f2:	601a      	str	r2, [r3, #0]
			   pulseUartSol= map(pulseUartSol,0,100,0,stmMaxPulse);
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <uartMessageDebug+0x1d4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f242 1334 	movw	r3, #8500	; 0x2134
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	2264      	movs	r2, #100	; 0x64
 8000604:	2100      	movs	r1, #0
 8000606:	f7ff ff67 	bl	80004d8 <map>
 800060a:	4602      	mov	r2, r0
 800060c:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <uartMessageDebug+0x1d4>)
 800060e:	601a      	str	r2, [r3, #0]
			   pulseUartSag=map(pulseUartSag,0,100,0,stmMaxPulse);
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <uartMessageDebug+0x1d8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f242 1334 	movw	r3, #8500	; 0x2134
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2300      	movs	r3, #0
 800061e:	2264      	movs	r2, #100	; 0x64
 8000620:	2100      	movs	r1, #0
 8000622:	f7ff ff59 	bl	80004d8 <map>
 8000626:	4602      	mov	r2, r0
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <uartMessageDebug+0x1d8>)
 800062a:	601a      	str	r2, [r3, #0]

			   for(int a=0;a<10;a++){
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	e00c      	b.n	800064c <uartMessageDebug+0x14c>
				   pwmPulseUartCharSol[a]='\0';
 8000632:	4a26      	ldr	r2, [pc, #152]	; (80006cc <uartMessageDebug+0x1cc>)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	4413      	add	r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
				   pwmPulseUartCharSag[a]='\0';
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <uartMessageDebug+0x1d0>)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	4413      	add	r3, r2
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
			   for(int a=0;a<10;a++){
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2b09      	cmp	r3, #9
 8000650:	ddef      	ble.n	8000632 <uartMessageDebug+0x132>
			   }
			   temp = 1,k=4,mSol=0,mSag=0;
 8000652:	2301      	movs	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	2304      	movs	r3, #4
 8000658:	817b      	strh	r3, [r7, #10]
 800065a:	2300      	movs	r3, #0
 800065c:	813b      	strh	r3, [r7, #8]
 800065e:	2300      	movs	r3, #0
 8000660:	80fb      	strh	r3, [r7, #6]
			   break;
 8000662:	bf00      	nop
	if( rx_buffer[0]=='p' && rx_buffer[1]=='i' && rx_buffer[2]=='d'  && rx_buffer[3]==',' ){
 8000664:	e02c      	b.n	80006c0 <uartMessageDebug+0x1c0>

		 }

	  }

else if( rx_buffer[0]=='d' && rx_buffer[1]=='u' && rx_buffer[2]=='r' ){
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b64      	cmp	r3, #100	; 0x64
 800066c:	d10a      	bne.n	8000684 <uartMessageDebug+0x184>
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b75      	cmp	r3, #117	; 0x75
 8000674:	d106      	bne.n	8000684 <uartMessageDebug+0x184>
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	2b72      	cmp	r3, #114	; 0x72
 800067c:	d102      	bne.n	8000684 <uartMessageDebug+0x184>
	   stop();
 800067e:	f000 f8c3 	bl	8000808 <stop>
else if( rx_buffer[0]=='d' && rx_buffer[1]=='u' && rx_buffer[2]=='r' ){
 8000682:	e01d      	b.n	80006c0 <uartMessageDebug+0x1c0>
    }
  else if( rx_buffer[0]=='s' && rx_buffer[1]=='a' && rx_buffer[2]=='g' ){
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b73      	cmp	r3, #115	; 0x73
 800068a:	d10a      	bne.n	80006a2 <uartMessageDebug+0x1a2>
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <uartMessageDebug+0x1c8>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	2b61      	cmp	r3, #97	; 0x61
 8000692:	d106      	bne.n	80006a2 <uartMessageDebug+0x1a2>
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <uartMessageDebug+0x1c8>)
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	2b67      	cmp	r3, #103	; 0x67
 800069a:	d102      	bne.n	80006a2 <uartMessageDebug+0x1a2>
	  right();
 800069c:	f000 f878 	bl	8000790 <right>
  else if( rx_buffer[0]=='s' && rx_buffer[1]=='a' && rx_buffer[2]=='g' ){
 80006a0:	e00e      	b.n	80006c0 <uartMessageDebug+0x1c0>
      }
  else if(rx_buffer[0]=='s' && rx_buffer[1]=='o' && rx_buffer[2]=='l' ){
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <uartMessageDebug+0x1c8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b73      	cmp	r3, #115	; 0x73
 80006a8:	d10a      	bne.n	80006c0 <uartMessageDebug+0x1c0>
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <uartMessageDebug+0x1c8>)
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	2b6f      	cmp	r3, #111	; 0x6f
 80006b0:	d106      	bne.n	80006c0 <uartMessageDebug+0x1c0>
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <uartMessageDebug+0x1c8>)
 80006b4:	789b      	ldrb	r3, [r3, #2]
 80006b6:	2b6c      	cmp	r3, #108	; 0x6c
 80006b8:	d102      	bne.n	80006c0 <uartMessageDebug+0x1c0>
	  left();
 80006ba:	f000 f82d 	bl	8000718 <left>
    }else{}

 }
 80006be:	e7ff      	b.n	80006c0 <uartMessageDebug+0x1c0>
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000028c 	.word	0x2000028c
 80006cc:	200002c0 	.word	0x200002c0
 80006d0:	200002cc 	.word	0x200002cc
 80006d4:	200001f8 	.word	0x200001f8
 80006d8:	200001fc 	.word	0x200001fc

080006dc <forward>:

void forward(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

	    HAL_GPIO_WritePin(GPIOE,rightMotor1,GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <forward+0x38>)
 80006e8:	f000 fe6c 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,rightMotor2,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <forward+0x38>)
 80006f4:	f000 fe66 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,leftMotor1,GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <forward+0x38>)
 8000700:	f000 fe60 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,leftMotor2,GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070a:	4802      	ldr	r0, [pc, #8]	; (8000714 <forward+0x38>)
 800070c:	f000 fe5a 	bl	80013c4 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000

08000718 <left>:

void left(){
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af02      	add	r7, sp, #8

	HAL_GPIO_WritePin(GPIOE,rightMotor1,GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000724:	4817      	ldr	r0, [pc, #92]	; (8000784 <left+0x6c>)
 8000726:	f000 fe4d 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,rightMotor2,GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	4814      	ldr	r0, [pc, #80]	; (8000784 <left+0x6c>)
 8000732:	f000 fe47 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,leftMotor1,GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <left+0x6c>)
 800073e:	f000 fe41 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,leftMotor2,GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <left+0x6c>)
 800074a:	f000 fe3b 	bl	80013c4 <HAL_GPIO_WritePin>
	pulseUartSol= map(0,0,255,0,10000);
 800074e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2300      	movs	r3, #0
 8000756:	22ff      	movs	r2, #255	; 0xff
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff febc 	bl	80004d8 <map>
 8000760:	4602      	mov	r2, r0
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <left+0x70>)
 8000764:	601a      	str	r2, [r3, #0]
	pulseUartSag =map(240,0,255,0,10000);
 8000766:	f242 7310 	movw	r3, #10000	; 0x2710
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2300      	movs	r3, #0
 800076e:	22ff      	movs	r2, #255	; 0xff
 8000770:	2100      	movs	r1, #0
 8000772:	20f0      	movs	r0, #240	; 0xf0
 8000774:	f7ff feb0 	bl	80004d8 <map>
 8000778:	4602      	mov	r2, r0
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <left+0x74>)
 800077c:	601a      	str	r2, [r3, #0]

}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	200001f8 	.word	0x200001f8
 800078c:	200001fc 	.word	0x200001fc

08000790 <right>:
void right(){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOE,rightMotor1,GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079c:	4817      	ldr	r0, [pc, #92]	; (80007fc <right+0x6c>)
 800079e:	f000 fe11 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,rightMotor2,GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	4814      	ldr	r0, [pc, #80]	; (80007fc <right+0x6c>)
 80007aa:	f000 fe0b 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,leftMotor1,GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	4811      	ldr	r0, [pc, #68]	; (80007fc <right+0x6c>)
 80007b6:	f000 fe05 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,leftMotor2,GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <right+0x6c>)
 80007c2:	f000 fdff 	bl	80013c4 <HAL_GPIO_WritePin>
	pulseUartSol= map(240,0,255,0,10000);
 80007c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	2100      	movs	r1, #0
 80007d2:	20f0      	movs	r0, #240	; 0xf0
 80007d4:	f7ff fe80 	bl	80004d8 <map>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <right+0x70>)
 80007dc:	601a      	str	r2, [r3, #0]
	pulseUartSag =map(0,0,255,0,10000);
 80007de:	f242 7310 	movw	r3, #10000	; 0x2710
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2300      	movs	r3, #0
 80007e6:	22ff      	movs	r2, #255	; 0xff
 80007e8:	2100      	movs	r1, #0
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff fe74 	bl	80004d8 <map>
 80007f0:	4602      	mov	r2, r0
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <right+0x74>)
 80007f4:	601a      	str	r2, [r3, #0]

}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	200001f8 	.word	0x200001f8
 8000804:	200001fc 	.word	0x200001fc

08000808 <stop>:
void stop(){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE,rightMotor1,GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <stop+0x44>)
 8000814:	f000 fdd6 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,rightMotor2,GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <stop+0x44>)
 8000820:	f000 fdd0 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,leftMotor1,GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <stop+0x44>)
 800082c:	f000 fdca 	bl	80013c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,leftMotor2,GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <stop+0x44>)
 8000838:	f000 fdc4 	bl	80013c4 <HAL_GPIO_WritePin>
	pulseUartSol=0;
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <stop+0x48>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
	pulseUartSag=0;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <stop+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	200001f8 	.word	0x200001f8
 8000854:	200001fc 	.word	0x200001fc

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 fac1 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f85b 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f000 f951 	bl	8000b0c <MX_GPIO_Init>
  MX_TIM4_Init();
 800086a:	f000 f8c1 	bl	80009f0 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800086e:	f000 f923 	bl	8000ab8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


       HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	4823      	ldr	r0, [pc, #140]	; (8000904 <main+0xac>)
 8000876:	f001 fa79 	bl	8001d6c <HAL_TIM_PWM_Start>
   	   HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 800087a:	2108      	movs	r1, #8
 800087c:	4821      	ldr	r0, [pc, #132]	; (8000904 <main+0xac>)
 800087e:	f001 fa75 	bl	8001d6c <HAL_TIM_PWM_Start>

	    HAL_GPIO_WritePin(GPIOE,rightMotor1,GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000888:	481f      	ldr	r0, [pc, #124]	; (8000908 <main+0xb0>)
 800088a:	f000 fd9b 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,rightMotor2,GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000894:	481c      	ldr	r0, [pc, #112]	; (8000908 <main+0xb0>)
 8000896:	f000 fd95 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,leftMotor1, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4819      	ldr	r0, [pc, #100]	; (8000908 <main+0xb0>)
 80008a2:	f000 fd8f 	bl	80013c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,leftMotor2, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ac:	4816      	ldr	r0, [pc, #88]	; (8000908 <main+0xb0>)
 80008ae:	f000 fd89 	bl	80013c4 <HAL_GPIO_WritePin>

		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,0);
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <main+0xac>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2200      	movs	r2, #0
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0);
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <main+0xac>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2200      	movs	r2, #0
 80008c0:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    HAL_UART_Receive(&huart3,rx_buffer,50,100);
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	2232      	movs	r2, #50	; 0x32
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <main+0xb4>)
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <main+0xb8>)
 80008ca:	f001 ff18 	bl	80026fe <HAL_UART_Receive>
		uartMessageDebug();
 80008ce:	f7ff fe17 	bl	8000500 <uartMessageDebug>
	  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,pulseUartSag);
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <main+0xac>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <main+0xbc>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pulseUartSol);
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <main+0xac>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <main+0xc0>)
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	63da      	str	r2, [r3, #60]	; 0x3c

	  for(int a=0;a<50;a++) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e007      	b.n	80008fc <main+0xa4>
		  rx_buffer[a]='\0';
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <main+0xb4>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
	  for(int a=0;a<50;a++) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3301      	adds	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b31      	cmp	r3, #49	; 0x31
 8000900:	ddf4      	ble.n	80008ec <main+0x94>
	    HAL_UART_Receive(&huart3,rx_buffer,50,100);
 8000902:	e7de      	b.n	80008c2 <main+0x6a>
 8000904:	20000200 	.word	0x20000200
 8000908:	40021000 	.word	0x40021000
 800090c:	2000028c 	.word	0x2000028c
 8000910:	20000248 	.word	0x20000248
 8000914:	200001fc 	.word	0x200001fc
 8000918:	200001f8 	.word	0x200001f8

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f002 f9fa 	bl	8002d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <SystemClock_Config+0xcc>)
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <SystemClock_Config+0xcc>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	4a22      	ldr	r2, [pc, #136]	; (80009ec <SystemClock_Config+0xd0>)
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <SystemClock_Config+0xd0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800098c:	2308      	movs	r3, #8
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000990:	23a8      	movs	r3, #168	; 0xa8
 8000992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fd29 	bl	80013f8 <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009ac:	f000 f90e 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2105      	movs	r1, #5
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 ff8a 	bl	80018e8 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009da:	f000 f8f7 	bl	8000bcc <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <MX_TIM4_Init+0xc4>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a26:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a3a:	f001 f947 	bl	8001ccc <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f8c2 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4619      	mov	r1, r3
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a58:	f001 fd88 	bl	800256c <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a62:	f000 f8b3 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	; 0x60
 8000a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a7e:	f001 fa3d 	bl	8001efc <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a88:	f000 f8a0 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2208      	movs	r2, #8
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000a94:	f001 fa32 	bl	8001efc <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a9e:	f000 f895 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM4_Init+0xc0>)
 8000aa4:	f000 f8e0 	bl	8000c68 <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000200 	.word	0x20000200
 8000ab4:	40000800 	.word	0x40000800

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART3_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000af0:	f001 fdb8 	bl	8002664 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 f867 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000248 	.word	0x20000248
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f043 0310 	orr.w	r3, r3, #16
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0310 	and.w	r3, r3, #16
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_GPIO_Init+0xb8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <MX_GPIO_Init+0xbc>)
 8000b9a:	f000 fc13 	bl	80013c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000b9e:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_GPIO_Init+0xbc>)
 8000bb8:	f000 fa6a 	bl	8001090 <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40021000 	.word	0x40021000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <Error_Handler+0x6>

08000bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10d      	bne.n	8000c52 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_TIM_PWM_MspInit+0x40>)
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_TIM_PWM_MspInit+0x40>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_TIM_PWM_MspInit+0x40>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40000800 	.word	0x40000800
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_TIM_MspPostInit+0x68>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d11e      	bne.n	8000cc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <HAL_TIM_MspPostInit+0x6c>)
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_TIM_MspPostInit+0x6c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_TIM_MspPostInit+0x6c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000ca6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000caa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_TIM_MspPostInit+0x70>)
 8000cc4:	f000 f9e4 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40000800 	.word	0x40000800
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020c00 	.word	0x40020c00

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_UART_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12c      	bne.n	8000d58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d48:	2307      	movs	r3, #7
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <HAL_UART_MspInit+0x8c>)
 8000d54:	f000 f99c 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40004800 	.word	0x40004800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f866 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_Init+0x40>)
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_Init+0x40>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_Init+0x40>)
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_Init+0x40>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_Init+0x40>)
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x40>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f90b 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fedc 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023c00 	.word	0x40023c00

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f915 	bl	8001076 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f8eb 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	200002d8 	.word	0x200002d8

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200002d8 	.word	0x200002d8

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	490d      	ldr	r1, [pc, #52]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	4909      	ldr	r1, [pc, #36]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	1e59      	subs	r1, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff90 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff49 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff5e 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff90 	bl	8000f80 <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5f 	bl	8000f2c <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffb0 	bl	8000fe4 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e16b      	b.n	8001384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 815a 	bne.w	800137e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80b4 	beq.w	800137e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4a5f      	ldr	r2, [pc, #380]	; (8001398 <HAL_GPIO_Init+0x308>)
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <HAL_GPIO_Init+0x308>)
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b5c      	ldr	r3, [pc, #368]	; (8001398 <HAL_GPIO_Init+0x308>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001232:	4a5a      	ldr	r2, [pc, #360]	; (800139c <HAL_GPIO_Init+0x30c>)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x310>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d02b      	beq.n	80012b6 <HAL_GPIO_Init+0x226>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d025      	beq.n	80012b2 <HAL_GPIO_Init+0x222>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01f      	beq.n	80012ae <HAL_GPIO_Init+0x21e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x21a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x320>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x216>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_GPIO_Init+0x324>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x212>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	; (80013b8 <HAL_GPIO_Init+0x328>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x20e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4a      	ldr	r2, [pc, #296]	; (80013bc <HAL_GPIO_Init+0x32c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x20a>
 8001296:	2307      	movs	r3, #7
 8001298:	e00e      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 800129a:	2308      	movs	r3, #8
 800129c:	e00c      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 800129e:	2306      	movs	r3, #6
 80012a0:	e00a      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012a2:	2305      	movs	r3, #5
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x228>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4934      	ldr	r1, [pc, #208]	; (800139c <HAL_GPIO_Init+0x30c>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d6:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <HAL_GPIO_Init+0x330>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fa:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_GPIO_Init+0x330>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_GPIO_Init+0x330>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_GPIO_Init+0x330>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <HAL_GPIO_Init+0x330>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f ae90 	bls.w	80010ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	; 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40021400 	.word	0x40021400
 80013b8:	40021800 	.word	0x40021800
 80013bc:	40021c00 	.word	0x40021c00
 80013c0:	40013c00 	.word	0x40013c00

080013c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
 80013d0:	4613      	mov	r3, r2
 80013d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d4:	787b      	ldrb	r3, [r7, #1]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e264      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001416:	4ba3      	ldr	r3, [pc, #652]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00c      	beq.n	800143c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4ba0      	ldr	r3, [pc, #640]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800142a:	2b08      	cmp	r3, #8
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b9d      	ldr	r3, [pc, #628]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05b      	beq.n	8001500 <HAL_RCC_OscConfig+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d157      	bne.n	8001500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e23f      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x74>
 800145e:	4a91      	ldr	r2, [pc, #580]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	4b90      	ldr	r3, [pc, #576]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4a8b      	ldr	r2, [pc, #556]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	4b8a      	ldr	r3, [pc, #552]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4a88      	ldr	r2, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	4b87      	ldr	r3, [pc, #540]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 8001490:	4a84      	ldr	r2, [pc, #528]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	4b84      	ldr	r3, [pc, #528]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4a81      	ldr	r2, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcfe 	bl	8000eb0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcfa 	bl	8000eb0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e204      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xc0>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcea 	bl	8000eb0 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fce6 	bl	8000eb0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	; 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1f0      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0xe8>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d063      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150e:	4b65      	ldr	r3, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1c4      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4956      	ldr	r1, [pc, #344]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <HAL_RCC_OscConfig+0x2b0>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fc9f 	bl	8000eb0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fc9b 	bl	8000eb0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1a5      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4943      	ldr	r1, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_RCC_OscConfig+0x2b0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc7e 	bl	8000eb0 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc7a 	bl	8000eb0 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e184      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d030      	beq.n	8001644 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d016      	beq.n	8001618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_RCC_OscConfig+0x2b4>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fc5e 	bl	8000eb0 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc5a 	bl	8000eb0 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e164      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x200>
 8001616:	e015      	b.n	8001644 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_OscConfig+0x2b4>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fc47 	bl	8000eb0 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fc43 	bl	8000eb0 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e14d      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a0 	beq.w	8001792 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10f      	bne.n	8001682 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167e:	2301      	movs	r3, #1
 8001680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x2b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d121      	bne.n	80016d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_RCC_OscConfig+0x2b8>)
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <HAL_RCC_OscConfig+0x2b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169a:	f7ff fc09 	bl	8000eb0 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	e011      	b.n	80016c6 <HAL_RCC_OscConfig+0x2ce>
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	42470000 	.word	0x42470000
 80016ac:	42470e80 	.word	0x42470e80
 80016b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b4:	f7ff fbfc 	bl	8000eb0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e106      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c6:	4b85      	ldr	r3, [pc, #532]	; (80018dc <HAL_RCC_OscConfig+0x4e4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
 80016da:	4a81      	ldr	r2, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 80016dc:	4b80      	ldr	r3, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
 80016e6:	e01c      	b.n	8001722 <HAL_RCC_OscConfig+0x32a>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d10c      	bne.n	800170a <HAL_RCC_OscConfig+0x312>
 80016f0:	4a7b      	ldr	r2, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6713      	str	r3, [r2, #112]	; 0x70
 80016fc:	4a78      	ldr	r2, [pc, #480]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x32a>
 800170a:	4a75      	ldr	r2, [pc, #468]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 800170c:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6713      	str	r3, [r2, #112]	; 0x70
 8001716:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 8001718:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d015      	beq.n	8001756 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff fbc1 	bl	8000eb0 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fbbd 	bl	8000eb0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e0c5      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ee      	beq.n	8001732 <HAL_RCC_OscConfig+0x33a>
 8001754:	e014      	b.n	8001780 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fbab 	bl	8000eb0 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fba7 	bl	8000eb0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0af      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	4b5a      	ldr	r3, [pc, #360]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ee      	bne.n	800175e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001780:	7dfb      	ldrb	r3, [r7, #23]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d105      	bne.n	8001792 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001786:	4a56      	ldr	r2, [pc, #344]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 809b 	beq.w	80018d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d05c      	beq.n	8001862 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d141      	bne.n	8001834 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b0:	4b4c      	ldr	r3, [pc, #304]	; (80018e4 <HAL_RCC_OscConfig+0x4ec>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb7b 	bl	8000eb0 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fb77 	bl	8000eb0 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e081      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d0:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017dc:	4940      	ldr	r1, [pc, #256]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69da      	ldr	r2, [r3, #28]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	019b      	lsls	r3, r3, #6
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	085b      	lsrs	r3, r3, #1
 80017f6:	3b01      	subs	r3, #1
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	061b      	lsls	r3, r3, #24
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_OscConfig+0x4ec>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb50 	bl	8000eb0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fb4c 	bl	8000eb0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e056      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x41c>
 8001832:	e04e      	b.n	80018d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_OscConfig+0x4ec>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fb39 	bl	8000eb0 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fb35 	bl	8000eb0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e03f      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x44a>
 8001860:	e037      	b.n	80018d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e032      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_RCC_OscConfig+0x4e8>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d028      	beq.n	80018ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d121      	bne.n	80018ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d11a      	bne.n	80018ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800189e:	4013      	ands	r3, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d111      	bne.n	80018ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40007000 	.word	0x40007000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470060 	.word	0x42470060

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0207 	and.w	r2, r3, #7
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d20c      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0207 	and.w	r2, r3, #7
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4a59      	ldr	r2, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4a53      	ldr	r2, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4950      	ldr	r1, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4937      	ldr	r1, [pc, #220]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 0203 	bic.w	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff fa6a 	bl	8000eb0 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff fa66 	bl	8000eb0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0207 	and.w	r2, r3, #7
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d90c      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0207 	and.w	r2, r3, #7
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4919      	ldr	r1, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4912      	ldr	r1, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4601      	mov	r1, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	fa21 f303 	lsr.w	r3, r1, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f9ca 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	08002ebc 	.word	0x08002ebc
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ab8:	b08f      	sub	sp, #60	; 0x3c
 8001aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001acc:	4b62      	ldr	r3, [pc, #392]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d007      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x3a>
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 80b2 	bne.w	8001c46 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ae4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001ae6:	e0b1      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae8:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aec:	e0ae      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aee:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af8:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d04e      	beq.n	8001ba2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b04:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	f04f 0400 	mov.w	r4, #0
 8001b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	ea01 0103 	and.w	r1, r1, r3
 8001b1a:	ea02 0204 	and.w	r2, r2, r4
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4614      	mov	r4, r2
 8001b22:	0160      	lsls	r0, r4, #5
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24
 8001b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b28:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24
 8001b2e:	015b      	lsls	r3, r3, #5
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001b36:	1a5b      	subs	r3, r3, r1
 8001b38:	eb64 0402 	sbc.w	r4, r4, r2
 8001b3c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001b40:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001b44:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001b48:	ebb8 0803 	subs.w	r8, r8, r3
 8001b4c:	eb69 0904 	sbc.w	r9, r9, r4
 8001b50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b68:	eb18 0801 	adds.w	r8, r8, r1
 8001b6c:	eb49 0902 	adc.w	r9, r9, r2
 8001b70:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	f7fe fb17 	bl	80001c8 <__aeabi_uldivmod>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba0:	e043      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	099b      	lsrs	r3, r3, #6
 8001ba8:	f04f 0400 	mov.w	r4, #0
 8001bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	ea01 0103 	and.w	r1, r1, r3
 8001bb8:	ea02 0204 	and.w	r2, r2, r4
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	0160      	lsls	r0, r4, #5
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	015b      	lsls	r3, r3, #5
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bd4:	1a5b      	subs	r3, r3, r1
 8001bd6:	eb64 0402 	sbc.w	r4, r4, r2
 8001bda:	01a6      	lsls	r6, r4, #6
 8001bdc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001be0:	019d      	lsls	r5, r3, #6
 8001be2:	1aed      	subs	r5, r5, r3
 8001be4:	eb66 0604 	sbc.w	r6, r6, r4
 8001be8:	00f3      	lsls	r3, r6, #3
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	00eb      	lsls	r3, r5, #3
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001bfc:	186d      	adds	r5, r5, r1
 8001bfe:	eb46 0602 	adc.w	r6, r6, r2
 8001c02:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001c06:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001c0a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001c0e:	4655      	mov	r5, sl
 8001c10:	465e      	mov	r6, fp
 8001c12:	4628      	mov	r0, r5
 8001c14:	4631      	mov	r1, r6
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	f04f 0400 	mov.w	r4, #0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4623      	mov	r3, r4
 8001c20:	f7fe fad2 	bl	80001c8 <__aeabi_uldivmod>
 8001c24:	4603      	mov	r3, r0
 8001c26:	460c      	mov	r4, r1
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	3301      	adds	r3, #1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c44:	e002      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	373c      	adds	r7, #60	; 0x3c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4601      	mov	r1, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08002ecc 	.word	0x08002ecc

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4601      	mov	r1, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08002ecc 	.word	0x08002ecc

08001ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe ff96 	bl	8000c24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 f9b8 	bl	8002080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_TIM_PWM_Start+0x24>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e022      	b.n	8001dd6 <HAL_TIM_PWM_Start+0x6a>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d109      	bne.n	8001daa <HAL_TIM_PWM_Start+0x3e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	e015      	b.n	8001dd6 <HAL_TIM_PWM_Start+0x6a>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d109      	bne.n	8001dc4 <HAL_TIM_PWM_Start+0x58>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e008      	b.n	8001dd6 <HAL_TIM_PWM_Start+0x6a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07c      	b.n	8001ed8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d104      	bne.n	8001dee <HAL_TIM_PWM_Start+0x82>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dec:	e013      	b.n	8001e16 <HAL_TIM_PWM_Start+0xaa>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d104      	bne.n	8001dfe <HAL_TIM_PWM_Start+0x92>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dfc:	e00b      	b.n	8001e16 <HAL_TIM_PWM_Start+0xaa>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d104      	bne.n	8001e0e <HAL_TIM_PWM_Start+0xa2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e0c:	e003      	b.n	8001e16 <HAL_TIM_PWM_Start+0xaa>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fb7e 	bl	8002520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <HAL_TIM_PWM_Start+0x174>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_TIM_PWM_Start+0xcc>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2c      	ldr	r2, [pc, #176]	; (8001ee4 <HAL_TIM_PWM_Start+0x178>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_TIM_PWM_Start+0xd0>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_TIM_PWM_Start+0xd2>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a22      	ldr	r2, [pc, #136]	; (8001ee0 <HAL_TIM_PWM_Start+0x174>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e64:	d01d      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <HAL_TIM_PWM_Start+0x17c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d018      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_TIM_PWM_Start+0x180>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_TIM_PWM_Start+0x184>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_TIM_PWM_Start+0x178>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_TIM_PWM_Start+0x188>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <HAL_TIM_PWM_Start+0x18c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d111      	bne.n	8001ec6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d010      	beq.n	8001ed6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	e007      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	6812      	ldr	r2, [r2, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40010400 	.word	0x40010400
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40001800 	.word	0x40001800

08001efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0ae      	b.n	8002078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	f200 809f 	bhi.w	8002068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f2a:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	08001f65 	.word	0x08001f65
 8001f34:	08002069 	.word	0x08002069
 8001f38:	08002069 	.word	0x08002069
 8001f3c:	08002069 	.word	0x08002069
 8001f40:	08001fa5 	.word	0x08001fa5
 8001f44:	08002069 	.word	0x08002069
 8001f48:	08002069 	.word	0x08002069
 8001f4c:	08002069 	.word	0x08002069
 8001f50:	08001fe7 	.word	0x08001fe7
 8001f54:	08002069 	.word	0x08002069
 8001f58:	08002069 	.word	0x08002069
 8001f5c:	08002069 	.word	0x08002069
 8001f60:	08002027 	.word	0x08002027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f928 	bl	80021c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	6992      	ldr	r2, [r2, #24]
 8001f7a:	f042 0208 	orr.w	r2, r2, #8
 8001f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	6992      	ldr	r2, [r2, #24]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	6991      	ldr	r1, [r2, #24]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	6912      	ldr	r2, [r2, #16]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	619a      	str	r2, [r3, #24]
      break;
 8001fa2:	e064      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f978 	bl	80022a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	6992      	ldr	r2, [r2, #24]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	6992      	ldr	r2, [r2, #24]
 8001fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	6991      	ldr	r1, [r2, #24]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	6912      	ldr	r2, [r2, #16]
 8001fde:	0212      	lsls	r2, r2, #8
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	619a      	str	r2, [r3, #24]
      break;
 8001fe4:	e043      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f9cd 	bl	800238c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	69d2      	ldr	r2, [r2, #28]
 8001ffc:	f042 0208 	orr.w	r2, r2, #8
 8002000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	69d2      	ldr	r2, [r2, #28]
 800200c:	f022 0204 	bic.w	r2, r2, #4
 8002010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	69d1      	ldr	r1, [r2, #28]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	6912      	ldr	r2, [r2, #16]
 8002020:	430a      	orrs	r2, r1
 8002022:	61da      	str	r2, [r3, #28]
      break;
 8002024:	e023      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fa21 	bl	8002474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	69d2      	ldr	r2, [r2, #28]
 800203c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	69d2      	ldr	r2, [r2, #28]
 800204c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	69d1      	ldr	r1, [r2, #28]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	6912      	ldr	r2, [r2, #16]
 8002060:	0212      	lsls	r2, r2, #8
 8002062:	430a      	orrs	r2, r1
 8002064:	61da      	str	r2, [r3, #28]
      break;
 8002066:	e002      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
      break;
 800206c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <TIM_Base_SetConfig+0x114>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d00f      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <TIM_Base_SetConfig+0x118>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d00b      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3c      	ldr	r2, [pc, #240]	; (800219c <TIM_Base_SetConfig+0x11c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d007      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3b      	ldr	r2, [pc, #236]	; (80021a0 <TIM_Base_SetConfig+0x120>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d108      	bne.n	80020d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a2f      	ldr	r2, [pc, #188]	; (8002194 <TIM_Base_SetConfig+0x114>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d02b      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d027      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2c      	ldr	r2, [pc, #176]	; (8002198 <TIM_Base_SetConfig+0x118>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d023      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	; (800219c <TIM_Base_SetConfig+0x11c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <TIM_Base_SetConfig+0x120>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01b      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a29      	ldr	r2, [pc, #164]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d017      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a28      	ldr	r2, [pc, #160]	; (80021a8 <TIM_Base_SetConfig+0x128>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a27      	ldr	r2, [pc, #156]	; (80021ac <TIM_Base_SetConfig+0x12c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00f      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <TIM_Base_SetConfig+0x130>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <TIM_Base_SetConfig+0x134>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <TIM_Base_SetConfig+0x138>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a23      	ldr	r2, [pc, #140]	; (80021bc <TIM_Base_SetConfig+0x13c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <TIM_Base_SetConfig+0x114>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <TIM_Base_SetConfig+0xf8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <TIM_Base_SetConfig+0x124>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	615a      	str	r2, [r3, #20]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40010000 	.word	0x40010000
 8002198:	40000400 	.word	0x40000400
 800219c:	40000800 	.word	0x40000800
 80021a0:	40000c00 	.word	0x40000c00
 80021a4:	40010400 	.word	0x40010400
 80021a8:	40014000 	.word	0x40014000
 80021ac:	40014400 	.word	0x40014400
 80021b0:	40014800 	.word	0x40014800
 80021b4:	40001800 	.word	0x40001800
 80021b8:	40001c00 	.word	0x40001c00
 80021bc:	40002000 	.word	0x40002000

080021c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f023 0201 	bic.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 0302 	bic.w	r3, r3, #2
 8002208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a20      	ldr	r2, [pc, #128]	; (8002298 <TIM_OC1_SetConfig+0xd8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_OC1_SetConfig+0x64>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <TIM_OC1_SetConfig+0xdc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10c      	bne.n	800223e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0308 	bic.w	r3, r3, #8
 800222a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a15      	ldr	r2, [pc, #84]	; (8002298 <TIM_OC1_SetConfig+0xd8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d003      	beq.n	800224e <TIM_OC1_SetConfig+0x8e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <TIM_OC1_SetConfig+0xdc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d111      	bne.n	8002272 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800225c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	621a      	str	r2, [r3, #32]
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40010000 	.word	0x40010000
 800229c:	40010400 	.word	0x40010400

080022a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f023 0210 	bic.w	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f023 0320 	bic.w	r3, r3, #32
 80022ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a22      	ldr	r2, [pc, #136]	; (8002384 <TIM_OC2_SetConfig+0xe4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d003      	beq.n	8002308 <TIM_OC2_SetConfig+0x68>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a21      	ldr	r2, [pc, #132]	; (8002388 <TIM_OC2_SetConfig+0xe8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d10d      	bne.n	8002324 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800230e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <TIM_OC2_SetConfig+0xe4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d003      	beq.n	8002334 <TIM_OC2_SetConfig+0x94>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a16      	ldr	r2, [pc, #88]	; (8002388 <TIM_OC2_SetConfig+0xe8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d113      	bne.n	800235c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800233a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	621a      	str	r2, [r3, #32]
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40010000 	.word	0x40010000
 8002388:	40010400 	.word	0x40010400

0800238c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	4313      	orrs	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a21      	ldr	r2, [pc, #132]	; (800246c <TIM_OC3_SetConfig+0xe0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d003      	beq.n	80023f2 <TIM_OC3_SetConfig+0x66>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a20      	ldr	r2, [pc, #128]	; (8002470 <TIM_OC3_SetConfig+0xe4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10d      	bne.n	800240e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800240c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a16      	ldr	r2, [pc, #88]	; (800246c <TIM_OC3_SetConfig+0xe0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d003      	beq.n	800241e <TIM_OC3_SetConfig+0x92>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a15      	ldr	r2, [pc, #84]	; (8002470 <TIM_OC3_SetConfig+0xe4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d113      	bne.n	8002446 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800242c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	621a      	str	r2, [r3, #32]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40010000 	.word	0x40010000
 8002470:	40010400 	.word	0x40010400

08002474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	031b      	lsls	r3, r3, #12
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <TIM_OC4_SetConfig+0xa4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d003      	beq.n	80024dc <TIM_OC4_SetConfig+0x68>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a11      	ldr	r2, [pc, #68]	; (800251c <TIM_OC4_SetConfig+0xa8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d109      	bne.n	80024f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000
 800251c:	40010400 	.word	0x40010400

08002520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2201      	movs	r2, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	43db      	mvns	r3, r3
 8002542:	401a      	ands	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	431a      	orrs	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	621a      	str	r2, [r3, #32]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002580:	2302      	movs	r3, #2
 8002582:	e05a      	b.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a21      	ldr	r2, [pc, #132]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d022      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d0:	d01d      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d018      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00e      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a18      	ldr	r2, [pc, #96]	; (8002658 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a17      	ldr	r2, [pc, #92]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10c      	bne.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800
 8002654:	40000c00 	.word	0x40000c00
 8002658:	40010400 	.word	0x40010400
 800265c:	40014000 	.word	0x40014000
 8002660:	40001800 	.word	0x40001800

08002664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e03f      	b.n	80026f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fb26 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	68d2      	ldr	r2, [r2, #12]
 80026a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f939 	bl	8002920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	6912      	ldr	r2, [r2, #16]
 80026b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	6952      	ldr	r2, [r2, #20]
 80026c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	68d2      	ldr	r2, [r2, #12]
 80026d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b08a      	sub	sp, #40	; 0x28
 8002702:	af02      	add	r7, sp, #8
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	4613      	mov	r3, r2
 800270c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	f040 808c 	bne.w	8002838 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_UART_Receive+0x2e>
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e084      	b.n	800283a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_UART_Receive+0x40>
 800273a:	2302      	movs	r3, #2
 800273c:	e07d      	b.n	800283a <HAL_UART_Receive+0x13c>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2222      	movs	r2, #34	; 0x22
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275a:	f7fe fba9 	bl	8000eb0 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	88fa      	ldrh	r2, [r7, #6]
 8002764:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002774:	d108      	bne.n	8002788 <HAL_UART_Receive+0x8a>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	e003      	b.n	8002790 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002798:	e043      	b.n	8002822 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2120      	movs	r1, #32
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f84c 	bl	8002842 <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e042      	b.n	800283a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	3302      	adds	r3, #2
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e01f      	b.n	8002814 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027dc:	d007      	beq.n	80027ee <HAL_UART_Receive+0xf0>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_UART_Receive+0xfe>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e008      	b.n	800280e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002808:	b2da      	uxtb	r2, r3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1b6      	bne.n	800279a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b090      	sub	sp, #64	; 0x40
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002852:	e050      	b.n	80028f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d04c      	beq.n	80028f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800285c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <UART_WaitOnFlagUntilTimeout+0x30>
 8002862:	f7fe fb25 	bl	8000eb0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800286e:	429a      	cmp	r2, r3
 8002870:	d941      	bls.n	80028f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002892:	637a      	str	r2, [r7, #52]	; 0x34
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e5      	bne.n	8002872 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3314      	adds	r3, #20
 80028ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	613b      	str	r3, [r7, #16]
   return(result);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028c6:	623a      	str	r2, [r7, #32]
 80028c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	69f9      	ldr	r1, [r7, #28]
 80028cc:	6a3a      	ldr	r2, [r7, #32]
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e5      	bne.n	80028a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e00f      	b.n	8002916 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	429a      	cmp	r2, r3
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	429a      	cmp	r2, r3
 8002912:	d09f      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3740      	adds	r7, #64	; 0x40
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002924:	b091      	sub	sp, #68	; 0x44
 8002926:	af00      	add	r7, sp, #0
 8002928:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	431a      	orrs	r2, r3
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	431a      	orrs	r2, r3
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	4313      	orrs	r3, r2
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002966:	f022 020c 	bic.w	r2, r2, #12
 800296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296c:	4313      	orrs	r3, r2
 800296e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4bba      	ldr	r3, [pc, #744]	; (8002c74 <UART_SetConfig+0x354>)
 800298c:	429a      	cmp	r2, r3
 800298e:	d004      	beq.n	800299a <UART_SetConfig+0x7a>
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4bb8      	ldr	r3, [pc, #736]	; (8002c78 <UART_SetConfig+0x358>)
 8002996:	429a      	cmp	r2, r3
 8002998:	d103      	bne.n	80029a2 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800299a:	f7ff f983 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 800299e:	63f8      	str	r0, [r7, #60]	; 0x3c
 80029a0:	e002      	b.n	80029a8 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029a2:	f7ff f96b 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80029a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b0:	f040 80a7 	bne.w	8002b02 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029bc:	4619      	mov	r1, r3
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4614      	mov	r4, r2
 80029c6:	18db      	adds	r3, r3, r3
 80029c8:	eb44 0404 	adc.w	r4, r4, r4
 80029cc:	185b      	adds	r3, r3, r1
 80029ce:	eb44 0402 	adc.w	r4, r4, r2
 80029d2:	00e0      	lsls	r0, r4, #3
 80029d4:	6178      	str	r0, [r7, #20]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80029dc:	6178      	str	r0, [r7, #20]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80029e6:	185d      	adds	r5, r3, r1
 80029e8:	eb44 0602 	adc.w	r6, r4, r2
 80029ec:	4628      	mov	r0, r5
 80029ee:	4631      	mov	r1, r6
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f04f 0400 	mov.w	r4, #0
 80029f8:	18db      	adds	r3, r3, r3
 80029fa:	eb44 0404 	adc.w	r4, r4, r4
 80029fe:	461a      	mov	r2, r3
 8002a00:	4623      	mov	r3, r4
 8002a02:	f7fd fbe1 	bl	80001c8 <__aeabi_uldivmod>
 8002a06:	4603      	mov	r3, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b9b      	ldr	r3, [pc, #620]	; (8002c7c <UART_SetConfig+0x35c>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	011e      	lsls	r6, r3, #4
 8002a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	18db      	adds	r3, r3, r3
 8002a24:	eb44 0404 	adc.w	r4, r4, r4
 8002a28:	185b      	adds	r3, r3, r1
 8002a2a:	eb44 0402 	adc.w	r4, r4, r2
 8002a2e:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8002a32:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8002a36:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8002a3a:	4653      	mov	r3, sl
 8002a3c:	465c      	mov	r4, fp
 8002a3e:	eb13 0a01 	adds.w	sl, r3, r1
 8002a42:	eb44 0b02 	adc.w	fp, r4, r2
 8002a46:	4650      	mov	r0, sl
 8002a48:	4659      	mov	r1, fp
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f04f 0400 	mov.w	r4, #0
 8002a52:	18db      	adds	r3, r3, r3
 8002a54:	eb44 0404 	adc.w	r4, r4, r4
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	f7fd fbb4 	bl	80001c8 <__aeabi_uldivmod>
 8002a60:	4603      	mov	r3, r0
 8002a62:	460c      	mov	r4, r1
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b85      	ldr	r3, [pc, #532]	; (8002c7c <UART_SetConfig+0x35c>)
 8002a68:	fba3 1302 	umull	r1, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	2164      	movs	r1, #100	; 0x64
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	3332      	adds	r3, #50	; 0x32
 8002a7a:	4a80      	ldr	r2, [pc, #512]	; (8002c7c <UART_SetConfig+0x35c>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a88:	441e      	add	r6, r3
 8002a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	18db      	adds	r3, r3, r3
 8002a98:	eb44 0404 	adc.w	r4, r4, r4
 8002a9c:	185b      	adds	r3, r3, r1
 8002a9e:	eb44 0402 	adc.w	r4, r4, r2
 8002aa2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002aa6:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002aaa:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002aae:	4643      	mov	r3, r8
 8002ab0:	464c      	mov	r4, r9
 8002ab2:	eb13 0801 	adds.w	r8, r3, r1
 8002ab6:	eb44 0902 	adc.w	r9, r4, r2
 8002aba:	4640      	mov	r0, r8
 8002abc:	4649      	mov	r1, r9
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f04f 0400 	mov.w	r4, #0
 8002ac6:	18db      	adds	r3, r3, r3
 8002ac8:	eb44 0404 	adc.w	r4, r4, r4
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	f7fd fb7a 	bl	80001c8 <__aeabi_uldivmod>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b68      	ldr	r3, [pc, #416]	; (8002c7c <UART_SetConfig+0x35c>)
 8002adc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	2164      	movs	r1, #100	; 0x64
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	3332      	adds	r3, #50	; 0x32
 8002aee:	4a63      	ldr	r2, [pc, #396]	; (8002c7c <UART_SetConfig+0x35c>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	095b      	lsrs	r3, r3, #5
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	4433      	add	r3, r6
 8002afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002afe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b00:	e0b3      	b.n	8002c6a <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4614      	mov	r4, r2
 8002b14:	18db      	adds	r3, r3, r3
 8002b16:	eb44 0404 	adc.w	r4, r4, r4
 8002b1a:	185b      	adds	r3, r3, r1
 8002b1c:	eb44 0402 	adc.w	r4, r4, r2
 8002b20:	00e6      	lsls	r6, r4, #3
 8002b22:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8002b26:	00dd      	lsls	r5, r3, #3
 8002b28:	462b      	mov	r3, r5
 8002b2a:	4634      	mov	r4, r6
 8002b2c:	185d      	adds	r5, r3, r1
 8002b2e:	eb44 0602 	adc.w	r6, r4, r2
 8002b32:	4628      	mov	r0, r5
 8002b34:	4631      	mov	r1, r6
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f04f 0400 	mov.w	r4, #0
 8002b3e:	00a5      	lsls	r5, r4, #2
 8002b40:	62fd      	str	r5, [r7, #44]	; 0x2c
 8002b42:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8002b44:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8002b48:	62fd      	str	r5, [r7, #44]	; 0x2c
 8002b4a:	009c      	lsls	r4, r3, #2
 8002b4c:	62bc      	str	r4, [r7, #40]	; 0x28
 8002b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b52:	f7fd fb39 	bl	80001c8 <__aeabi_uldivmod>
 8002b56:	4603      	mov	r3, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <UART_SetConfig+0x35c>)
 8002b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	011d      	lsls	r5, r3, #4
 8002b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4614      	mov	r4, r2
 8002b72:	18db      	adds	r3, r3, r3
 8002b74:	eb44 0404 	adc.w	r4, r4, r4
 8002b78:	185b      	adds	r3, r3, r1
 8002b7a:	eb44 0402 	adc.w	r4, r4, r2
 8002b7e:	00e0      	lsls	r0, r4, #3
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	00d8      	lsls	r0, r3, #3
 8002b8c:	60b8      	str	r0, [r7, #8]
 8002b8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b92:	eb13 0801 	adds.w	r8, r3, r1
 8002b96:	eb44 0902 	adc.w	r9, r4, r2
 8002b9a:	4640      	mov	r0, r8
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f04f 0400 	mov.w	r4, #0
 8002ba6:	00a6      	lsls	r6, r4, #2
 8002ba8:	627e      	str	r6, [r7, #36]	; 0x24
 8002baa:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8002bac:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002bb0:	627e      	str	r6, [r7, #36]	; 0x24
 8002bb2:	009c      	lsls	r4, r3, #2
 8002bb4:	623c      	str	r4, [r7, #32]
 8002bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bba:	f7fd fb05 	bl	80001c8 <__aeabi_uldivmod>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <UART_SetConfig+0x35c>)
 8002bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2164      	movs	r1, #100	; 0x64
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	4a28      	ldr	r2, [pc, #160]	; (8002c7c <UART_SetConfig+0x35c>)
 8002bda:	fba2 1303 	umull	r1, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	441d      	add	r5, r3
 8002be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be8:	4619      	mov	r1, r3
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	18db      	adds	r3, r3, r3
 8002bf4:	eb44 0404 	adc.w	r4, r4, r4
 8002bf8:	185b      	adds	r3, r3, r1
 8002bfa:	eb44 0402 	adc.w	r4, r4, r2
 8002bfe:	00e0      	lsls	r0, r4, #3
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	00d8      	lsls	r0, r3, #3
 8002c0c:	6038      	str	r0, [r7, #0]
 8002c0e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002c12:	eb13 0801 	adds.w	r8, r3, r1
 8002c16:	eb44 0902 	adc.w	r9, r4, r2
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f04f 0400 	mov.w	r4, #0
 8002c26:	00a6      	lsls	r6, r4, #2
 8002c28:	61fe      	str	r6, [r7, #28]
 8002c2a:	69fe      	ldr	r6, [r7, #28]
 8002c2c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002c30:	61fe      	str	r6, [r7, #28]
 8002c32:	009c      	lsls	r4, r3, #2
 8002c34:	61bc      	str	r4, [r7, #24]
 8002c36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c3a:	f7fd fac5 	bl	80001c8 <__aeabi_uldivmod>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <UART_SetConfig+0x35c>)
 8002c46:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2164      	movs	r1, #100	; 0x64
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	3332      	adds	r3, #50	; 0x32
 8002c58:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <UART_SetConfig+0x35c>)
 8002c5a:	fba2 1303 	umull	r1, r3, r2, r3
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	442b      	add	r3, r5
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	6093      	str	r3, [r2, #8]
}
 8002c6a:	bf00      	nop
 8002c6c:	3744      	adds	r7, #68	; 0x44
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c74:	40011000 	.word	0x40011000
 8002c78:	40011400 	.word	0x40011400
 8002c7c:	51eb851f 	.word	0x51eb851f

08002c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c86:	490e      	ldr	r1, [pc, #56]	; (8002cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c8c:	e002      	b.n	8002c94 <LoopCopyDataInit>

08002c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c92:	3304      	adds	r3, #4

08002c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c98:	d3f9      	bcc.n	8002c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c9c:	4c0b      	ldr	r4, [pc, #44]	; (8002ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca0:	e001      	b.n	8002ca6 <LoopFillZerobss>

08002ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca4:	3204      	adds	r2, #4

08002ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca8:	d3fb      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002caa:	f7fe f889 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cae:	f000 f815 	bl	8002cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb2:	f7fd fdd1 	bl	8000858 <main>
  bx  lr    
 8002cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cb8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002cc4:	08002ff0 	.word	0x08002ff0
  ldr r2, =_sbss
 8002cc8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ccc:	200002dc 	.word	0x200002dc

08002cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd0:	e7fe      	b.n	8002cd0 <ADC_IRQHandler>

08002cd2 <atoi>:
 8002cd2:	220a      	movs	r2, #10
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f000 b8ad 	b.w	8002e34 <strtol>
	...

08002cdc <__libc_init_array>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	4e0d      	ldr	r6, [pc, #52]	; (8002d14 <__libc_init_array+0x38>)
 8002ce0:	4c0d      	ldr	r4, [pc, #52]	; (8002d18 <__libc_init_array+0x3c>)
 8002ce2:	1ba4      	subs	r4, r4, r6
 8002ce4:	10a4      	asrs	r4, r4, #2
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	42a5      	cmp	r5, r4
 8002cea:	d109      	bne.n	8002d00 <__libc_init_array+0x24>
 8002cec:	4e0b      	ldr	r6, [pc, #44]	; (8002d1c <__libc_init_array+0x40>)
 8002cee:	4c0c      	ldr	r4, [pc, #48]	; (8002d20 <__libc_init_array+0x44>)
 8002cf0:	f000 f8d8 	bl	8002ea4 <_init>
 8002cf4:	1ba4      	subs	r4, r4, r6
 8002cf6:	10a4      	asrs	r4, r4, #2
 8002cf8:	2500      	movs	r5, #0
 8002cfa:	42a5      	cmp	r5, r4
 8002cfc:	d105      	bne.n	8002d0a <__libc_init_array+0x2e>
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
 8002d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d04:	4798      	blx	r3
 8002d06:	3501      	adds	r5, #1
 8002d08:	e7ee      	b.n	8002ce8 <__libc_init_array+0xc>
 8002d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d0e:	4798      	blx	r3
 8002d10:	3501      	adds	r5, #1
 8002d12:	e7f2      	b.n	8002cfa <__libc_init_array+0x1e>
 8002d14:	08002fe8 	.word	0x08002fe8
 8002d18:	08002fe8 	.word	0x08002fe8
 8002d1c:	08002fe8 	.word	0x08002fe8
 8002d20:	08002fec 	.word	0x08002fec

08002d24 <memset>:
 8002d24:	4402      	add	r2, r0
 8002d26:	4603      	mov	r3, r0
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <memset+0xa>
 8002d2c:	4770      	bx	lr
 8002d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d32:	e7f9      	b.n	8002d28 <memset+0x4>

08002d34 <_strtol_l.isra.0>:
 8002d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d38:	4680      	mov	r8, r0
 8002d3a:	4689      	mov	r9, r1
 8002d3c:	4692      	mov	sl, r2
 8002d3e:	461f      	mov	r7, r3
 8002d40:	468b      	mov	fp, r1
 8002d42:	465d      	mov	r5, fp
 8002d44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d4a:	f000 f889 	bl	8002e60 <__locale_ctype_ptr_l>
 8002d4e:	4420      	add	r0, r4
 8002d50:	7846      	ldrb	r6, [r0, #1]
 8002d52:	f016 0608 	ands.w	r6, r6, #8
 8002d56:	d10b      	bne.n	8002d70 <_strtol_l.isra.0+0x3c>
 8002d58:	2c2d      	cmp	r4, #45	; 0x2d
 8002d5a:	d10b      	bne.n	8002d74 <_strtol_l.isra.0+0x40>
 8002d5c:	782c      	ldrb	r4, [r5, #0]
 8002d5e:	2601      	movs	r6, #1
 8002d60:	f10b 0502 	add.w	r5, fp, #2
 8002d64:	b167      	cbz	r7, 8002d80 <_strtol_l.isra.0+0x4c>
 8002d66:	2f10      	cmp	r7, #16
 8002d68:	d114      	bne.n	8002d94 <_strtol_l.isra.0+0x60>
 8002d6a:	2c30      	cmp	r4, #48	; 0x30
 8002d6c:	d00a      	beq.n	8002d84 <_strtol_l.isra.0+0x50>
 8002d6e:	e011      	b.n	8002d94 <_strtol_l.isra.0+0x60>
 8002d70:	46ab      	mov	fp, r5
 8002d72:	e7e6      	b.n	8002d42 <_strtol_l.isra.0+0xe>
 8002d74:	2c2b      	cmp	r4, #43	; 0x2b
 8002d76:	bf04      	itt	eq
 8002d78:	782c      	ldrbeq	r4, [r5, #0]
 8002d7a:	f10b 0502 	addeq.w	r5, fp, #2
 8002d7e:	e7f1      	b.n	8002d64 <_strtol_l.isra.0+0x30>
 8002d80:	2c30      	cmp	r4, #48	; 0x30
 8002d82:	d127      	bne.n	8002dd4 <_strtol_l.isra.0+0xa0>
 8002d84:	782b      	ldrb	r3, [r5, #0]
 8002d86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002d8a:	2b58      	cmp	r3, #88	; 0x58
 8002d8c:	d14b      	bne.n	8002e26 <_strtol_l.isra.0+0xf2>
 8002d8e:	786c      	ldrb	r4, [r5, #1]
 8002d90:	2710      	movs	r7, #16
 8002d92:	3502      	adds	r5, #2
 8002d94:	2e00      	cmp	r6, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002d9c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002da0:	2200      	movs	r2, #0
 8002da2:	fbb1 fef7 	udiv	lr, r1, r7
 8002da6:	4610      	mov	r0, r2
 8002da8:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002dac:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002db0:	2b09      	cmp	r3, #9
 8002db2:	d811      	bhi.n	8002dd8 <_strtol_l.isra.0+0xa4>
 8002db4:	461c      	mov	r4, r3
 8002db6:	42a7      	cmp	r7, r4
 8002db8:	dd1d      	ble.n	8002df6 <_strtol_l.isra.0+0xc2>
 8002dba:	1c53      	adds	r3, r2, #1
 8002dbc:	d007      	beq.n	8002dce <_strtol_l.isra.0+0x9a>
 8002dbe:	4586      	cmp	lr, r0
 8002dc0:	d316      	bcc.n	8002df0 <_strtol_l.isra.0+0xbc>
 8002dc2:	d101      	bne.n	8002dc8 <_strtol_l.isra.0+0x94>
 8002dc4:	45a4      	cmp	ip, r4
 8002dc6:	db13      	blt.n	8002df0 <_strtol_l.isra.0+0xbc>
 8002dc8:	fb00 4007 	mla	r0, r0, r7, r4
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002dd2:	e7eb      	b.n	8002dac <_strtol_l.isra.0+0x78>
 8002dd4:	270a      	movs	r7, #10
 8002dd6:	e7dd      	b.n	8002d94 <_strtol_l.isra.0+0x60>
 8002dd8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002ddc:	2b19      	cmp	r3, #25
 8002dde:	d801      	bhi.n	8002de4 <_strtol_l.isra.0+0xb0>
 8002de0:	3c37      	subs	r4, #55	; 0x37
 8002de2:	e7e8      	b.n	8002db6 <_strtol_l.isra.0+0x82>
 8002de4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002de8:	2b19      	cmp	r3, #25
 8002dea:	d804      	bhi.n	8002df6 <_strtol_l.isra.0+0xc2>
 8002dec:	3c57      	subs	r4, #87	; 0x57
 8002dee:	e7e2      	b.n	8002db6 <_strtol_l.isra.0+0x82>
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295
 8002df4:	e7eb      	b.n	8002dce <_strtol_l.isra.0+0x9a>
 8002df6:	1c53      	adds	r3, r2, #1
 8002df8:	d108      	bne.n	8002e0c <_strtol_l.isra.0+0xd8>
 8002dfa:	2322      	movs	r3, #34	; 0x22
 8002dfc:	f8c8 3000 	str.w	r3, [r8]
 8002e00:	4608      	mov	r0, r1
 8002e02:	f1ba 0f00 	cmp.w	sl, #0
 8002e06:	d107      	bne.n	8002e18 <_strtol_l.isra.0+0xe4>
 8002e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	b106      	cbz	r6, 8002e10 <_strtol_l.isra.0+0xdc>
 8002e0e:	4240      	negs	r0, r0
 8002e10:	f1ba 0f00 	cmp.w	sl, #0
 8002e14:	d00c      	beq.n	8002e30 <_strtol_l.isra.0+0xfc>
 8002e16:	b122      	cbz	r2, 8002e22 <_strtol_l.isra.0+0xee>
 8002e18:	3d01      	subs	r5, #1
 8002e1a:	f8ca 5000 	str.w	r5, [sl]
 8002e1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e22:	464d      	mov	r5, r9
 8002e24:	e7f9      	b.n	8002e1a <_strtol_l.isra.0+0xe6>
 8002e26:	2430      	movs	r4, #48	; 0x30
 8002e28:	2f00      	cmp	r7, #0
 8002e2a:	d1b3      	bne.n	8002d94 <_strtol_l.isra.0+0x60>
 8002e2c:	2708      	movs	r7, #8
 8002e2e:	e7b1      	b.n	8002d94 <_strtol_l.isra.0+0x60>
 8002e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e34 <strtol>:
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <strtol+0x24>)
 8002e36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e38:	681c      	ldr	r4, [r3, #0]
 8002e3a:	4d08      	ldr	r5, [pc, #32]	; (8002e5c <strtol+0x28>)
 8002e3c:	6a23      	ldr	r3, [r4, #32]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bf08      	it	eq
 8002e42:	462b      	moveq	r3, r5
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	460a      	mov	r2, r1
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff ff71 	bl	8002d34 <_strtol_l.isra.0>
 8002e52:	b003      	add	sp, #12
 8002e54:	bd30      	pop	{r4, r5, pc}
 8002e56:	bf00      	nop
 8002e58:	2000000c 	.word	0x2000000c
 8002e5c:	20000070 	.word	0x20000070

08002e60 <__locale_ctype_ptr_l>:
 8002e60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002e64:	4770      	bx	lr

08002e66 <__ascii_mbtowc>:
 8002e66:	b082      	sub	sp, #8
 8002e68:	b901      	cbnz	r1, 8002e6c <__ascii_mbtowc+0x6>
 8002e6a:	a901      	add	r1, sp, #4
 8002e6c:	b142      	cbz	r2, 8002e80 <__ascii_mbtowc+0x1a>
 8002e6e:	b14b      	cbz	r3, 8002e84 <__ascii_mbtowc+0x1e>
 8002e70:	7813      	ldrb	r3, [r2, #0]
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	7812      	ldrb	r2, [r2, #0]
 8002e76:	1c10      	adds	r0, r2, #0
 8002e78:	bf18      	it	ne
 8002e7a:	2001      	movne	r0, #1
 8002e7c:	b002      	add	sp, #8
 8002e7e:	4770      	bx	lr
 8002e80:	4610      	mov	r0, r2
 8002e82:	e7fb      	b.n	8002e7c <__ascii_mbtowc+0x16>
 8002e84:	f06f 0001 	mvn.w	r0, #1
 8002e88:	e7f8      	b.n	8002e7c <__ascii_mbtowc+0x16>

08002e8a <__ascii_wctomb>:
 8002e8a:	b149      	cbz	r1, 8002ea0 <__ascii_wctomb+0x16>
 8002e8c:	2aff      	cmp	r2, #255	; 0xff
 8002e8e:	bf85      	ittet	hi
 8002e90:	238a      	movhi	r3, #138	; 0x8a
 8002e92:	6003      	strhi	r3, [r0, #0]
 8002e94:	700a      	strbls	r2, [r1, #0]
 8002e96:	f04f 30ff 	movhi.w	r0, #4294967295
 8002e9a:	bf98      	it	ls
 8002e9c:	2001      	movls	r0, #1
 8002e9e:	4770      	bx	lr
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	4770      	bx	lr

08002ea4 <_init>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr

08002eb0 <_fini>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr
