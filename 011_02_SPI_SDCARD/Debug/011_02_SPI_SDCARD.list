
011_02_SPI_SDCARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000024  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  8 .bss          000047a8  20000024  20000024  00020024  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200047cc  200047cc  00020024  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d73c  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e49  00000000  00000000  0002d790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b0  00000000  00000000  0002f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008b8  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005868  00000000  00000000  00030848  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002d01  00000000  00000000  000360b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00038db1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000264c  00000000  00000000  00038e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800386c 	.word	0x0800386c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	0800386c 	.word	0x0800386c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2101      	movs	r1, #1
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <SELECT+0x14>)
 80004e2:	f001 f9bd 	bl	8001860 <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020400 	.word	0x40020400

080004f0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2101      	movs	r1, #1
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <DESELECT+0x14>)
 80004fa:	f001 f9b1 	bl	8001860 <HAL_GPIO_WritePin>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40020400 	.word	0x40020400

08000508 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000512:	bf00      	nop
 8000514:	4808      	ldr	r0, [pc, #32]	; (8000538 <SPI_TxByte+0x30>)
 8000516:	f002 f955 	bl	80027c4 <HAL_SPI_GetState>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	d1f9      	bne.n	8000514 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000520:	1df9      	adds	r1, r7, #7
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	2201      	movs	r2, #1
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <SPI_TxByte+0x30>)
 800052a:	f001 fe71 	bl	8002210 <HAL_SPI_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200026f4 	.word	0x200026f4

0800053c <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000542:	23ff      	movs	r3, #255	; 0xff
 8000544:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800054a:	bf00      	nop
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <SPI_RxByte+0x38>)
 800054e:	f002 f939 	bl	80027c4 <HAL_SPI_GetState>
 8000552:	4603      	mov	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d1f9      	bne.n	800054c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000558:	1dba      	adds	r2, r7, #6
 800055a:	1df9      	adds	r1, r7, #7
 800055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2301      	movs	r3, #1
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <SPI_RxByte+0x38>)
 8000566:	f001 ff8d 	bl	8002484 <HAL_SPI_TransmitReceive>

  return data;
 800056a:	79bb      	ldrb	r3, [r7, #6]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200026f4 	.word	0x200026f4

08000578 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000580:	f7ff ffdc 	bl	800053c <SPI_RxByte>
 8000584:	4603      	mov	r3, r0
 8000586:	461a      	mov	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	701a      	strb	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <SD_ReadyWait+0x34>)
 800059c:	2232      	movs	r2, #50	; 0x32
 800059e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80005a0:	f7ff ffcc 	bl	800053c <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80005a4:	f7ff ffca 	bl	800053c <SPI_RxByte>
 80005a8:	4603      	mov	r3, r0
 80005aa:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2bff      	cmp	r3, #255	; 0xff
 80005b0:	d004      	beq.n	80005bc <SD_ReadyWait+0x28>
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <SD_ReadyWait+0x34>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d1f3      	bne.n	80005a4 <SD_ReadyWait+0x10>

  return res;
 80005bc:	79fb      	ldrb	r3, [r7, #7]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20002754 	.word	0x20002754

080005cc <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80005d2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005d6:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80005d8:	f7ff ff8a 	bl	80004f0 <DESELECT>

  for(int i = 0; i < 10; i++)
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	e005      	b.n	80005ee <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80005e2:	20ff      	movs	r0, #255	; 0xff
 80005e4:	f7ff ff90 	bl	8000508 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	3301      	adds	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	ddf6      	ble.n	80005e2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 80005f4:	f7ff ff70 	bl	80004d8 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800060c:	2395      	movs	r3, #149	; 0x95
 800060e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	e009      	b.n	800062a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000616:	1d3a      	adds	r2, r7, #4
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff72 	bl	8000508 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	2b05      	cmp	r3, #5
 800062e:	ddf2      	ble.n	8000616 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000630:	e002      	b.n	8000638 <SD_PowerOn+0x6c>
  {
    Count--;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	3b01      	subs	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000638:	f7ff ff80 	bl	800053c <SPI_RxByte>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d002      	beq.n	8000648 <SD_PowerOn+0x7c>
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f4      	bne.n	8000632 <SD_PowerOn+0x66>
  }

  DESELECT();
 8000648:	f7ff ff52 	bl	80004f0 <DESELECT>
  SPI_TxByte(0XFF);
 800064c:	20ff      	movs	r0, #255	; 0xff
 800064e:	f7ff ff5b 	bl	8000508 <SPI_TxByte>

  PowerFlag = 1;
 8000652:	4b03      	ldr	r3, [pc, #12]	; (8000660 <SD_PowerOn+0x94>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
}
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000041 	.word	0x20000041

08000664 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <SD_PowerOff+0x14>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000041 	.word	0x20000041

0800067c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <SD_CheckPower+0x14>)
 8000682:	781b      	ldrb	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000041 	.word	0x20000041

08000694 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <SD_RxDataBlock+0x68>)
 80006a0:	220a      	movs	r2, #10
 80006a2:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80006a4:	f7ff ff4a 	bl	800053c <SPI_RxByte>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2bff      	cmp	r3, #255	; 0xff
 80006b0:	d104      	bne.n	80006bc <SD_RxDataBlock+0x28>
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <SD_RxDataBlock+0x68>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f3      	bne.n	80006a4 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	2bfe      	cmp	r3, #254	; 0xfe
 80006c0:	d001      	beq.n	80006c6 <SD_RxDataBlock+0x32>
    return FALSE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e016      	b.n	80006f4 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff53 	bl	8000578 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff4d 	bl	8000578 <SPI_RxBytePtr>
  } while(btr -= 2);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	3b02      	subs	r3, #2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1ed      	bne.n	80006c6 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80006ea:	f7ff ff27 	bl	800053c <SPI_RxByte>
  SPI_RxByte();
 80006ee:	f7ff ff25 	bl	800053c <SPI_RxByte>

  return TRUE;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20002755 	.word	0x20002755

08000700 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000710:	f7ff ff40 	bl	8000594 <SD_ReadyWait>
 8000714:	4603      	mov	r3, r0
 8000716:	2bff      	cmp	r3, #255	; 0xff
 8000718:	d001      	beq.n	800071e <SD_TxDataBlock+0x1e>
    return FALSE;
 800071a:	2300      	movs	r3, #0
 800071c:	e040      	b.n	80007a0 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fef1 	bl	8000508 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	2bfd      	cmp	r3, #253	; 0xfd
 800072a:	d031      	beq.n	8000790 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fee5 	bl	8000508 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	607a      	str	r2, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fede 	bl	8000508 <SPI_TxByte>
    } while (--wc);
 800074c:	7bbb      	ldrb	r3, [r7, #14]
 800074e:	3b01      	subs	r3, #1
 8000750:	73bb      	strb	r3, [r7, #14]
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1eb      	bne.n	8000730 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000758:	f7ff fef0 	bl	800053c <SPI_RxByte>
    SPI_RxByte();
 800075c:	f7ff feee 	bl	800053c <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000760:	e00b      	b.n	800077a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000762:	f7ff feeb 	bl	800053c <SPI_RxByte>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	f003 031f 	and.w	r3, r3, #31
 8000770:	2b05      	cmp	r3, #5
 8000772:	d006      	beq.n	8000782 <SD_TxDataBlock+0x82>
        break;

      i++;
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	3301      	adds	r3, #1
 8000778:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800077a:	7b7b      	ldrb	r3, [r7, #13]
 800077c:	2b40      	cmp	r3, #64	; 0x40
 800077e:	d9f0      	bls.n	8000762 <SD_TxDataBlock+0x62>
 8000780:	e000      	b.n	8000784 <SD_TxDataBlock+0x84>
        break;
 8000782:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000784:	bf00      	nop
 8000786:	f7ff fed9 	bl	800053c <SPI_RxByte>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0fa      	beq.n	8000786 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f003 031f 	and.w	r3, r3, #31
 8000796:	2b05      	cmp	r3, #5
 8000798:	d101      	bne.n	800079e <SD_TxDataBlock+0x9e>
    return TRUE;
 800079a:	2301      	movs	r3, #1
 800079c:	e000      	b.n	80007a0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007b4:	f7ff feee 	bl	8000594 <SD_ReadyWait>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2bff      	cmp	r3, #255	; 0xff
 80007bc:	d001      	beq.n	80007c2 <SD_SendCmd+0x1a>
    return 0xFF;
 80007be:	23ff      	movs	r3, #255	; 0xff
 80007c0:	e040      	b.n	8000844 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fe9f 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	0e1b      	lsrs	r3, r3, #24
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fe99 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	0c1b      	lsrs	r3, r3, #16
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe93 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe8d 	bl	8000508 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe88 	bl	8000508 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b40      	cmp	r3, #64	; 0x40
 8000800:	d101      	bne.n	8000806 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000802:	2395      	movs	r3, #149	; 0x95
 8000804:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b48      	cmp	r3, #72	; 0x48
 800080a:	d101      	bne.n	8000810 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800080c:	2387      	movs	r3, #135	; 0x87
 800080e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fe78 	bl	8000508 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b4c      	cmp	r3, #76	; 0x4c
 800081c:	d101      	bne.n	8000822 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800081e:	f7ff fe8d 	bl	800053c <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000822:	230a      	movs	r3, #10
 8000824:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000826:	f7ff fe89 	bl	800053c <SPI_RxByte>
 800082a:	4603      	mov	r3, r0
 800082c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800082e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da05      	bge.n	8000842 <SD_SendCmd+0x9a>
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	3b01      	subs	r3, #1
 800083a:	73bb      	strb	r3, [r7, #14]
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f1      	bne.n	8000826 <SD_SendCmd+0x7e>

  return res;
 8000842:	7b7b      	ldrb	r3, [r7, #13]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800085c:	2301      	movs	r3, #1
 800085e:	e0d5      	b.n	8000a0c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000860:	4b6c      	ldr	r3, [pc, #432]	; (8000a14 <SD_disk_initialize+0x1c8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d003      	beq.n	8000876 <SD_disk_initialize+0x2a>
    return Stat;
 800086e:	4b69      	ldr	r3, [pc, #420]	; (8000a14 <SD_disk_initialize+0x1c8>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	e0ca      	b.n	8000a0c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000876:	f7ff fea9 	bl	80005cc <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 800087a:	f7ff fe2d 	bl	80004d8 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000882:	2100      	movs	r1, #0
 8000884:	2040      	movs	r0, #64	; 0x40
 8000886:	f7ff ff8f 	bl	80007a8 <SD_SendCmd>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	f040 80a5 	bne.w	80009dc <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000892:	4b61      	ldr	r3, [pc, #388]	; (8000a18 <SD_disk_initialize+0x1cc>)
 8000894:	2264      	movs	r2, #100	; 0x64
 8000896:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000898:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800089c:	2048      	movs	r0, #72	; 0x48
 800089e:	f7ff ff83 	bl	80007a8 <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d158      	bne.n	800095a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e00c      	b.n	80008c8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80008ae:	7bfc      	ldrb	r4, [r7, #15]
 80008b0:	f7ff fe44 	bl	800053c <SPI_RxByte>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4423      	add	r3, r4
 80008be:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3301      	adds	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d9ef      	bls.n	80008ae <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008ce:	7abb      	ldrb	r3, [r7, #10]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	f040 8083 	bne.w	80009dc <SD_disk_initialize+0x190>
 80008d6:	7afb      	ldrb	r3, [r7, #11]
 80008d8:	2baa      	cmp	r3, #170	; 0xaa
 80008da:	d17f      	bne.n	80009dc <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80008dc:	2100      	movs	r1, #0
 80008de:	2077      	movs	r0, #119	; 0x77
 80008e0:	f7ff ff62 	bl	80007a8 <SD_SendCmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d807      	bhi.n	80008fa <SD_disk_initialize+0xae>
 80008ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008ee:	2069      	movs	r0, #105	; 0x69
 80008f0:	f7ff ff5a 	bl	80007a8 <SD_SendCmd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d005      	beq.n	8000906 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80008fa:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <SD_disk_initialize+0x1cc>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1eb      	bne.n	80008dc <SD_disk_initialize+0x90>
 8000904:	e000      	b.n	8000908 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000906:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000908:	4b43      	ldr	r3, [pc, #268]	; (8000a18 <SD_disk_initialize+0x1cc>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d064      	beq.n	80009dc <SD_disk_initialize+0x190>
 8000912:	2100      	movs	r1, #0
 8000914:	207a      	movs	r0, #122	; 0x7a
 8000916:	f7ff ff47 	bl	80007a8 <SD_SendCmd>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d15d      	bne.n	80009dc <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
 8000924:	e00c      	b.n	8000940 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000926:	7bfc      	ldrb	r4, [r7, #15]
 8000928:	f7ff fe08 	bl	800053c <SPI_RxByte>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4423      	add	r3, r4
 8000936:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	3301      	adds	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d9ef      	bls.n	8000926 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8000946:	7a3b      	ldrb	r3, [r7, #8]
 8000948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SD_disk_initialize+0x108>
 8000950:	2306      	movs	r3, #6
 8000952:	e000      	b.n	8000956 <SD_disk_initialize+0x10a>
 8000954:	2302      	movs	r3, #2
 8000956:	73bb      	strb	r3, [r7, #14]
 8000958:	e040      	b.n	80009dc <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800095a:	2100      	movs	r1, #0
 800095c:	2077      	movs	r0, #119	; 0x77
 800095e:	f7ff ff23 	bl	80007a8 <SD_SendCmd>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d808      	bhi.n	800097a <SD_disk_initialize+0x12e>
 8000968:	2100      	movs	r1, #0
 800096a:	2069      	movs	r0, #105	; 0x69
 800096c:	f7ff ff1c 	bl	80007a8 <SD_SendCmd>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d801      	bhi.n	800097a <SD_disk_initialize+0x12e>
 8000976:	2302      	movs	r3, #2
 8000978:	e000      	b.n	800097c <SD_disk_initialize+0x130>
 800097a:	2301      	movs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d10e      	bne.n	80009a2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000984:	2100      	movs	r1, #0
 8000986:	2077      	movs	r0, #119	; 0x77
 8000988:	f7ff ff0e 	bl	80007a8 <SD_SendCmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d80e      	bhi.n	80009b0 <SD_disk_initialize+0x164>
 8000992:	2100      	movs	r1, #0
 8000994:	2069      	movs	r0, #105	; 0x69
 8000996:	f7ff ff07 	bl	80007a8 <SD_SendCmd>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d107      	bne.n	80009b0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80009a0:	e00d      	b.n	80009be <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80009a2:	2100      	movs	r1, #0
 80009a4:	2041      	movs	r0, #65	; 0x41
 80009a6:	f7ff feff 	bl	80007a8 <SD_SendCmd>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d005      	beq.n	80009bc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <SD_disk_initialize+0x1cc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1e1      	bne.n	800097e <SD_disk_initialize+0x132>
 80009ba:	e000      	b.n	80009be <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80009bc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <SD_disk_initialize+0x1cc>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d007      	beq.n	80009d8 <SD_disk_initialize+0x18c>
 80009c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009cc:	2050      	movs	r0, #80	; 0x50
 80009ce:	f7ff feeb 	bl	80007a8 <SD_SendCmd>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <SD_disk_initialize+0x1d0>)
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80009e2:	f7ff fd85 	bl	80004f0 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80009e6:	f7ff fda9 	bl	800053c <SPI_RxByte>

  if (type)
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <SD_disk_initialize+0x1c8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f023 0301 	bic.w	r3, r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SD_disk_initialize+0x1c8>)
 80009fe:	701a      	strb	r2, [r3, #0]
 8000a00:	e001      	b.n	8000a06 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a02:	f7ff fe2f 	bl	8000664 <SD_PowerOff>
  }

  return Stat;
 8000a06:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <SD_disk_initialize+0x1c8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	20000000 	.word	0x20000000
 8000a18:	20002755 	.word	0x20002755
 8000a1c:	20000040 	.word	0x20000040

08000a20 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e002      	b.n	8000a3a <SD_disk_status+0x1a>

  return Stat;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SD_disk_status+0x28>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000000 	.word	0x20000000

08000a4c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <SD_disk_read+0x1c>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <SD_disk_read+0x20>
    return RES_PARERR;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e051      	b.n	8000b10 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <SD_disk_read+0xcc>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e048      	b.n	8000b10 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SD_disk_read+0xd0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	607b      	str	r3, [r7, #4]

  SELECT();
 8000a90:	f7ff fd22 	bl	80004d8 <SELECT>

  if (count == 1)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d111      	bne.n	8000abe <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	2051      	movs	r0, #81	; 0x51
 8000a9e:	f7ff fe83 	bl	80007a8 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d129      	bne.n	8000afc <SD_disk_read+0xb0>
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	f7ff fdf1 	bl	8000694 <SD_RxDataBlock>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d021      	beq.n	8000afc <SD_disk_read+0xb0>
      count = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	e01e      	b.n	8000afc <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2052      	movs	r0, #82	; 0x52
 8000ac2:	f7ff fe71 	bl	80007a8 <SD_SendCmd>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d117      	bne.n	8000afc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	68b8      	ldr	r0, [r7, #8]
 8000ad2:	f7ff fddf 	bl	8000694 <SD_RxDataBlock>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00a      	beq.n	8000af2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ae2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1ed      	bne.n	8000acc <SD_disk_read+0x80>
 8000af0:	e000      	b.n	8000af4 <SD_disk_read+0xa8>
          break;
 8000af2:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	204c      	movs	r0, #76	; 0x4c
 8000af8:	f7ff fe56 	bl	80007a8 <SD_SendCmd>
    }
  }

  DESELECT();
 8000afc:	f7ff fcf8 	bl	80004f0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000b00:	f7ff fd1c 	bl	800053c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000040 	.word	0x20000040

08000b20 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <SD_disk_write+0x1c>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <SD_disk_write+0x20>
    return RES_PARERR;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e06b      	b.n	8000c18 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <SD_disk_write+0x100>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e062      	b.n	8000c18 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <SD_disk_write+0x100>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000b60:	2302      	movs	r3, #2
 8000b62:	e059      	b.n	8000c18 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <SD_disk_write+0x104>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b76:	f7ff fcaf 	bl	80004d8 <SELECT>

  if (count == 1)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d110      	bne.n	8000ba2 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	2058      	movs	r0, #88	; 0x58
 8000b84:	f7ff fe10 	bl	80007a8 <SD_SendCmd>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d13a      	bne.n	8000c04 <SD_disk_write+0xe4>
 8000b8e:	21fe      	movs	r1, #254	; 0xfe
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f7ff fdb5 	bl	8000700 <SD_TxDataBlock>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d033      	beq.n	8000c04 <SD_disk_write+0xe4>
      count = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	e030      	b.n	8000c04 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <SD_disk_write+0x104>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2077      	movs	r0, #119	; 0x77
 8000bb2:	f7ff fdf9 	bl	80007a8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	2057      	movs	r0, #87	; 0x57
 8000bba:	f7ff fdf5 	bl	80007a8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2059      	movs	r0, #89	; 0x59
 8000bc2:	f7ff fdf1 	bl	80007a8 <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000bcc:	21fc      	movs	r1, #252	; 0xfc
 8000bce:	68b8      	ldr	r0, [r7, #8]
 8000bd0:	f7ff fd96 	bl	8000700 <SD_TxDataBlock>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00a      	beq.n	8000bf0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000be0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ee      	bne.n	8000bcc <SD_disk_write+0xac>
 8000bee:	e000      	b.n	8000bf2 <SD_disk_write+0xd2>
          break;
 8000bf0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000bf2:	21fd      	movs	r1, #253	; 0xfd
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fd83 	bl	8000700 <SD_TxDataBlock>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000c04:	f7ff fc74 	bl	80004f0 <DESELECT>
  SPI_RxByte();
 8000c08:	f7ff fc98 	bl	800053c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000040 	.word	0x20000040

08000c28 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	603a      	str	r2, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	460b      	mov	r3, r1
 8000c36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000c42:	2304      	movs	r3, #4
 8000c44:	e117      	b.n	8000e76 <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d126      	bne.n	8000ca0 <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d00e      	beq.n	8000c78 <SD_disk_ioctl+0x50>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d012      	beq.n	8000c84 <SD_disk_ioctl+0x5c>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d11a      	bne.n	8000c98 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8000c62:	f7ff fd0b 	bl	800067c <SD_CheckPower>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8000c6c:	f7ff fcfa 	bl	8000664 <SD_PowerOff>
      res = RES_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c76:	e0fc      	b.n	8000e72 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8000c78:	f7ff fca8 	bl	80005cc <SD_PowerOn>
      res = RES_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c82:	e0f6      	b.n	8000e72 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	1c5c      	adds	r4, r3, #1
 8000c88:	f7ff fcf8 	bl	800067c <SD_CheckPower>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c96:	e0ec      	b.n	8000e72 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c9e:	e0e8      	b.n	8000e72 <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000ca0:	4b77      	ldr	r3, [pc, #476]	; (8000e80 <SD_disk_ioctl+0x258>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e0e1      	b.n	8000e76 <SD_disk_ioctl+0x24e>

    SELECT();
 8000cb2:	f7ff fc11 	bl	80004d8 <SELECT>

    switch (ctrl)
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	2b0d      	cmp	r3, #13
 8000cba:	f200 80cb 	bhi.w	8000e54 <SD_disk_ioctl+0x22c>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <SD_disk_ioctl+0x9c>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000dbf 	.word	0x08000dbf
 8000cc8:	08000cfd 	.word	0x08000cfd
 8000ccc:	08000daf 	.word	0x08000daf
 8000cd0:	08000e55 	.word	0x08000e55
 8000cd4:	08000e55 	.word	0x08000e55
 8000cd8:	08000e55 	.word	0x08000e55
 8000cdc:	08000e55 	.word	0x08000e55
 8000ce0:	08000e55 	.word	0x08000e55
 8000ce4:	08000e55 	.word	0x08000e55
 8000ce8:	08000e55 	.word	0x08000e55
 8000cec:	08000e55 	.word	0x08000e55
 8000cf0:	08000dd1 	.word	0x08000dd1
 8000cf4:	08000df5 	.word	0x08000df5
 8000cf8:	08000e19 	.word	0x08000e19
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2049      	movs	r0, #73	; 0x49
 8000d00:	f7ff fd52 	bl	80007a8 <SD_SendCmd>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f040 80a8 	bne.w	8000e5c <SD_disk_ioctl+0x234>
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2110      	movs	r1, #16
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fcbe 	bl	8000694 <SD_RxDataBlock>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 809e 	beq.w	8000e5c <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 8000d20:	7b3b      	ldrb	r3, [r7, #12]
 8000d22:	099b      	lsrs	r3, r3, #6
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10e      	bne.n	8000d48 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d2a:	7d7b      	ldrb	r3, [r7, #21]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	7d3b      	ldrb	r3, [r7, #20]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4413      	add	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d3e:	8bfb      	ldrh	r3, [r7, #30]
 8000d40:	029a      	lsls	r2, r3, #10
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e02e      	b.n	8000da6 <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d48:	7c7b      	ldrb	r3, [r7, #17]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	7dbb      	ldrb	r3, [r7, #22]
 8000d52:	09db      	lsrs	r3, r3, #7
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	7d7b      	ldrb	r3, [r7, #21]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	f003 0306 	and.w	r3, r3, #6
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d70:	7d3b      	ldrb	r3, [r7, #20]
 8000d72:	099b      	lsrs	r3, r3, #6
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	7cfb      	ldrb	r3, [r7, #19]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	7cbb      	ldrb	r3, [r7, #18]
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d98:	8bfa      	ldrh	r2, [r7, #30]
 8000d9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d9e:	3b09      	subs	r3, #9
 8000da0:	409a      	lsls	r2, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000dac:	e056      	b.n	8000e5c <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dbc:	e055      	b.n	8000e6a <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000dbe:	f7ff fbe9 	bl	8000594 <SD_ReadyWait>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2bff      	cmp	r3, #255	; 0xff
 8000dc6:	d14b      	bne.n	8000e60 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dce:	e047      	b.n	8000e60 <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2049      	movs	r0, #73	; 0x49
 8000dd4:	f7ff fce8 	bl	80007a8 <SD_SendCmd>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d142      	bne.n	8000e64 <SD_disk_ioctl+0x23c>
 8000dde:	2110      	movs	r1, #16
 8000de0:	6a38      	ldr	r0, [r7, #32]
 8000de2:	f7ff fc57 	bl	8000694 <SD_RxDataBlock>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d03b      	beq.n	8000e64 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000df2:	e037      	b.n	8000e64 <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000df4:	2100      	movs	r1, #0
 8000df6:	204a      	movs	r0, #74	; 0x4a
 8000df8:	f7ff fcd6 	bl	80007a8 <SD_SendCmd>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d132      	bne.n	8000e68 <SD_disk_ioctl+0x240>
 8000e02:	2110      	movs	r1, #16
 8000e04:	6a38      	ldr	r0, [r7, #32]
 8000e06:	f7ff fc45 	bl	8000694 <SD_RxDataBlock>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d02b      	beq.n	8000e68 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e16:	e027      	b.n	8000e68 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	207a      	movs	r0, #122	; 0x7a
 8000e1c:	f7ff fcc4 	bl	80007a8 <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d116      	bne.n	8000e54 <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e2c:	e00b      	b.n	8000e46 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8000e2e:	6a3c      	ldr	r4, [r7, #32]
 8000e30:	1c63      	adds	r3, r4, #1
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	f7ff fb82 	bl	800053c <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e40:	3301      	adds	r3, #1
 8000e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d9ef      	bls.n	8000e2e <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000e54:	2304      	movs	r3, #4
 8000e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e5a:	e006      	b.n	8000e6a <SD_disk_ioctl+0x242>
      break;
 8000e5c:	bf00      	nop
 8000e5e:	e004      	b.n	8000e6a <SD_disk_ioctl+0x242>
      break;
 8000e60:	bf00      	nop
 8000e62:	e002      	b.n	8000e6a <SD_disk_ioctl+0x242>
      break;
 8000e64:	bf00      	nop
 8000e66:	e000      	b.n	8000e6a <SD_disk_ioctl+0x242>
      break;
 8000e68:	bf00      	nop
    }

    DESELECT();
 8000e6a:	f7ff fb41 	bl	80004f0 <DESELECT>
    SPI_RxByte();
 8000e6e:	f7ff fb65 	bl	800053c <SPI_RxByte>
  }

  return res;
 8000e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	372c      	adds	r7, #44	; 0x2c
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f000 f9fa 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f820 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 f8be 	bl	8001010 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e94:	f000 f886 	bl	8000fa4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000e98:	f001 fd6c 	bl	8002974 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  fresult=f_mount(&fs,"",0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4907      	ldr	r1, [pc, #28]	; (8000ebc <main+0x38>)
 8000ea0:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <main+0x3c>)
 8000ea2:	f002 fb35 	bl	8003510 <f_mount>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <main+0x40>)
 8000eac:	701a      	strb	r2, [r3, #0]
  f_getfree("",&free_clust,&pfps);
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <main+0x44>)
 8000eb0:	4906      	ldr	r1, [pc, #24]	; (8000ecc <main+0x48>)
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <main+0x38>)
 8000eb4:	f002 fb72 	bl	800359c <f_getfree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <main+0x34>
 8000eba:	bf00      	nop
 8000ebc:	08003884 	.word	0x08003884
 8000ec0:	20000278 	.word	0x20000278
 8000ec4:	200026f0 	.word	0x200026f0
 8000ec8:	20002750 	.word	0x20002750
 8000ecc:	200012b4 	.word	0x200012b4

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	2230      	movs	r2, #48	; 0x30
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fcbc 	bl	800385c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <SystemClock_Config+0xcc>)
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <SystemClock_Config+0xcc>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <SystemClock_Config+0xcc>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <SystemClock_Config+0xd0>)
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <SystemClock_Config+0xd0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <SystemClock_Config+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f40:	2304      	movs	r3, #4
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f44:	23a8      	movs	r3, #168	; 0xa8
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fc9d 	bl	8001894 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f60:	f000 f8a6 	bl	80010b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f64:	230f      	movs	r3, #15
 8000f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2105      	movs	r1, #5
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fefe 	bl	8001d84 <HAL_RCC_ClockConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f8e:	f000 f88f 	bl	80010b0 <Error_Handler>
  }
}
 8000f92:	bf00      	nop
 8000f94:	3750      	adds	r7, #80	; 0x50
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40007000 	.word	0x40007000

08000fa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_SPI1_Init+0x64>)
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <MX_SPI1_Init+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fd8:	2228      	movs	r2, #40	; 0x28
 8000fda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_SPI1_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI1_Init+0x64>)
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_SPI1_Init+0x64>)
 8000ff6:	f001 f883 	bl	8002100 <HAL_SPI_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001000:	f000 f856 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200026f4 	.word	0x200026f4
 800100c:	40013000 	.word	0x40013000

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <MX_GPIO_Init+0x98>)
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_GPIO_Init+0x98>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <MX_GPIO_Init+0x98>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_GPIO_Init+0x98>)
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_GPIO_Init+0x98>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_GPIO_Init+0x98>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <MX_GPIO_Init+0x98>)
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_GPIO_Init+0x98>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_GPIO_Init+0x98>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2110      	movs	r1, #16
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <MX_GPIO_Init+0x9c>)
 8001080:	f000 fbee 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001084:	2310      	movs	r3, #16
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_GPIO_Init+0x9c>)
 800109c:	f000 fa46 	bl	800152c <HAL_GPIO_Init>

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <Error_Handler+0x6>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_MspInit+0x4c>)
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x4c>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <HAL_MspInit+0x4c>)
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_MspInit+0x4c>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_SPI_MspInit+0x84>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12b      	bne.n	8001182 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_SPI_MspInit+0x88>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_SPI_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001162:	23e0      	movs	r3, #224	; 0xe0
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001172:	2305      	movs	r3, #5
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0x8c>)
 800117e:	f000 f9d5 	bl	800152c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40013000 	.word	0x40013000
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t Timer1, Timer2;
volatile uint8_t FatFsCnt=0;

void SDTimer_Handler(void){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	if(Timer1>0){
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <SDTimer_Handler+0x40>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <SDTimer_Handler+0x1c>
		Timer1--;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <SDTimer_Handler+0x40>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	3b01      	subs	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <SDTimer_Handler+0x40>)
 80011b2:	701a      	strb	r2, [r3, #0]
	}if(Timer2>0){
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <SDTimer_Handler+0x44>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <SDTimer_Handler+0x34>
		Timer2--;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <SDTimer_Handler+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SDTimer_Handler+0x44>)
 80011ca:	701a      	strb	r2, [r3, #0]
	}

}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20002755 	.word	0x20002755
 80011dc:	20002754 	.word	0x20002754

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	FatFsCnt++;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <SysTick_Handler+0x30>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3301      	adds	r3, #1
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <SysTick_Handler+0x30>)
 8001238:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt>10){
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <SysTick_Handler+0x30>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d904      	bls.n	800124e <SysTick_Handler+0x26>
		FatFsCnt=0;
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Handler+0x30>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800124a:	f7ff ffa5 	bl	8001198 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124e:	f000 f869 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000042 	.word	0x20000042

0800125c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <SystemInit+0x20>)
 8001264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_Init+0x40>)
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_Init+0x40>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_Init+0x40>)
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x40>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f90b 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	200f      	movs	r0, #15
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff ff00 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f915 	bl	8001512 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 f8eb 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000004 	.word	0x20000004
 800131c:	2000000c 	.word	0x2000000c
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2000000c 	.word	0x2000000c
 8001348:	20002758 	.word	0x20002758

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20002758 	.word	0x20002758

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	490d      	ldr	r1, [pc, #52]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	4909      	ldr	r1, [pc, #36]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	2201      	movs	r2, #1
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	401a      	ands	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001462:	2101      	movs	r1, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	1e59      	subs	r1, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff90 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff49 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff5e 	bl	80013ac <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff90 	bl	800141c <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5f 	bl	80013c8 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffb0 	bl	8001480 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e16b      	b.n	8001820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 815a 	bne.w	800181a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	2b02      	cmp	r3, #2
 800157c:	d130      	bne.n	80015e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0201 	and.w	r2, r3, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d017      	beq.n	800161c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80b4 	beq.w	800181a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4a5f      	ldr	r2, [pc, #380]	; (8001834 <HAL_GPIO_Init+0x308>)
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_GPIO_Init+0x308>)
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_GPIO_Init+0x308>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a5a      	ldr	r2, [pc, #360]	; (8001838 <HAL_GPIO_Init+0x30c>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a51      	ldr	r2, [pc, #324]	; (800183c <HAL_GPIO_Init+0x310>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02b      	beq.n	8001752 <HAL_GPIO_Init+0x226>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_GPIO_Init+0x314>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x222>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x318>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x21e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <HAL_GPIO_Init+0x31c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x21a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_GPIO_Init+0x320>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x216>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x324>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x212>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_GPIO_Init+0x328>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_GPIO_Init+0x32c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x20a>
 8001732:	2307      	movs	r3, #7
 8001734:	e00e      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001736:	2308      	movs	r3, #8
 8001738:	e00c      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173a:	2306      	movs	r3, #6
 800173c:	e00a      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173e:	2305      	movs	r3, #5
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001742:	2304      	movs	r3, #4
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001752:	2300      	movs	r3, #0
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001764:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_GPIO_Init+0x30c>)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_GPIO_Init+0x330>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_GPIO_Init+0x330>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_GPIO_Init+0x330>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_GPIO_Init+0x330>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_GPIO_Init+0x330>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_GPIO_Init+0x330>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_GPIO_Init+0x330>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_GPIO_Init+0x330>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f67f ae90 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001828:	bf00      	nop
 800182a:	3724      	adds	r7, #36	; 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40021400 	.word	0x40021400
 8001854:	40021800 	.word	0x40021800
 8001858:	40021c00 	.word	0x40021c00
 800185c:	40013c00 	.word	0x40013c00

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e264      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d075      	beq.n	800199e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b2:	4ba3      	ldr	r3, [pc, #652]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d00c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4ba0      	ldr	r3, [pc, #640]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d112      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ca:	4b9d      	ldr	r3, [pc, #628]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d6:	d10b      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	4b99      	ldr	r3, [pc, #612]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05b      	beq.n	800199c <HAL_RCC_OscConfig+0x108>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d157      	bne.n	800199c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e23f      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d106      	bne.n	8001908 <HAL_RCC_OscConfig+0x74>
 80018fa:	4a91      	ldr	r2, [pc, #580]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	4b90      	ldr	r3, [pc, #576]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x98>
 8001912:	4a8b      	ldr	r2, [pc, #556]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	4b8a      	ldr	r3, [pc, #552]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4a88      	ldr	r2, [pc, #544]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001920:	4b87      	ldr	r3, [pc, #540]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 800192c:	4a84      	ldr	r2, [pc, #528]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	4b84      	ldr	r3, [pc, #528]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4a81      	ldr	r2, [pc, #516]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 800193a:	4b81      	ldr	r3, [pc, #516]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fcfe 	bl	800134c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fcfa 	bl	800134c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e204      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	4b76      	ldr	r3, [pc, #472]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xc0>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fcea 	bl	800134c <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fce6 	bl	800134c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1f0      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	4b6c      	ldr	r3, [pc, #432]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0xe8>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019aa:	4b65      	ldr	r3, [pc, #404]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b62      	ldr	r3, [pc, #392]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c2:	4b5f      	ldr	r3, [pc, #380]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d116      	bne.n	80019fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_RCC_OscConfig+0x152>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1c4      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	4956      	ldr	r1, [pc, #344]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	4b55      	ldr	r3, [pc, #340]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	e03a      	b.n	8001a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d020      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a04:	4b4f      	ldr	r3, [pc, #316]	; (8001b44 <HAL_RCC_OscConfig+0x2b0>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fc9f 	bl	800134c <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fc9b 	bl	800134c <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e1a5      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4943      	ldr	r1, [pc, #268]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e015      	b.n	8001a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <HAL_RCC_OscConfig+0x2b0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc7e 	bl	800134c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a54:	f7ff fc7a 	bl	800134c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e184      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d030      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d016      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x2b4>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fc5e 	bl	800134c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff fc5a 	bl	800134c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e164      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x200>
 8001ab2:	e015      	b.n	8001ae0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x2b4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fc47 	bl	800134c <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fc43 	bl	800134c <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e14d      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a0 	beq.w	8001c2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_OscConfig+0x2b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d121      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_RCC_OscConfig+0x2b8>)
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_RCC_OscConfig+0x2b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fc09 	bl	800134c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e011      	b.n	8001b62 <HAL_RCC_OscConfig+0x2ce>
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	42470000 	.word	0x42470000
 8001b48:	42470e80 	.word	0x42470e80
 8001b4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b50:	f7ff fbfc 	bl	800134c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e106      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_RCC_OscConfig+0x4e4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d106      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2f0>
 8001b76:	4a81      	ldr	r2, [pc, #516]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001b78:	4b80      	ldr	r3, [pc, #512]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	e01c      	b.n	8001bbe <HAL_RCC_OscConfig+0x32a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d10c      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x312>
 8001b8c:	4a7b      	ldr	r2, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001b8e:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6713      	str	r3, [r2, #112]	; 0x70
 8001b98:	4a78      	ldr	r2, [pc, #480]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba4:	e00b      	b.n	8001bbe <HAL_RCC_OscConfig+0x32a>
 8001ba6:	4a75      	ldr	r2, [pc, #468]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb2:	4a72      	ldr	r2, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001bb4:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d015      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fbc1 	bl	800134c <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff fbbd 	bl	800134c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0c5      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be4:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ee      	beq.n	8001bce <HAL_RCC_OscConfig+0x33a>
 8001bf0:	e014      	b.n	8001c1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fbab 	bl	800134c <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fba7 	bl	800134c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0af      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c10:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ee      	bne.n	8001bfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d105      	bne.n	8001c2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c22:	4a56      	ldr	r2, [pc, #344]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001c24:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 809b 	beq.w	8001d6e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d05c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d141      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_RCC_OscConfig+0x4ec>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb7b 	bl	800134c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fb77 	bl	800134c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e081      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c78:	4940      	ldr	r1, [pc, #256]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	3b01      	subs	r3, #1
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca2:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x4ec>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb50 	bl	800134c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff fb4c 	bl	800134c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e056      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x41c>
 8001cce:	e04e      	b.n	8001d6e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_OscConfig+0x4ec>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fb39 	bl	800134c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff fb35 	bl	800134c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e03f      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x44a>
 8001cfc:	e037      	b.n	8001d6e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e032      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_RCC_OscConfig+0x4e8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d028      	beq.n	8001d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d121      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d11a      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d111      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	42470060 	.word	0x42470060

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0cc      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0207 	and.w	r2, r3, #7
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0207 	and.w	r2, r3, #7
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd8:	4a59      	ldr	r2, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df0:	4a53      	ldr	r2, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4950      	ldr	r1, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d044      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d119      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e07f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e067      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e62:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 0203 	bic.w	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e74:	f7ff fa6a 	bl	800134c <HAL_GetTick>
 8001e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7c:	f7ff fa66 	bl	800134c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e04f      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 020c 	and.w	r2, r3, #12
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d1eb      	bne.n	8001e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0207 	and.w	r2, r3, #7
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d90c      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0207 	and.w	r2, r3, #7
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e032      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4919      	ldr	r1, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef6:	4912      	ldr	r1, [pc, #72]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0a:	f000 f821 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4601      	mov	r1, r0
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f26:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f9ca 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00
 8001f40:	40023800 	.word	0x40023800
 8001f44:	08003888 	.word	0x08003888
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	20000008 	.word	0x20000008

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f54:	b08f      	sub	sp, #60	; 0x3c
 8001f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f60:	2300      	movs	r3, #0
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f68:	4b62      	ldr	r3, [pc, #392]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d007      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 80b2 	bne.w	80020e2 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f7e:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001f82:	e0b1      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f84:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f88:	e0ae      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8a:	4b5a      	ldr	r3, [pc, #360]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f94:	4b57      	ldr	r3, [pc, #348]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d04e      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa0:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	099b      	lsrs	r3, r3, #6
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	ea01 0103 	and.w	r1, r1, r3
 8001fb6:	ea02 0204 	and.w	r2, r2, r4
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4614      	mov	r4, r2
 8001fbe:	0160      	lsls	r0, r4, #5
 8001fc0:	6278      	str	r0, [r7, #36]	; 0x24
 8001fc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fc4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001fc8:	6278      	str	r0, [r7, #36]	; 0x24
 8001fca:	015b      	lsls	r3, r3, #5
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001fd2:	1a5b      	subs	r3, r3, r1
 8001fd4:	eb64 0402 	sbc.w	r4, r4, r2
 8001fd8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001fdc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001fe0:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001fe4:	ebb8 0803 	subs.w	r8, r8, r3
 8001fe8:	eb69 0904 	sbc.w	r9, r9, r4
 8001fec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002004:	eb18 0801 	adds.w	r8, r8, r1
 8002008:	eb49 0902 	adc.w	r9, r9, r2
 800200c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002024:	4640      	mov	r0, r8
 8002026:	4649      	mov	r1, r9
 8002028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202a:	f04f 0400 	mov.w	r4, #0
 800202e:	461a      	mov	r2, r3
 8002030:	4623      	mov	r3, r4
 8002032:	f7fe f8c9 	bl	80001c8 <__aeabi_uldivmod>
 8002036:	4603      	mov	r3, r0
 8002038:	460c      	mov	r4, r1
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
 800203c:	e043      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	099b      	lsrs	r3, r3, #6
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	f240 11ff 	movw	r1, #511	; 0x1ff
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	ea01 0103 	and.w	r1, r1, r3
 8002054:	ea02 0204 	and.w	r2, r2, r4
 8002058:	460b      	mov	r3, r1
 800205a:	4614      	mov	r4, r2
 800205c:	0160      	lsls	r0, r4, #5
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	015b      	lsls	r3, r3, #5
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002070:	1a5b      	subs	r3, r3, r1
 8002072:	eb64 0402 	sbc.w	r4, r4, r2
 8002076:	01a6      	lsls	r6, r4, #6
 8002078:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800207c:	019d      	lsls	r5, r3, #6
 800207e:	1aed      	subs	r5, r5, r3
 8002080:	eb66 0604 	sbc.w	r6, r6, r4
 8002084:	00f3      	lsls	r3, r6, #3
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	00eb      	lsls	r3, r5, #3
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002098:	186d      	adds	r5, r5, r1
 800209a:	eb46 0602 	adc.w	r6, r6, r2
 800209e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80020a2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80020a6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80020aa:	4655      	mov	r5, sl
 80020ac:	465e      	mov	r6, fp
 80020ae:	4628      	mov	r0, r5
 80020b0:	4631      	mov	r1, r6
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4623      	mov	r3, r4
 80020bc:	f7fe f884 	bl	80001c8 <__aeabi_uldivmod>
 80020c0:	4603      	mov	r3, r0
 80020c2:	460c      	mov	r4, r1
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	3301      	adds	r3, #1
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80020d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e0:	e002      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	373c      	adds	r7, #60	; 0x3c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07a      	b.n	8002208 <HAL_SPI_Init+0x108>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d009      	beq.n	8002138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
 800212a:	e005      	b.n	8002138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe ffd8 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800216e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6852      	ldr	r2, [r2, #4]
 8002178:	f402 7182 	and.w	r1, r2, #260	; 0x104
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6892      	ldr	r2, [r2, #8]
 8002180:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68d2      	ldr	r2, [r2, #12]
 800218a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6912      	ldr	r2, [r2, #16]
 8002194:	f002 0202 	and.w	r2, r2, #2
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6952      	ldr	r2, [r2, #20]
 800219e:	f002 0201 	and.w	r2, r2, #1
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6992      	ldr	r2, [r2, #24]
 80021a8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	69d2      	ldr	r2, [r2, #28]
 80021b2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6a12      	ldr	r2, [r2, #32]
 80021bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6992      	ldr	r2, [r2, #24]
 80021d6:	0c12      	lsrs	r2, r2, #16
 80021d8:	f002 0104 	and.w	r1, r2, #4
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021e0:	f002 0210 	and.w	r2, r2, #16
 80021e4:	430a      	orrs	r2, r1
 80021e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	69d2      	ldr	r2, [r2, #28]
 80021f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_SPI_Transmit+0x22>
 800222e:	2302      	movs	r3, #2
 8002230:	e124      	b.n	800247c <HAL_SPI_Transmit+0x26c>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800223a:	f7ff f887 	bl	800134c <HAL_GetTick>
 800223e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b01      	cmp	r3, #1
 800224e:	d002      	beq.n	8002256 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002250:	2302      	movs	r3, #2
 8002252:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002254:	e109      	b.n	800246a <HAL_SPI_Transmit+0x25a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <HAL_SPI_Transmit+0x52>
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002266:	e100      	b.n	800246a <HAL_SPI_Transmit+0x25a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2203      	movs	r2, #3
 800226c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ae:	d10f      	bne.n	80022d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d007      	beq.n	80022ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f6:	d14b      	bne.n	8002390 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_SPI_Transmit+0xf6>
 8002300:	8afb      	ldrh	r3, [r7, #22]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d13e      	bne.n	8002384 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800232a:	e02b      	b.n	8002384 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b02      	cmp	r3, #2
 8002338:	d112      	bne.n	8002360 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002342:	8812      	ldrh	r2, [r2, #0]
 8002344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	1c9a      	adds	r2, r3, #2
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	86da      	strh	r2, [r3, #54]	; 0x36
 800235e:	e011      	b.n	8002384 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002360:	f7fe fff4 	bl	800134c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	1ad2      	subs	r2, r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d303      	bcc.n	8002378 <HAL_SPI_Transmit+0x168>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d102      	bne.n	800237e <HAL_SPI_Transmit+0x16e>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002382:	e072      	b.n	800246a <HAL_SPI_Transmit+0x25a>
    while (hspi->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ce      	bne.n	800232c <HAL_SPI_Transmit+0x11c>
 800238e:	e04c      	b.n	800242a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_Transmit+0x18e>
 8002398:	8afb      	ldrh	r3, [r7, #22]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d140      	bne.n	8002420 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023c4:	e02c      	b.n	8002420 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d113      	bne.n	80023fc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80023fa:	e011      	b.n	8002420 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fc:	f7fe ffa6 	bl	800134c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad2      	subs	r2, r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d303      	bcc.n	8002414 <HAL_SPI_Transmit+0x204>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002412:	d102      	bne.n	800241a <HAL_SPI_Transmit+0x20a>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800241e:	e024      	b.n	800246a <HAL_SPI_Transmit+0x25a>
    while (hspi->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cd      	bne.n	80023c6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fa5e 	bl	80028f0 <SPI_EndRxTxTransaction>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_SPI_Transmit+0x25a>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800247a:	7ffb      	ldrb	r3, [r7, #31]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08c      	sub	sp, #48	; 0x30
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002492:	2301      	movs	r3, #1
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_SPI_TransmitReceive+0x26>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e188      	b.n	80027bc <HAL_SPI_TransmitReceive+0x338>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b2:	f7fe ff4b 	bl	800134c <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d00f      	beq.n	80024f4 <HAL_SPI_TransmitReceive+0x70>
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024da:	d107      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x68>
 80024e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d003      	beq.n	80024f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
 80024ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024f2:	e159      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x82>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x82>
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800250c:	e14c      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b04      	cmp	r3, #4
 8002518:	d003      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2205      	movs	r2, #5
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	887a      	ldrh	r2, [r7, #2]
 800254a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b40      	cmp	r3, #64	; 0x40
 8002564:	d007      	beq.n	8002576 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800257e:	d178      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_SPI_TransmitReceive+0x10a>
 8002588:	8b7b      	ldrh	r3, [r7, #26]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d166      	bne.n	800265c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	1c9a      	adds	r2, r3, #2
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b2:	e053      	b.n	800265c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d11b      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x176>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d016      	beq.n	80025fa <HAL_SPI_TransmitReceive+0x176>
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d113      	bne.n	80025fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	1c9a      	adds	r2, r3, #2
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d119      	bne.n	800263c <HAL_SPI_TransmitReceive+0x1b8>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d014      	beq.n	800263c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	b292      	uxth	r2, r2
 800261e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	1c9a      	adds	r2, r3, #2
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002638:	2301      	movs	r3, #1
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800263c:	f7fe fe86 	bl	800134c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002648:	429a      	cmp	r2, r3
 800264a:	d307      	bcc.n	800265c <HAL_SPI_TransmitReceive+0x1d8>
 800264c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d003      	beq.n	800265c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800265a:	e0a5      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1a6      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x130>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1a1      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x130>
 8002670:	e07c      	b.n	800276c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x1fc>
 800267a:	8b7b      	ldrh	r3, [r7, #26]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d16b      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a6:	e057      	b.n	8002758 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d11c      	bne.n	80026f0 <HAL_SPI_TransmitReceive+0x26c>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d017      	beq.n	80026f0 <HAL_SPI_TransmitReceive+0x26c>
 80026c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d114      	bne.n	80026f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026d0:	7812      	ldrb	r2, [r2, #0]
 80026d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d119      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x2ae>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d014      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800272e:	2301      	movs	r3, #1
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002732:	f7fe fe0b 	bl	800134c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	429a      	cmp	r2, r3
 8002740:	d303      	bcc.n	800274a <HAL_SPI_TransmitReceive+0x2c6>
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d102      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x2cc>
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002756:	e027      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1a2      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x224>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d19d      	bne.n	80026a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800276c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f8bd 	bl	80028f0 <SPI_EndRxTxTransaction>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002788:	e00e      	b.n	80027a8 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3730      	adds	r7, #48	; 0x30
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d2:	b2db      	uxtb	r3, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027f0:	f7fe fdac 	bl	800134c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	1a9a      	subs	r2, r3, r2
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002800:	f7fe fda4 	bl	800134c <HAL_GetTick>
 8002804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002806:	4b39      	ldr	r3, [pc, #228]	; (80028ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	015b      	lsls	r3, r3, #5
 800280c:	0d1b      	lsrs	r3, r3, #20
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	fb02 f303 	mul.w	r3, r2, r3
 8002814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002816:	e054      	b.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d050      	beq.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002820:	f7fe fd94 	bl	800134c <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad2      	subs	r2, r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	429a      	cmp	r2, r3
 800282e:	d202      	bcs.n	8002836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d13d      	bne.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	6852      	ldr	r2, [r2, #4]
 8002840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284e:	d111      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002858:	d004      	beq.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d107      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d10f      	bne.n	800289e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800289c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e017      	b.n	80028e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3b01      	subs	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	bf0c      	ite	eq
 80028d2:	2301      	moveq	r3, #1
 80028d4:	2300      	movne	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d19b      	bne.n	8002818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000004 	.word	0x20000004

080028f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <SPI_EndRxTxTransaction+0x7c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <SPI_EndRxTxTransaction+0x80>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0d5b      	lsrs	r3, r3, #21
 8002908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291a:	d112      	bne.n	8002942 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2200      	movs	r2, #0
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff ff5a 	bl	80027e0 <SPI_WaitFlagStateUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d016      	beq.n	8002960 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e00f      	b.n	8002962 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3b01      	subs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b80      	cmp	r3, #128	; 0x80
 800295a:	d0f2      	beq.n	8002942 <SPI_EndRxTxTransaction+0x52>
 800295c:	e000      	b.n	8002960 <SPI_EndRxTxTransaction+0x70>
        break;
 800295e:	bf00      	nop
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000004 	.word	0x20000004
 8002970:	165e9f81 	.word	0x165e9f81

08002974 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002978:	4904      	ldr	r1, [pc, #16]	; (800298c <MX_FATFS_Init+0x18>)
 800297a:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_FATFS_Init+0x1c>)
 800297c:	f000 ff10 	bl	80037a0 <FATFS_LinkDriver>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <MX_FATFS_Init+0x20>)
 8002986:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000275c 	.word	0x2000275c
 8002990:	20000010 	.word	0x20000010
 8002994:	20002760 	.word	0x20002760

08002998 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */

    return SD_disk_initialize(pdrv);
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd ff51 	bl	800084c <SD_disk_initialize>
 80029aa:	4603      	mov	r3, r0
 80029ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status(pdrv);
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe f82c 	bl	8000a20 <SD_disk_status>
 80029c8:	4603      	mov	r3, r0
 80029ca:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv,buff,sector,count);
 80029e4:	7bf8      	ldrb	r0, [r7, #15]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	f7fe f82e 	bl	8000a4c <SD_disk_read>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return   SD_disk_write(pdrv,buff,sector,count);
 8002a0c:	7bf8      	ldrb	r0, [r7, #15]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	f7fe f884 	bl	8000b20 <SD_disk_write>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b2db      	uxtb	r3, r3
;
  /* USER CODE END WRITE */
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	603a      	str	r2, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
 8002a30:	460b      	mov	r3, r1
 8002a32:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv,cmd,buff);
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	79b9      	ldrb	r1, [r7, #6]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe f8f4 	bl	8000c28 <SD_disk_ioctl>
 8002a40:	4603      	mov	r3, r0
 8002a42:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <disk_status+0x30>)
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	4905      	ldr	r1, [pc, #20]	; (8002a7c <disk_status+0x30>)
 8002a66:	440a      	add	r2, r1
 8002a68:	7a12      	ldrb	r2, [r2, #8]
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4798      	blx	r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	2000026c 	.word	0x2000026c

08002a80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	4a0d      	ldr	r2, [pc, #52]	; (8002ac8 <disk_initialize+0x48>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d111      	bne.n	8002abc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <disk_initialize+0x48>)
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <disk_initialize+0x48>)
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	79fa      	ldrb	r2, [r7, #7]
 8002aae:	4906      	ldr	r1, [pc, #24]	; (8002ac8 <disk_initialize+0x48>)
 8002ab0:	440a      	add	r2, r1
 8002ab2:	7a12      	ldrb	r2, [r2, #8]
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4798      	blx	r3
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000026c 	.word	0x2000026c

08002acc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	4603      	mov	r3, r0
 8002ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <disk_read+0x3c>)
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	689c      	ldr	r4, [r3, #8]
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <disk_read+0x3c>)
 8002aec:	4413      	add	r3, r2
 8002aee:	7a18      	ldrb	r0, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	47a0      	blx	r4
 8002af8:	4603      	mov	r3, r0
 8002afa:	75fb      	strb	r3, [r7, #23]
  return res;
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000026c 	.word	0x2000026c

08002b0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4603      	mov	r3, r0
 8002b1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <disk_write+0x3c>)
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	68dc      	ldr	r4, [r3, #12]
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <disk_write+0x3c>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	7a18      	ldrb	r0, [r3, #8]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	47a0      	blx	r4
 8002b38:	4603      	mov	r3, r0
 8002b3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd90      	pop	{r4, r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2000026c 	.word	0x2000026c

08002b4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	603a      	str	r2, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <disk_ioctl+0x38>)
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	79fa      	ldrb	r2, [r7, #7]
 8002b6a:	4906      	ldr	r1, [pc, #24]	; (8002b84 <disk_ioctl+0x38>)
 8002b6c:	440a      	add	r2, r1
 8002b6e:	7a10      	ldrb	r0, [r2, #8]
 8002b70:	79b9      	ldrb	r1, [r7, #6]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	4798      	blx	r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	73fb      	strb	r3, [r7, #15]
  return res;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2000026c 	.word	0x2000026c

08002b88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002b98:	89fb      	ldrh	r3, [r7, #14]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b21b      	sxth	r3, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002baa:	89fb      	ldrh	r3, [r7, #14]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3303      	adds	r3, #3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	3202      	adds	r2, #2
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	3201      	adds	r2, #1
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
	return rv;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e010      	b.n	8002c30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002c0e:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <clear_lock+0x44>)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	4413      	add	r3, r2
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d105      	bne.n	8002c2a <clear_lock+0x2a>
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <clear_lock+0x44>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d9eb      	bls.n	8002c0e <clear_lock+0xe>
	}
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2000004c 	.word	0x2000004c

08002c48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	78db      	ldrb	r3, [r3, #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d034      	beq.n	8002cc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7858      	ldrb	r0, [r3, #1]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	f7ff ff4c 	bl	8002b0c <disk_write>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e022      	b.n	8002cc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	1ad2      	subs	r2, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d217      	bcs.n	8002cc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	789b      	ldrb	r3, [r3, #2]
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e010      	b.n	8002cc0 <sync_window+0x78>
					wsect += fs->fsize;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7858      	ldrb	r0, [r3, #1]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	f7ff ff29 	bl	8002b0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d8eb      	bhi.n	8002c9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d01b      	beq.n	8002d20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffad 	bl	8002c48 <sync_window>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d113      	bne.n	8002d20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7858      	ldrb	r0, [r3, #1]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002d02:	2301      	movs	r3, #1
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	f7ff fee1 	bl	8002acc <disk_read>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
 8002d14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d904      	bls.n	8002d4a <get_fat+0x20>
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	69da      	ldr	r2, [r3, #28]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d802      	bhi.n	8002d50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e0b7      	b.n	8002ec0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
 8002d54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d05a      	beq.n	8002e14 <get_fat+0xea>
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d07d      	beq.n	8002e5e <get_fat+0x134>
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	f040 80a2 	bne.w	8002eac <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	899b      	ldrh	r3, [r3, #12]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d86:	4413      	add	r3, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6938      	ldr	r0, [r7, #16]
 8002d8c:	f7ff ffa0 	bl	8002cd0 <move_window>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 808d 	bne.w	8002eb2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60fa      	str	r2, [r7, #12]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	8992      	ldrh	r2, [r2, #12]
 8002da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8002da6:	fb02 f201 	mul.w	r2, r2, r1
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	899b      	ldrh	r3, [r3, #12]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6938      	ldr	r0, [r7, #16]
 8002dcc:	f7ff ff80 	bl	8002cd0 <move_window>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d16f      	bne.n	8002eb6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	899b      	ldrh	r3, [r3, #12]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8002de2:	fb02 f201 	mul.w	r2, r2, r1
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <get_fat+0xe0>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	e002      	b.n	8002e10 <get_fat+0xe6>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	617b      	str	r3, [r7, #20]
			break;
 8002e12:	e055      	b.n	8002ec0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	899b      	ldrh	r3, [r3, #12]
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e28:	4413      	add	r3, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6938      	ldr	r0, [r7, #16]
 8002e2e:	f7ff ff4f 	bl	8002cd0 <move_window>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d140      	bne.n	8002eba <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	8992      	ldrh	r2, [r2, #12]
 8002e46:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e4a:	fb02 f200 	mul.w	r2, r2, r0
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fe98 	bl	8002b88 <ld_word>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	617b      	str	r3, [r7, #20]
			break;
 8002e5c:	e030      	b.n	8002ec0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	899b      	ldrh	r3, [r3, #12]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e72:	4413      	add	r3, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	6938      	ldr	r0, [r7, #16]
 8002e78:	f7ff ff2a 	bl	8002cd0 <move_window>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d11d      	bne.n	8002ebe <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	8992      	ldrh	r2, [r2, #12]
 8002e90:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e94:	fb02 f200 	mul.w	r2, r2, r0
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fe8b 	bl	8002bb8 <ld_dword>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ea8:	617b      	str	r3, [r7, #20]
			break;
 8002eaa:	e009      	b.n	8002ec0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002eac:	2301      	movs	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	e006      	b.n	8002ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002eb2:	bf00      	nop
 8002eb4:	e004      	b.n	8002ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002eb6:	bf00      	nop
 8002eb8:	e002      	b.n	8002ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002ebe:	bf00      	nop
		}
	}

	return val;
 8002ec0:	697b      	ldr	r3, [r7, #20]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d031      	beq.n	8002f44 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e002      	b.n	8002eee <get_ldnumber+0x24>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3301      	adds	r3, #1
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b1f      	cmp	r3, #31
 8002ef4:	d903      	bls.n	8002efe <get_ldnumber+0x34>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b3a      	cmp	r3, #58	; 0x3a
 8002efc:	d1f4      	bne.n	8002ee8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b3a      	cmp	r3, #58	; 0x3a
 8002f04:	d11c      	bne.n	8002f40 <get_ldnumber+0x76>
			tp = *path;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	60fa      	str	r2, [r7, #12]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	3b30      	subs	r3, #48	; 0x30
 8002f16:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b09      	cmp	r3, #9
 8002f1c:	d80e      	bhi.n	8002f3c <get_ldnumber+0x72>
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d10a      	bne.n	8002f3c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <get_ldnumber+0x72>
					vol = (int)i;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	e002      	b.n	8002f46 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8002f44:	693b      	ldr	r3, [r7, #16]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	70da      	strb	r2, [r3, #3]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff feae 	bl	8002cd0 <move_window>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <check_fs+0x2a>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e038      	b.n	8002ff0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3338      	adds	r3, #56	; 0x38
 8002f82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fdfe 	bl	8002b88 <ld_word>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <check_fs+0x48>
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e029      	b.n	8002ff0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa2:	2be9      	cmp	r3, #233	; 0xe9
 8002fa4:	d009      	beq.n	8002fba <check_fs+0x66>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fac:	2beb      	cmp	r3, #235	; 0xeb
 8002fae:	d11e      	bne.n	8002fee <check_fs+0x9a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fb6:	2b90      	cmp	r3, #144	; 0x90
 8002fb8:	d119      	bne.n	8002fee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	3336      	adds	r3, #54	; 0x36
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fdf9 	bl	8002bb8 <ld_dword>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <check_fs+0xa4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <check_fs+0x82>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e00c      	b.n	8002ff0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3338      	adds	r3, #56	; 0x38
 8002fda:	3352      	adds	r3, #82	; 0x52
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fdeb 	bl	8002bb8 <ld_dword>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <check_fs+0xa8>)
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d101      	bne.n	8002fee <check_fs+0x9a>
 8002fea:	2300      	movs	r3, #0
 8002fec:	e000      	b.n	8002ff0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8002fee:	2302      	movs	r3, #2
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	00544146 	.word	0x00544146
 8002ffc:	33544146 	.word	0x33544146

08003000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b096      	sub	sp, #88	; 0x58
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7ff ff58 	bl	8002eca <get_ldnumber>
 800301a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800301c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301e:	2b00      	cmp	r3, #0
 8003020:	da01      	bge.n	8003026 <find_volume+0x26>
 8003022:	230b      	movs	r3, #11
 8003024:	e268      	b.n	80034f8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003026:	4ab0      	ldr	r2, [pc, #704]	; (80032e8 <find_volume+0x2e8>)
 8003028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <find_volume+0x3a>
 8003036:	230c      	movs	r3, #12
 8003038:	e25e      	b.n	80034f8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800303e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01a      	beq.n	8003086 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fcf9 	bl	8002a4c <disk_status>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <find_volume+0x82>
 8003072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800307e:	230a      	movs	r3, #10
 8003080:	e23a      	b.n	80034f8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8003082:	2300      	movs	r3, #0
 8003084:	e238      	b.n	80034f8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800308c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308e:	b2da      	uxtb	r2, r3
 8003090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003092:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	785b      	ldrb	r3, [r3, #1]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fcf1 	bl	8002a80 <disk_initialize>
 800309e:	4603      	mov	r3, r0
 80030a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80030a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80030b0:	2303      	movs	r3, #3
 80030b2:	e221      	b.n	80034f8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <find_volume+0xca>
 80030ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80030c6:	230a      	movs	r3, #10
 80030c8:	e216      	b.n	80034f8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	7858      	ldrb	r0, [r3, #1]
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	330c      	adds	r3, #12
 80030d2:	461a      	mov	r2, r3
 80030d4:	2102      	movs	r1, #2
 80030d6:	f7ff fd39 	bl	8002b4c <disk_ioctl>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <find_volume+0xe4>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e209      	b.n	80034f8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	899b      	ldrh	r3, [r3, #12]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d80d      	bhi.n	800310a <find_volume+0x10a>
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	899b      	ldrh	r3, [r3, #12]
 80030f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f6:	d308      	bcc.n	800310a <find_volume+0x10a>
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	899b      	ldrh	r3, [r3, #12]
 80030fc:	461a      	mov	r2, r3
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	899b      	ldrh	r3, [r3, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <find_volume+0x10e>
 800310a:	2301      	movs	r3, #1
 800310c:	e1f4      	b.n	80034f8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003116:	f7ff ff1d 	bl	8002f54 <check_fs>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003124:	2b02      	cmp	r3, #2
 8003126:	d14b      	bne.n	80031c0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003128:	2300      	movs	r3, #0
 800312a:	643b      	str	r3, [r7, #64]	; 0x40
 800312c:	e01f      	b.n	800316e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800313c:	4413      	add	r3, r2
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	3304      	adds	r3, #4
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <find_volume+0x158>
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	3308      	adds	r3, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fd32 	bl	8002bb8 <ld_dword>
 8003154:	4602      	mov	r2, r0
 8003156:	e000      	b.n	800315a <find_volume+0x15a>
 8003158:	2200      	movs	r2, #0
 800315a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003162:	440b      	add	r3, r1
 8003164:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316a:	3301      	adds	r3, #1
 800316c:	643b      	str	r3, [r7, #64]	; 0x40
 800316e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003170:	2b03      	cmp	r3, #3
 8003172:	d9dc      	bls.n	800312e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003174:	2300      	movs	r3, #0
 8003176:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <find_volume+0x184>
 800317e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003180:	3b01      	subs	r3, #1
 8003182:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800318c:	4413      	add	r3, r2
 800318e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003192:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <find_volume+0x1a6>
 800319a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800319c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800319e:	f7ff fed9 	bl	8002f54 <check_fs>
 80031a2:	4603      	mov	r3, r0
 80031a4:	e000      	b.n	80031a8 <find_volume+0x1a8>
 80031a6:	2303      	movs	r3, #3
 80031a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80031ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d905      	bls.n	80031c0 <find_volume+0x1c0>
 80031b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b6:	3301      	adds	r3, #1
 80031b8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d9e1      	bls.n	8003184 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80031c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d101      	bne.n	80031cc <find_volume+0x1cc>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e195      	b.n	80034f8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80031cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d901      	bls.n	80031d8 <find_volume+0x1d8>
 80031d4:	230d      	movs	r3, #13
 80031d6:	e18f      	b.n	80034f8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	3338      	adds	r3, #56	; 0x38
 80031dc:	330b      	adds	r3, #11
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fcd2 	bl	8002b88 <ld_word>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	899b      	ldrh	r3, [r3, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <find_volume+0x1f4>
 80031f0:	230d      	movs	r3, #13
 80031f2:	e181      	b.n	80034f8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	3338      	adds	r3, #56	; 0x38
 80031f8:	3316      	adds	r3, #22
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fcc4 	bl	8002b88 <ld_word>
 8003200:	4603      	mov	r3, r0
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <find_volume+0x218>
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	3338      	adds	r3, #56	; 0x38
 800320e:	3324      	adds	r3, #36	; 0x24
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fcd1 	bl	8002bb8 <ld_dword>
 8003216:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800321c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	789b      	ldrb	r3, [r3, #2]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d005      	beq.n	800323c <find_volume+0x23c>
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	789b      	ldrb	r3, [r3, #2]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d001      	beq.n	800323c <find_volume+0x23c>
 8003238:	230d      	movs	r3, #13
 800323a:	e15d      	b.n	80034f8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	789b      	ldrb	r3, [r3, #2]
 8003240:	461a      	mov	r2, r3
 8003242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003244:	fb02 f303 	mul.w	r3, r2, r3
 8003248:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003250:	b29a      	uxth	r2, r3
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	895b      	ldrh	r3, [r3, #10]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <find_volume+0x270>
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	895b      	ldrh	r3, [r3, #10]
 8003262:	461a      	mov	r2, r3
 8003264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003266:	895b      	ldrh	r3, [r3, #10]
 8003268:	3b01      	subs	r3, #1
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <find_volume+0x274>
 8003270:	230d      	movs	r3, #13
 8003272:	e141      	b.n	80034f8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003276:	3338      	adds	r3, #56	; 0x38
 8003278:	3311      	adds	r3, #17
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fc84 	bl	8002b88 <ld_word>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	891b      	ldrh	r3, [r3, #8]
 800328c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800328e:	8992      	ldrh	r2, [r2, #12]
 8003290:	0952      	lsrs	r2, r2, #5
 8003292:	b292      	uxth	r2, r2
 8003294:	fbb3 f1f2 	udiv	r1, r3, r2
 8003298:	fb02 f201 	mul.w	r2, r2, r1
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <find_volume+0x2a8>
 80032a4:	230d      	movs	r3, #13
 80032a6:	e127      	b.n	80034f8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80032a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032aa:	3338      	adds	r3, #56	; 0x38
 80032ac:	3313      	adds	r3, #19
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fc6a 	bl	8002b88 <ld_word>
 80032b4:	4603      	mov	r3, r0
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80032b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <find_volume+0x2cc>
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	3338      	adds	r3, #56	; 0x38
 80032c2:	3320      	adds	r3, #32
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fc77 	bl	8002bb8 <ld_dword>
 80032ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	3338      	adds	r3, #56	; 0x38
 80032d0:	330e      	adds	r3, #14
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fc58 	bl	8002b88 <ld_word>
 80032d8:	4603      	mov	r3, r0
 80032da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80032dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <find_volume+0x2ec>
 80032e2:	230d      	movs	r3, #13
 80032e4:	e108      	b.n	80034f8 <find_volume+0x4f8>
 80032e6:	bf00      	nop
 80032e8:	20000044 	.word	0x20000044

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80032ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80032ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f0:	4413      	add	r3, r2
 80032f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f4:	8911      	ldrh	r1, [r2, #8]
 80032f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032f8:	8992      	ldrh	r2, [r2, #12]
 80032fa:	0952      	lsrs	r2, r2, #5
 80032fc:	b292      	uxth	r2, r2
 80032fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8003302:	b292      	uxth	r2, r2
 8003304:	4413      	add	r3, r2
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330c:	429a      	cmp	r2, r3
 800330e:	d201      	bcs.n	8003314 <find_volume+0x314>
 8003310:	230d      	movs	r3, #13
 8003312:	e0f1      	b.n	80034f8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800331c:	8952      	ldrh	r2, [r2, #10]
 800331e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <find_volume+0x32e>
 800332a:	230d      	movs	r3, #13
 800332c:	e0e4      	b.n	80034f8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800332e:	2303      	movs	r3, #3
 8003330:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800333a:	4293      	cmp	r3, r2
 800333c:	d802      	bhi.n	8003344 <find_volume+0x344>
 800333e:	2302      	movs	r3, #2
 8003340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f640 72f5 	movw	r2, #4085	; 0xff5
 800334a:	4293      	cmp	r3, r2
 800334c:	d802      	bhi.n	8003354 <find_volume+0x354>
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003360:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003362:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003366:	441a      	add	r2, r3
 8003368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800336c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	441a      	add	r2, r3
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8003376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800337a:	2b03      	cmp	r3, #3
 800337c:	d11e      	bne.n	80033bc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	3338      	adds	r3, #56	; 0x38
 8003382:	332a      	adds	r3, #42	; 0x2a
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fbff 	bl	8002b88 <ld_word>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <find_volume+0x394>
 8003390:	230d      	movs	r3, #13
 8003392:	e0b1      	b.n	80034f8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	891b      	ldrh	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <find_volume+0x3a0>
 800339c:	230d      	movs	r3, #13
 800339e:	e0ab      	b.n	80034f8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	3338      	adds	r3, #56	; 0x38
 80033a4:	332c      	adds	r3, #44	; 0x2c
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fc06 	bl	8002bb8 <ld_dword>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	647b      	str	r3, [r7, #68]	; 0x44
 80033ba:	e01f      	b.n	80033fc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	891b      	ldrh	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <find_volume+0x3c8>
 80033c4:	230d      	movs	r3, #13
 80033c6:	e097      	b.n	80034f8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	441a      	add	r2, r3
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80033d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d103      	bne.n	80033e4 <find_volume+0x3e4>
 80033dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	e00a      	b.n	80033fa <find_volume+0x3fa>
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	085a      	lsrs	r2, r3, #1
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80033fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	899b      	ldrh	r3, [r3, #12]
 8003404:	4619      	mov	r1, r3
 8003406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003408:	440b      	add	r3, r1
 800340a:	3b01      	subs	r3, #1
 800340c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800340e:	8989      	ldrh	r1, [r1, #12]
 8003410:	fbb3 f3f1 	udiv	r3, r3, r1
 8003414:	429a      	cmp	r2, r3
 8003416:	d201      	bcs.n	800341c <find_volume+0x41c>
 8003418:	230d      	movs	r3, #13
 800341a:	e06d      	b.n	80034f8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	f04f 32ff 	mov.w	r2, #4294967295
 8003422:	619a      	str	r2, [r3, #24]
 8003424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003436:	2b03      	cmp	r3, #3
 8003438:	d149      	bne.n	80034ce <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	3338      	adds	r3, #56	; 0x38
 800343e:	3330      	adds	r3, #48	; 0x30
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fba1 	bl	8002b88 <ld_word>
 8003446:	4603      	mov	r3, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d140      	bne.n	80034ce <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344e:	3301      	adds	r3, #1
 8003450:	4619      	mov	r1, r3
 8003452:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003454:	f7ff fc3c 	bl	8002cd0 <move_window>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d137      	bne.n	80034ce <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	2200      	movs	r2, #0
 8003462:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	3338      	adds	r3, #56	; 0x38
 8003468:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fb8b 	bl	8002b88 <ld_word>
 8003472:	4603      	mov	r3, r0
 8003474:	461a      	mov	r2, r3
 8003476:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800347a:	429a      	cmp	r2, r3
 800347c:	d127      	bne.n	80034ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	3338      	adds	r3, #56	; 0x38
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fb98 	bl	8002bb8 <ld_dword>
 8003488:	4602      	mov	r2, r0
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <find_volume+0x500>)
 800348c:	429a      	cmp	r2, r3
 800348e:	d11e      	bne.n	80034ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003492:	3338      	adds	r3, #56	; 0x38
 8003494:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fb8d 	bl	8002bb8 <ld_dword>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <find_volume+0x504>)
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d113      	bne.n	80034ce <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	3338      	adds	r3, #56	; 0x38
 80034aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fb82 	bl	8002bb8 <ld_dword>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	3338      	adds	r3, #56	; 0x38
 80034be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fb78 	bl	8002bb8 <ld_dword>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80034d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <find_volume+0x508>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <find_volume+0x508>)
 80034e0:	801a      	strh	r2, [r3, #0]
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <find_volume+0x508>)
 80034e4:	881a      	ldrh	r2, [r3, #0]
 80034e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <find_volume+0x50c>)
 80034ee:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80034f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034f2:	f7ff fb85 	bl	8002c00 <clear_lock>
#endif
	return FR_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3758      	adds	r7, #88	; 0x58
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	41615252 	.word	0x41615252
 8003504:	61417272 	.word	0x61417272
 8003508:	20000048 	.word	0x20000048
 800350c:	2000006c 	.word	0x2000006c

08003510 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fccf 	bl	8002eca <get_ldnumber>
 800352c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	da01      	bge.n	8003538 <f_mount+0x28>
 8003534:	230b      	movs	r3, #11
 8003536:	e02b      	b.n	8003590 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <f_mount+0x88>)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003540:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8003548:	69b8      	ldr	r0, [r7, #24]
 800354a:	f7ff fb59 	bl	8002c00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	490d      	ldr	r1, [pc, #52]	; (8003598 <f_mount+0x88>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <f_mount+0x66>
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d001      	beq.n	800357a <f_mount+0x6a>
 8003576:	2300      	movs	r3, #0
 8003578:	e00a      	b.n	8003590 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800357a:	f107 010c 	add.w	r1, r7, #12
 800357e:	f107 0308 	add.w	r3, r7, #8
 8003582:	2200      	movs	r2, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fd3b 	bl	8003000 <find_volume>
 800358a:	4603      	mov	r3, r0
 800358c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800358e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000044 	.word	0x20000044

0800359c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b092      	sub	sp, #72	; 0x48
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80035a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	2200      	movs	r2, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fd24 	bl	8003000 <find_volume>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80035be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 8099 	bne.w	80036fa <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80035c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	3b02      	subs	r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d804      	bhi.n	80035e6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e089      	b.n	80036fa <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d128      	bne.n	8003644 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80035f2:	2302      	movs	r3, #2
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fb92 	bl	8002d2a <get_fat>
 8003606:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d103      	bne.n	8003618 <f_getfree+0x7c>
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003616:	e063      	b.n	80036e0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d103      	bne.n	8003626 <f_getfree+0x8a>
 800361e:	2302      	movs	r3, #2
 8003620:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003624:	e05c      	b.n	80036e0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d102      	bne.n	8003632 <f_getfree+0x96>
 800362c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800362e:	3301      	adds	r3, #1
 8003630:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	3301      	adds	r3, #1
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800363e:	429a      	cmp	r2, r3
 8003640:	d3db      	bcc.n	80035fa <f_getfree+0x5e>
 8003642:	e04d      	b.n	80036e0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
 8003654:	2300      	movs	r3, #0
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8003658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d113      	bne.n	8003686 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800365e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	63ba      	str	r2, [r7, #56]	; 0x38
 8003666:	4619      	mov	r1, r3
 8003668:	f7ff fb32 	bl	8002cd0 <move_window>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8003672:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003676:	2b00      	cmp	r3, #0
 8003678:	d131      	bne.n	80036de <f_getfree+0x142>
							p = fs->win;
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	3338      	adds	r3, #56	; 0x38
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	899b      	ldrh	r3, [r3, #12]
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d10f      	bne.n	80036ae <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800368e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003690:	f7ff fa7a 	bl	8002b88 <ld_word>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <f_getfree+0x104>
 800369a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800369c:	3301      	adds	r3, #1
 800369e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	3302      	adds	r3, #2
 80036a4:	633b      	str	r3, [r7, #48]	; 0x30
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	3b02      	subs	r3, #2
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
 80036ac:	e010      	b.n	80036d0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80036ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b0:	f7ff fa82 	bl	8002bb8 <ld_dword>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d102      	bne.n	80036c4 <f_getfree+0x128>
 80036be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c0:	3301      	adds	r3, #1
 80036c2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	3304      	adds	r3, #4
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036cc:	3b04      	subs	r3, #4
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80036d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d2:	3b01      	subs	r3, #1
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1bd      	bne.n	8003658 <f_getfree+0xbc>
 80036dc:	e000      	b.n	80036e0 <f_getfree+0x144>
							if (res != FR_OK) break;
 80036de:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036e4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036f0:	7912      	ldrb	r2, [r2, #4]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80036fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3748      	adds	r7, #72	; 0x48
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <FATFS_LinkDriverEx+0x94>)
 8003720:	7a5b      	ldrb	r3, [r3, #9]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d131      	bne.n	800378c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <FATFS_LinkDriverEx+0x94>)
 800372a:	7a5b      	ldrb	r3, [r3, #9]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <FATFS_LinkDriverEx+0x94>)
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <FATFS_LinkDriverEx+0x94>)
 8003738:	7a5b      	ldrb	r3, [r3, #9]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <FATFS_LinkDriverEx+0x94>)
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <FATFS_LinkDriverEx+0x94>)
 8003748:	7a5b      	ldrb	r3, [r3, #9]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <FATFS_LinkDriverEx+0x94>)
 8003750:	4413      	add	r3, r2
 8003752:	79fa      	ldrb	r2, [r7, #7]
 8003754:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <FATFS_LinkDriverEx+0x94>)
 8003758:	7a5b      	ldrb	r3, [r3, #9]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	b2d1      	uxtb	r1, r2
 8003760:	4a0e      	ldr	r2, [pc, #56]	; (800379c <FATFS_LinkDriverEx+0x94>)
 8003762:	7251      	strb	r1, [r2, #9]
 8003764:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003766:	7dbb      	ldrb	r3, [r7, #22]
 8003768:	3330      	adds	r3, #48	; 0x30
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	3301      	adds	r3, #1
 8003774:	223a      	movs	r2, #58	; 0x3a
 8003776:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	3302      	adds	r3, #2
 800377c:	222f      	movs	r2, #47	; 0x2f
 800377e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3303      	adds	r3, #3
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800378c:	7dfb      	ldrb	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	2000026c 	.word	0x2000026c

080037a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80037aa:	2200      	movs	r2, #0
 80037ac:	6839      	ldr	r1, [r7, #0]
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffaa 	bl	8003708 <FATFS_LinkDriverEx>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037c4:	480d      	ldr	r0, [pc, #52]	; (80037fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037c6:	490e      	ldr	r1, [pc, #56]	; (8003800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037c8:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037cc:	e002      	b.n	80037d4 <LoopCopyDataInit>

080037ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d2:	3304      	adds	r3, #4

080037d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d8:	d3f9      	bcc.n	80037ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037dc:	4c0b      	ldr	r4, [pc, #44]	; (800380c <LoopFillZerobss+0x26>)
  movs r3, #0
 80037de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e0:	e001      	b.n	80037e6 <LoopFillZerobss>

080037e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e4:	3204      	adds	r2, #4

080037e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e8:	d3fb      	bcc.n	80037e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037ea:	f7fd fd37 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ee:	f000 f811 	bl	8003814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037f2:	f7fd fb47 	bl	8000e84 <main>
  bx  lr    
 80037f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037f8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003800:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003804:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 8003808:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800380c:	200047cc 	.word	0x200047cc

08003810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC_IRQHandler>
	...

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4e0d      	ldr	r6, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1ba4      	subs	r4, r4, r6
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2500      	movs	r5, #0
 8003820:	42a5      	cmp	r5, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4e0b      	ldr	r6, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f000 f820 	bl	800386c <_init>
 800382c:	1ba4      	subs	r4, r4, r6
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2500      	movs	r5, #0
 8003832:	42a5      	cmp	r5, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800383c:	4798      	blx	r3
 800383e:	3501      	adds	r5, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003846:	4798      	blx	r3
 8003848:	3501      	adds	r5, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	080038a0 	.word	0x080038a0
 8003850:	080038a0 	.word	0x080038a0
 8003854:	080038a0 	.word	0x080038a0
 8003858:	080038a4 	.word	0x080038a4

0800385c <memset>:
 800385c:	4402      	add	r2, r0
 800385e:	4603      	mov	r3, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	d100      	bne.n	8003866 <memset+0xa>
 8003864:	4770      	bx	lr
 8003866:	f803 1b01 	strb.w	r1, [r3], #1
 800386a:	e7f9      	b.n	8003860 <memset+0x4>

0800386c <_init>:
 800386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386e:	bf00      	nop
 8003870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003872:	bc08      	pop	{r3}
 8003874:	469e      	mov	lr, r3
 8003876:	4770      	bx	lr

08003878 <_fini>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr
