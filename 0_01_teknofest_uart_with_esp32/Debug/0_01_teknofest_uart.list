
0_01_teknofest_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001284  08001284  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001288  08001288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  0800128c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          0000015c  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000017c  2000017c  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005b89  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000011a4  00000000  00000000  00025bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c8  00000000  00000000  00026d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000728  00000000  00000000  00027548  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002b6f  00000000  00000000  00027c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000027b9  00000000  00000000  0002a7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002cf98  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002018  00000000  00000000  0002d014  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002f02c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800126c 	.word	0x0800126c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	0800126c 	.word	0x0800126c

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <DAC_SetChannel1Data+0x34>)
 800029e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4413      	add	r3, r2
 80002a6:	3308      	adds	r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	461a      	mov	r2, r3
 80002ae:	887b      	ldrh	r3, [r7, #2]
 80002b0:	6013      	str	r3, [r2, #0]
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40007400 	.word	0x40007400

080002c4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	4b25      	ldr	r3, [pc, #148]	; (8000370 <DMA_Init+0xac>)
 80002dc:	4013      	ands	r3, r2
 80002de:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80002ee:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80002fa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000306:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800030c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000312:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000318:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4313      	orrs	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 0307 	bic.w	r3, r3, #7
 8000332:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4313      	orrs	r3, r2
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	691a      	ldr	r2, [r3, #16]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	f01c803f 	.word	0xf01c803f

08000374 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d006      	beq.n	8000394 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000392:	e005      	b.n	80003a0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f023 0201 	bic.w	r2, r3, #1
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80003b4:	2300      	movs	r3, #0
 80003b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80003c4:	2301      	movs	r3, #1
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e001      	b.n	80003ce <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80003ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80003dc:	b480      	push	{r7}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a15      	ldr	r2, [pc, #84]	; (8000448 <DMA_GetFlagStatus+0x6c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d802      	bhi.n	80003fc <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <DMA_GetFlagStatus+0x70>)
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	e001      	b.n	8000400 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <DMA_GetFlagStatus+0x74>)
 80003fe:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	e002      	b.n	8000418 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000412:	693b      	ldr	r3, [r7, #16]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800041e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000422:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	4013      	ands	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800042e:	2301      	movs	r3, #1
 8000430:	75fb      	strb	r3, [r7, #23]
 8000432:	e001      	b.n	8000438 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000438:	7dfb      	ldrb	r3, [r7, #23]
}
 800043a:	4618      	mov	r0, r3
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	4002640f 	.word	0x4002640f
 800044c:	40026000 	.word	0x40026000
 8000450:	40026400 	.word	0x40026400

08000454 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DMA_ClearFlag+0x50>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d802      	bhi.n	800046c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <DMA_ClearFlag+0x54>)
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e001      	b.n	8000470 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <DMA_ClearFlag+0x58>)
 800046e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000480:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000488:	e006      	b.n	8000498 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000490:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	6093      	str	r3, [r2, #8]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	4002640f 	.word	0x4002640f
 80004a8:	40026000 	.word	0x40026000
 80004ac:	40026400 	.word	0x40026400

080004b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
 80004c2:	2300      	movs	r3, #0
 80004c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e076      	b.n	80005ba <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004cc:	2201      	movs	r2, #1
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d165      	bne.n	80005b4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	2103      	movs	r1, #3
 80004f2:	fa01 f303 	lsl.w	r3, r1, r3
 80004f6:	43db      	mvns	r3, r3
 80004f8:	401a      	ands	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	4619      	mov	r1, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d003      	beq.n	8000526 <GPIO_Init+0x76>
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d12e      	bne.n	8000584 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2103      	movs	r1, #3
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	401a      	ands	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	795b      	ldrb	r3, [r3, #5]
 8000544:	4619      	mov	r1, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	b29b      	uxth	r3, r3
 800055c:	4619      	mov	r1, r3
 800055e:	2301      	movs	r3, #1
 8000560:	408b      	lsls	r3, r1
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	7992      	ldrb	r2, [r2, #6]
 8000572:	4611      	mov	r1, r2
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	b292      	uxth	r2, r2
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	b292      	uxth	r2, r2
 800057e:	431a      	orrs	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68da      	ldr	r2, [r3, #12]
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	401a      	ands	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	79db      	ldrb	r3, [r3, #7]
 80005a4:	4619      	mov	r1, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	fa01 f303 	lsl.w	r3, r1, r3
 80005ae:	431a      	orrs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d985      	bls.n	80004cc <GPIO_Init+0x1c>
    }
  }
}
 80005c0:	bf00      	nop
 80005c2:	371c      	adds	r7, #28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	887b      	ldrh	r3, [r7, #2]
 80005de:	405a      	eors	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	615a      	str	r2, [r3, #20]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
 80005fc:	4613      	mov	r3, r2
 80005fe:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000608:	787a      	ldrb	r2, [r7, #1]
 800060a:	887b      	ldrh	r3, [r7, #2]
 800060c:	f003 0307 	and.w	r3, r3, #7
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	08db      	lsrs	r3, r3, #3
 800061c:	b29b      	uxth	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	887b      	ldrh	r3, [r7, #2]
 8000622:	08db      	lsrs	r3, r3, #3
 8000624:	b29b      	uxth	r3, r3
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3208      	adds	r2, #8
 800062c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000630:	887b      	ldrh	r3, [r7, #2]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	210f      	movs	r1, #15
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
 800063e:	43db      	mvns	r3, r3
 8000640:	ea02 0103 	and.w	r1, r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f100 0208 	add.w	r2, r0, #8
 800064a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	08db      	lsrs	r3, r3, #3
 8000652:	b29b      	uxth	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3208      	adds	r2, #8
 800065a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4313      	orrs	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	08db      	lsrs	r3, r3, #3
 8000668:	b29b      	uxth	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3208      	adds	r2, #8
 8000670:	68b9      	ldr	r1, [r7, #8]
 8000672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	2302      	movs	r3, #2
 80006a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006a4:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 030c 	and.w	r3, r3, #12
 80006ac:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d007      	beq.n	80006c4 <RCC_GetClocksFreq+0x40>
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	d009      	beq.n	80006cc <RCC_GetClocksFreq+0x48>
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d13d      	bne.n	8000738 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a42      	ldr	r2, [pc, #264]	; (80007c8 <RCC_GetClocksFreq+0x144>)
 80006c0:	601a      	str	r2, [r3, #0]
      break;
 80006c2:	e03d      	b.n	8000740 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a41      	ldr	r2, [pc, #260]	; (80007cc <RCC_GetClocksFreq+0x148>)
 80006c8:	601a      	str	r2, [r3, #0]
      break;
 80006ca:	e039      	b.n	8000740 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006cc:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	0d9b      	lsrs	r3, r3, #22
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006d8:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006e0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00c      	beq.n	8000702 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006e8:	4a38      	ldr	r2, [pc, #224]	; (80007cc <RCC_GetClocksFreq+0x148>)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	4a34      	ldr	r2, [pc, #208]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 80006f2:	6852      	ldr	r2, [r2, #4]
 80006f4:	0992      	lsrs	r2, r2, #6
 80006f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	61fb      	str	r3, [r7, #28]
 8000700:	e00b      	b.n	800071a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000702:	4a31      	ldr	r2, [pc, #196]	; (80007c8 <RCC_GetClocksFreq+0x144>)
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 800070c:	6852      	ldr	r2, [r2, #4]
 800070e:	0992      	lsrs	r2, r2, #6
 8000710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800071a:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	0c1b      	lsrs	r3, r3, #16
 8000720:	f003 0303 	and.w	r3, r3, #3
 8000724:	3301      	adds	r3, #1
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	693b      	ldr	r3, [r7, #16]
 800072e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
      break;
 8000736:	e003      	b.n	8000740 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <RCC_GetClocksFreq+0x144>)
 800073c:	601a      	str	r2, [r3, #0]
      break;
 800073e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000748:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	091b      	lsrs	r3, r3, #4
 800074e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000750:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <RCC_GetClocksFreq+0x14c>)
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	40da      	lsrs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000770:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	0a9b      	lsrs	r3, r3, #10
 8000776:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <RCC_GetClocksFreq+0x14c>)
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685a      	ldr	r2, [r3, #4]
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	40da      	lsrs	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <RCC_GetClocksFreq+0x140>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000798:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	0b5b      	lsrs	r3, r3, #13
 800079e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <RCC_GetClocksFreq+0x14c>)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	40da      	lsrs	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	60da      	str	r2, [r3, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	; 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	40023800 	.word	0x40023800
 80007c8:	00f42400 	.word	0x00f42400
 80007cc:	007a1200 	.word	0x007a1200
 80007d0:	20000000 	.word	0x20000000

080007d4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d006      	beq.n	80007f4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007e6:	490a      	ldr	r1, [pc, #40]	; (8000810 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007f2:	e006      	b.n	8000802 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007f4:	4906      	ldr	r1, [pc, #24]	; (8000810 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	43db      	mvns	r3, r3
 80007fe:	4013      	ands	r3, r2
 8000800:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d006      	beq.n	8000834 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000826:	490a      	ldr	r1, [pc, #40]	; (8000850 <RCC_APB1PeriphClockCmd+0x3c>)
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <RCC_APB1PeriphClockCmd+0x3c>)
 800082a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000832:	e006      	b.n	8000842 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000834:	4906      	ldr	r1, [pc, #24]	; (8000850 <RCC_APB1PeriphClockCmd+0x3c>)
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <RCC_APB1PeriphClockCmd+0x3c>)
 8000838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	43db      	mvns	r3, r3
 800083e:	4013      	ands	r3, r2
 8000840:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	887a      	ldrh	r2, [r7, #2]
 8000864:	819a      	strh	r2, [r3, #12]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000872:	b480      	push	{r7}
 8000874:	b085      	sub	sp, #20
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	891b      	ldrh	r3, [r3, #8]
 8000886:	b29a      	uxth	r2, r3
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	4013      	ands	r3, r2
 800088c:	b29b      	uxth	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	e001      	b.n	800089c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	8a1b      	ldrh	r3, [r3, #16]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	88db      	ldrh	r3, [r3, #6]
 80008da:	461a      	mov	r2, r3
 80008dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008de:	4313      	orrs	r3, r2
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	899b      	ldrh	r3, [r3, #12]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80008f8:	f023 030c 	bic.w	r3, r3, #12
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	889a      	ldrh	r2, [r3, #4]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	891b      	ldrh	r3, [r3, #8]
 8000906:	4313      	orrs	r3, r2
 8000908:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800090e:	4313      	orrs	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	4313      	orrs	r3, r2
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	b29a      	uxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	8a9b      	ldrh	r3, [r3, #20]
 8000926:	b29b      	uxth	r3, r3
 8000928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	899b      	ldrh	r3, [r3, #12]
 8000936:	461a      	mov	r2, r3
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	4313      	orrs	r3, r2
 800093c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe9a 	bl	8000684 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a30      	ldr	r2, [pc, #192]	; (8000a14 <USART_Init+0x168>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d003      	beq.n	8000960 <USART_Init+0xb4>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <USART_Init+0x16c>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d102      	bne.n	8000966 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	623b      	str	r3, [r7, #32]
 8000964:	e001      	b.n	800096a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	899b      	ldrh	r3, [r3, #12]
 800096e:	b29b      	uxth	r3, r3
 8000970:	b21b      	sxth	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	da0c      	bge.n	8000990 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000976:	6a3a      	ldr	r2, [r7, #32]
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	009a      	lsls	r2, r3, #2
 8000980:	441a      	add	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fbb2 f3f3 	udiv	r3, r2, r3
 800098c:	61fb      	str	r3, [r7, #28]
 800098e:	e00b      	b.n	80009a8 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000990:	6a3a      	ldr	r2, [r7, #32]
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	009a      	lsls	r2, r3, #2
 800099a:	441a      	add	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <USART_Init+0x170>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	095b      	lsrs	r3, r3, #5
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	091b      	lsrs	r3, r3, #4
 80009ba:	2264      	movs	r2, #100	; 0x64
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	69fa      	ldr	r2, [r7, #28]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	899b      	ldrh	r3, [r3, #12]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da0c      	bge.n	80009ec <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	3332      	adds	r3, #50	; 0x32
 80009d8:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <USART_Init+0x170>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e6:	4313      	orrs	r3, r2
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
 80009ea:	e00b      	b.n	8000a04 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	011b      	lsls	r3, r3, #4
 80009f0:	3332      	adds	r3, #50	; 0x32
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <USART_Init+0x170>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	095b      	lsrs	r3, r3, #5
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a00:	4313      	orrs	r3, r2
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	811a      	strh	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40011400 	.word	0x40011400
 8000a1c:	51eb851f 	.word	0x51eb851f

08000a20 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d008      	beq.n	8000a44 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	899b      	ldrh	r3, [r3, #12]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a42:	e007      	b.n	8000a54 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	899b      	ldrh	r3, [r3, #12]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	819a      	strh	r2, [r3, #12]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	809a      	strh	r2, [r3, #4]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	889b      	ldrh	r3, [r3, #4]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a96:	b29b      	uxth	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	807b      	strh	r3, [r7, #2]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	095b      	lsrs	r3, r3, #5
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	f003 031f 	and.w	r3, r3, #31
 8000ad8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000ada:	2201      	movs	r2, #1
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d103      	bne.n	8000af2 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	330c      	adds	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e009      	b.n	8000b06 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d103      	bne.n	8000b00 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3310      	adds	r3, #16
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e002      	b.n	8000b06 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3314      	adds	r3, #20
 8000b04:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000b06:	787b      	ldrb	r3, [r7, #1]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	6811      	ldr	r1, [r2, #0]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000b18:	e006      	b.n	8000b28 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	6811      	ldr	r1, [r2, #0]
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	43d2      	mvns	r2, r2
 8000b24:	400a      	ands	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	095b      	lsrs	r3, r3, #5
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000b5a:	887b      	ldrh	r3, [r7, #2]
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000b62:	2201      	movs	r2, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d107      	bne.n	8000b82 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	899b      	ldrh	r3, [r3, #12]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e011      	b.n	8000ba6 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d107      	bne.n	8000b98 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	8a1b      	ldrh	r3, [r3, #16]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	4013      	ands	r3, r2
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e006      	b.n	8000ba6 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	8a9b      	ldrh	r3, [r3, #20]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <USART_GetITStatus+0xa4>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	74fb      	strb	r3, [r7, #19]
 8000bd6:	e001      	b.n	8000bdc <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000bdc:	7cfb      	ldrb	r3, [r7, #19]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000bf0:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <Audio_MAL_IRQHandler+0xec>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f7ff fbee 	bl	80003dc <DMA_GetFlagStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d064      	beq.n	8000cd0 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <Audio_MAL_IRQHandler+0xf0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d04c      	beq.n	8000ca8 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000c0e:	bf00      	nop
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fbc9 	bl	80003ac <DMA_GetCmdStatus>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1f7      	bne.n	8000c10 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <Audio_MAL_IRQHandler+0xec>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4610      	mov	r0, r2
 8000c2c:	f7ff fc12 	bl	8000454 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <Audio_MAL_IRQHandler+0xf4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <Audio_MAL_IRQHandler+0xf8>)
 8000c38:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <Audio_MAL_IRQHandler+0xf0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c42:	4293      	cmp	r3, r2
 8000c44:	bf28      	it	cs
 8000c46:	4613      	movcs	r3, r2
 8000c48:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <Audio_MAL_IRQHandler+0xf8>)
 8000c4a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4924      	ldr	r1, [pc, #144]	; (8000ce4 <Audio_MAL_IRQHandler+0xf8>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fb36 	bl	80002c4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fb88 	bl	8000374 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <Audio_MAL_IRQHandler+0xf4>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <Audio_MAL_IRQHandler+0xf0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c70:	d203      	bcs.n	8000c7a <Audio_MAL_IRQHandler+0x8e>
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <Audio_MAL_IRQHandler+0xf0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	e000      	b.n	8000c7c <Audio_MAL_IRQHandler+0x90>
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <Audio_MAL_IRQHandler+0xfc>)
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <Audio_MAL_IRQHandler+0xf4>)
 8000c80:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <Audio_MAL_IRQHandler+0xf0>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <Audio_MAL_IRQHandler+0xf0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	bf28      	it	cs
 8000c92:	460b      	movcs	r3, r1
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <Audio_MAL_IRQHandler+0xf0>)
 8000c98:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fb67 	bl	8000374 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000ca6:	e013      	b.n	8000cd0 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fb60 	bl	8000374 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <Audio_MAL_IRQHandler+0xe8>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <Audio_MAL_IRQHandler+0xec>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	f7ff fbc8 	bl	8000454 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <Audio_MAL_IRQHandler+0xf4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f98c 	bl	8000fe8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000018 	.word	0x20000018
 8000cd8:	2000001c 	.word	0x2000001c
 8000cdc:	20000010 	.word	0x20000010
 8000ce0:	20000040 	.word	0x20000040
 8000ce4:	20000080 	.word	0x20000080
 8000ce8:	0001fffe 	.word	0x0001fffe

08000cec <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000cf0:	f7ff ff7c 	bl	8000bec <Audio_MAL_IRQHandler>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000cfc:	f7ff ff76 	bl	8000bec <Audio_MAL_IRQHandler>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000d08:	2102      	movs	r1, #2
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <SPI3_IRQHandler+0x3c>)
 8000d0c:	f7ff fdb1 	bl	8000872 <SPI_I2S_GetFlagStatus>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d011      	beq.n	8000d3a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <SPI3_IRQHandler+0x40>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d106      	bne.n	8000d2c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000d1e:	f000 f96e 	bl	8000ffe <EVAL_AUDIO_GetSampleCallBack>
 8000d22:	4603      	mov	r3, r0
 8000d24:	4619      	mov	r1, r3
 8000d26:	2004      	movs	r0, #4
 8000d28:	f7ff fab0 	bl	800028c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000d2c:	f000 f967 	bl	8000ffe <EVAL_AUDIO_GetSampleCallBack>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4619      	mov	r1, r3
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <SPI3_IRQHandler+0x3c>)
 8000d36:	f7ff fd8d 	bl	8000854 <SPI_I2S_SendData>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40003c00 	.word	0x40003c00
 8000d44:	20000014 	.word	0x20000014

08000d48 <Delay>:

NVIC_InitTypeDef NVIC_InitStruct;


void Delay(uint32_t time)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	while(time--);
 8000d50:	bf00      	nop
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1fa      	bne.n	8000d52 <Delay+0xa>
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <GPIO_Config>:

void GPIO_Config()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff fd30 	bl	80007d4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000d74:	2101      	movs	r1, #1
 8000d76:	2008      	movs	r0, #8
 8000d78:	f7ff fd2c 	bl	80007d4 <RCC_AHB1PeriphClockCmd>


	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2); //PA2-TX
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <GPIO_Config+0x7c>)
 8000d82:	f7ff fc35 	bl	80005f0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2); //PA3-RX
 8000d86:	2207      	movs	r2, #7
 8000d88:	2103      	movs	r1, #3
 8000d8a:	4816      	ldr	r0, [pc, #88]	; (8000de4 <GPIO_Config+0x7c>)
 8000d8c:	f7ff fc30 	bl	80005f0 <GPIO_PinAFConfig>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <GPIO_Config+0x80>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 ;
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <GPIO_Config+0x80>)
 8000d98:	220c      	movs	r2, #12
 8000d9a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <GPIO_Config+0x80>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <GPIO_Config+0x80>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <GPIO_Config+0x80>)
 8000daa:	2203      	movs	r2, #3
 8000dac:	715a      	strb	r2, [r3, #5]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <GPIO_Config+0x80>)
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <GPIO_Config+0x7c>)
 8000db2:	f7ff fb7d 	bl	80004b0 <GPIO_Init>

	///
	    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <GPIO_Config+0x80>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	711a      	strb	r2, [r3, #4]
		GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12| GPIO_Pin_13  ;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <GPIO_Config+0x80>)
 8000dbe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000dc2:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <GPIO_Config+0x80>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	719a      	strb	r2, [r3, #6]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <GPIO_Config+0x80>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	71da      	strb	r2, [r3, #7]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <GPIO_Config+0x80>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	715a      	strb	r2, [r3, #5]

		GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	4904      	ldr	r1, [pc, #16]	; (8000de8 <GPIO_Config+0x80>)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <GPIO_Config+0x84>)
 8000dda:	f7ff fb69 	bl	80004b0 <GPIO_Init>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40020000 	.word	0x40020000
 8000de8:	200000d8 	.word	0x200000d8
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <USART_Config>:

void USART_Config()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000df4:	2101      	movs	r1, #1
 8000df6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000dfa:	f7ff fd0b 	bl	8000814 <RCC_APB1PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 9600;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <USART_Config+0x54>)
 8000e00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e04:	601a      	str	r2, [r3, #0]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <USART_Config+0x54>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	819a      	strh	r2, [r3, #12]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx ;
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <USART_Config+0x54>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	815a      	strh	r2, [r3, #10]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <USART_Config+0x54>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	811a      	strh	r2, [r3, #8]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <USART_Config+0x54>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	80da      	strh	r2, [r3, #6]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <USART_Config+0x54>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	809a      	strh	r2, [r3, #4]

	USART_Init(USART2, &USART_InitStruct);
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <USART_Config+0x54>)
 8000e26:	4808      	ldr	r0, [pc, #32]	; (8000e48 <USART_Config+0x58>)
 8000e28:	f7ff fd40 	bl	80008ac <USART_Init>

	USART_Cmd(USART2, ENABLE);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <USART_Config+0x58>)
 8000e30:	f7ff fdf6 	bl	8000a20 <USART_Cmd>

	USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);//MESAJ GELINCE INTERRUPA GIR
 8000e34:	2201      	movs	r2, #1
 8000e36:	f240 5125 	movw	r1, #1317	; 0x525
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <USART_Config+0x58>)
 8000e3c:	f7ff fe32 	bl	8000aa4 <USART_ITConfig>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200000c8 	.word	0x200000c8
 8000e48:	40004400 	.word	0x40004400

08000e4c <NVIC_Config>:

void NVIC_Config(){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

	NVIC_InitStruct.NVIC_IRQChannel=USART2_IRQn;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <NVIC_Config+0x28>)
 8000e52:	2226      	movs	r2, #38	; 0x26
 8000e54:	701a      	strb	r2, [r3, #0]
	NVIC_InitStruct.NVIC_IRQChannelCmd=ENABLE;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <NVIC_Config+0x28>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	70da      	strb	r2, [r3, #3]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority=0;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <NVIC_Config+0x28>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	705a      	strb	r2, [r3, #1]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority=0;
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <NVIC_Config+0x28>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	709a      	strb	r2, [r3, #2]

	NVIC_Init(&NVIC_InitStruct);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <NVIC_Config+0x28>)
 8000e6a:	f7ff f9ad 	bl	80001c8 <NVIC_Init>

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000144 	.word	0x20000144

08000e78 <uartDebug>:
void uartDebug(char *s){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  if( s[0]=='G' & s[1]=='o' & s[2]=='t' ){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b47      	cmp	r3, #71	; 0x47
 8000e86:	bf0c      	ite	eq
 8000e88:	2301      	moveq	r3, #1
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3301      	adds	r3, #1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b6f      	cmp	r3, #111	; 0x6f
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b74      	cmp	r3, #116	; 0x74
 8000eac:	bf0c      	ite	eq
 8000eae:	2301      	moveq	r3, #1
 8000eb0:	2300      	movne	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d004      	beq.n	8000ec4 <uartDebug+0x4c>

	  GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <uartDebug+0x54>)
 8000ec0:	f7ff fb84 	bl	80005cc <GPIO_ToggleBits>

    }

}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40020c00 	.word	0x40020c00

08000ed0 <USART2_IRQHandler>:

//send message tx-rx
void USART2_IRQHandler(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0


	if(USART_GetITStatus(USART2,USART_IT_RXNE)==SET){
 8000ed6:	f240 5125 	movw	r1, #1317	; 0x525
 8000eda:	481d      	ldr	r0, [pc, #116]	; (8000f50 <USART2_IRQHandler+0x80>)
 8000edc:	f7ff fe2a 	bl	8000b34 <USART_GetITStatus>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d130      	bne.n	8000f48 <USART2_IRQHandler+0x78>

		char rx_buffer=USART_ReceiveData(USART2);
 8000ee6:	481a      	ldr	r0, [pc, #104]	; (8000f50 <USART2_IRQHandler+0x80>)
 8000ee8:	f7ff fdcc 	bl	8000a84 <USART_ReceiveData>
 8000eec:	4603      	mov	r3, r0
 8000eee:	70fb      	strb	r3, [r7, #3]

		if(rx_buffer != '\n'){
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	2b0a      	cmp	r3, #10
 8000ef4:	d00a      	beq.n	8000f0c <USART2_IRQHandler+0x3c>
			 rxbuff[i]=rx_buffer;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <USART2_IRQHandler+0x84>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4917      	ldr	r1, [pc, #92]	; (8000f58 <USART2_IRQHandler+0x88>)
 8000efc:	78fa      	ldrb	r2, [r7, #3]
 8000efe:	54ca      	strb	r2, [r1, r3]
			i++;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <USART2_IRQHandler+0x84>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <USART2_IRQHandler+0x84>)
 8000f08:	6013      	str	r3, [r2, #0]
			}
		}


	}
}
 8000f0a:	e01d      	b.n	8000f48 <USART2_IRQHandler+0x78>
			rxbuff[i] =rx_buffer;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <USART2_IRQHandler+0x84>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4911      	ldr	r1, [pc, #68]	; (8000f58 <USART2_IRQHandler+0x88>)
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	54ca      	strb	r2, [r1, r3]
			i=0;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <USART2_IRQHandler+0x84>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
			GPIO_ToggleBits(GPIOD,GPIO_Pin_12);
 8000f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f20:	480e      	ldr	r0, [pc, #56]	; (8000f5c <USART2_IRQHandler+0x8c>)
 8000f22:	f7ff fb53 	bl	80005cc <GPIO_ToggleBits>
			uartDebug(rxbuff);
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <USART2_IRQHandler+0x88>)
 8000f28:	f7ff ffa6 	bl	8000e78 <uartDebug>
			for(int a=0;a<100;a++){
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	e007      	b.n	8000f42 <USART2_IRQHandler+0x72>
				rxbuff[a]='\0';
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <USART2_IRQHandler+0x88>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
			for(int a=0;a<100;a++){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b63      	cmp	r3, #99	; 0x63
 8000f46:	ddf4      	ble.n	8000f32 <USART2_IRQHandler+0x62>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40004400 	.word	0x40004400
 8000f54:	2000003c 	.word	0x2000003c
 8000f58:	200000e0 	.word	0x200000e0
 8000f5c:	40020c00 	.word	0x40020c00

08000f60 <USART_Puts>:


void USART_Puts(USART_TypeDef* USARTx, volatile char *s)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	while(*s)
 8000f6a:	e013      	b.n	8000f94 <USART_Puts+0x34>
	{
		while(!(USARTx->SR & 0x00000040));
 8000f6c:	bf00      	nop
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f8      	beq.n	8000f6e <USART_Puts+0xe>
		USART_SendData(USARTx, *s);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4619      	mov	r1, r3
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff fd6a 	bl	8000a60 <USART_SendData>
		*s++;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	603a      	str	r2, [r7, #0]
 8000f92:	781b      	ldrb	r3, [r3, #0]
	while(*s)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1e6      	bne.n	8000f6c <USART_Puts+0xc>
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <main>:

int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	GPIO_Config();
 8000fac:	f7ff fedc 	bl	8000d68 <GPIO_Config>
	USART_Config();
 8000fb0:	f7ff ff1e 	bl	8000df0 <USART_Config>
	NVIC_Config();
 8000fb4:	f7ff ff4a 	bl	8000e4c <NVIC_Config>

  while (1)
  {

	  rxbuffmqtt[0] = 'H';
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <main+0x34>)
 8000fba:	2248      	movs	r2, #72	; 0x48
 8000fbc:	701a      	strb	r2, [r3, #0]
	  rxbuffmqtt[1] = 'i';
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <main+0x34>)
 8000fc0:	2269      	movs	r2, #105	; 0x69
 8000fc2:	705a      	strb	r2, [r3, #1]
	  rxbuffmqtt[2] = '\n';
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <main+0x34>)
 8000fc6:	220a      	movs	r2, #10
 8000fc8:	709a      	strb	r2, [r3, #2]

	  USART_Puts(USART2,rxbuffmqtt);
 8000fca:	4904      	ldr	r1, [pc, #16]	; (8000fdc <main+0x34>)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <main+0x38>)
 8000fce:	f7ff ffc7 	bl	8000f60 <USART_Puts>

	  Delay(16800000);
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <main+0x3c>)
 8000fd4:	f7ff feb8 	bl	8000d48 <Delay>
	  rxbuffmqtt[0] = 'H';
 8000fd8:	e7ee      	b.n	8000fb8 <main+0x10>
 8000fda:	bf00      	nop
 8000fdc:	200000bc 	.word	0x200000bc
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	01005900 	.word	0x01005900

08000fe8 <EVAL_AUDIO_TransferComplete_CallBack>:
  }
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000ff2:	bf00      	nop
}
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <EVAL_AUDIO_GetSampleCallBack>:

uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8001002:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001014:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001016:	e003      	b.n	8001020 <LoopCopyDataInit>

08001018 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800101a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800101c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800101e:	3104      	adds	r1, #4

08001020 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001024:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001026:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001028:	d3f6      	bcc.n	8001018 <CopyDataInit>
  ldr  r2, =_sbss
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800102c:	e002      	b.n	8001034 <LoopFillZerobss>

0800102e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800102e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001030:	f842 3b04 	str.w	r3, [r2], #4

08001034 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001036:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001038:	d3f9      	bcc.n	800102e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800103a:	f000 f841 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f000 f8f1 	bl	8001224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff ffb1 	bl	8000fa8 <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800104c:	0800128c 	.word	0x0800128c
  ldr  r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001054:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8001058:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800105c:	2000017c 	.word	0x2000017c

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>

08001062 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001074:	e7fe      	b.n	8001074 <HardFault_Handler+0x4>

08001076 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800107a:	e7fe      	b.n	800107a <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001080:	e7fe      	b.n	8001080 <BusFault_Handler+0x4>

08001082 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001086:	e7fe      	b.n	8001086 <UsageFault_Handler+0x4>

08001088 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4a16      	ldr	r2, [pc, #88]	; (8001120 <SystemInit+0x60>)
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <SystemInit+0x60>)
 80010c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <SystemInit+0x64>)
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <SystemInit+0x64>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <SystemInit+0x64>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <SystemInit+0x64>)
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <SystemInit+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <SystemInit+0x64>)
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <SystemInit+0x68>)
 80010fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <SystemInit+0x64>)
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <SystemInit+0x64>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SystemInit+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800110e:	f000 f80d 	bl	800112c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001112:	4b03      	ldr	r3, [pc, #12]	; (8001120 <SystemInit+0x60>)
 8001114:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001118:	609a      	str	r2, [r3, #8]
#endif
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	40023800 	.word	0x40023800
 8001128:	24003010 	.word	0x24003010

0800112c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800113a:	4a36      	ldr	r2, [pc, #216]	; (8001214 <SetSysClock+0xe8>)
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <SetSysClock+0xe8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001146:	4b33      	ldr	r3, [pc, #204]	; (8001214 <SetSysClock+0xe8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3301      	adds	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d103      	bne.n	8001164 <SetSysClock+0x38>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001162:	d1f0      	bne.n	8001146 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <SetSysClock+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001170:	2301      	movs	r3, #1
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	e001      	b.n	800117a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d142      	bne.n	8001206 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001180:	4a24      	ldr	r2, [pc, #144]	; (8001214 <SetSysClock+0xe8>)
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <SetSysClock+0xe8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 800118c:	4a22      	ldr	r2, [pc, #136]	; (8001218 <SetSysClock+0xec>)
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <SetSysClock+0xec>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001196:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <SetSysClock+0xe8>)
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <SetSysClock+0xe8>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80011a0:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <SetSysClock+0xe8>)
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <SetSysClock+0xe8>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011aa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <SetSysClock+0xe8>)
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <SetSysClock+0xe8>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80011b6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <SetSysClock+0xe8>)
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <SetSysClock+0xf0>)
 80011bc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <SetSysClock+0xe8>)
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <SetSysClock+0xe8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011c8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011ca:	bf00      	nop
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <SetSysClock+0xe8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f9      	beq.n	80011cc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <SetSysClock+0xf4>)
 80011da:	f240 6205 	movw	r2, #1541	; 0x605
 80011de:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <SetSysClock+0xe8>)
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <SetSysClock+0xe8>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f023 0303 	bic.w	r3, r3, #3
 80011ea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <SetSysClock+0xe8>)
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <SetSysClock+0xe8>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80011f8:	bf00      	nop
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SetSysClock+0xe8>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b08      	cmp	r3, #8
 8001204:	d1f9      	bne.n	80011fa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000
 800121c:	07405408 	.word	0x07405408
 8001220:	40023c00 	.word	0x40023c00

08001224 <__libc_init_array>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	4e0d      	ldr	r6, [pc, #52]	; (800125c <__libc_init_array+0x38>)
 8001228:	4c0d      	ldr	r4, [pc, #52]	; (8001260 <__libc_init_array+0x3c>)
 800122a:	1ba4      	subs	r4, r4, r6
 800122c:	10a4      	asrs	r4, r4, #2
 800122e:	2500      	movs	r5, #0
 8001230:	42a5      	cmp	r5, r4
 8001232:	d109      	bne.n	8001248 <__libc_init_array+0x24>
 8001234:	4e0b      	ldr	r6, [pc, #44]	; (8001264 <__libc_init_array+0x40>)
 8001236:	4c0c      	ldr	r4, [pc, #48]	; (8001268 <__libc_init_array+0x44>)
 8001238:	f000 f818 	bl	800126c <_init>
 800123c:	1ba4      	subs	r4, r4, r6
 800123e:	10a4      	asrs	r4, r4, #2
 8001240:	2500      	movs	r5, #0
 8001242:	42a5      	cmp	r5, r4
 8001244:	d105      	bne.n	8001252 <__libc_init_array+0x2e>
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800124c:	4798      	blx	r3
 800124e:	3501      	adds	r5, #1
 8001250:	e7ee      	b.n	8001230 <__libc_init_array+0xc>
 8001252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001256:	4798      	blx	r3
 8001258:	3501      	adds	r5, #1
 800125a:	e7f2      	b.n	8001242 <__libc_init_array+0x1e>
 800125c:	08001284 	.word	0x08001284
 8001260:	08001284 	.word	0x08001284
 8001264:	08001284 	.word	0x08001284
 8001268:	08001288 	.word	0x08001288

0800126c <_init>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	bf00      	nop
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr

08001278 <_fini>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr
